// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/rpc/v1/server/accounts.proto

package server

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AccountExistsRequest struct {
	// identity (e.g. Email, Phone No.)
	Identity             string   `protobuf:"bytes,1,opt,name=identity,proto3" json:"identity,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountExistsRequest) Reset()         { *m = AccountExistsRequest{} }
func (m *AccountExistsRequest) String() string { return proto.CompactTextString(m) }
func (*AccountExistsRequest) ProtoMessage()    {}
func (*AccountExistsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97b790463283daf, []int{0}
}

func (m *AccountExistsRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountExistsRequest.Unmarshal(m, b)
}
func (m *AccountExistsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountExistsRequest.Marshal(b, m, deterministic)
}
func (m *AccountExistsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountExistsRequest.Merge(m, src)
}
func (m *AccountExistsRequest) XXX_Size() int {
	return xxx_messageInfo_AccountExistsRequest.Size(m)
}
func (m *AccountExistsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountExistsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AccountExistsRequest proto.InternalMessageInfo

func (m *AccountExistsRequest) GetIdentity() string {
	if m != nil {
		return m.Identity
	}
	return ""
}

type AccountExistsResponse struct {
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	// ID of the account corresponding to the given identity, if the account exists
	AccountId            string   `protobuf:"bytes,2,opt,name=accountId,proto3" json:"accountId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AccountExistsResponse) Reset()         { *m = AccountExistsResponse{} }
func (m *AccountExistsResponse) String() string { return proto.CompactTextString(m) }
func (*AccountExistsResponse) ProtoMessage()    {}
func (*AccountExistsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a97b790463283daf, []int{1}
}

func (m *AccountExistsResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AccountExistsResponse.Unmarshal(m, b)
}
func (m *AccountExistsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AccountExistsResponse.Marshal(b, m, deterministic)
}
func (m *AccountExistsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountExistsResponse.Merge(m, src)
}
func (m *AccountExistsResponse) XXX_Size() int {
	return xxx_messageInfo_AccountExistsResponse.Size(m)
}
func (m *AccountExistsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountExistsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AccountExistsResponse proto.InternalMessageInfo

func (m *AccountExistsResponse) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *AccountExistsResponse) GetAccountId() string {
	if m != nil {
		return m.AccountId
	}
	return ""
}

func init() {
	proto.RegisterType((*AccountExistsRequest)(nil), "airbloc.rpc.v1.AccountExistsRequest")
	proto.RegisterType((*AccountExistsResponse)(nil), "airbloc.rpc.v1.AccountExistsResponse")
}

func init() { proto.RegisterFile("proto/rpc/v1/server/accounts.proto", fileDescriptor_a97b790463283daf) }

var fileDescriptor_a97b790463283daf = []byte{
	// 211 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0x2a, 0x28, 0xca, 0x2f,
	0xc9, 0xd7, 0x2f, 0x2a, 0x48, 0xd6, 0x2f, 0x33, 0xd4, 0x2f, 0x4e, 0x2d, 0x2a, 0x4b, 0x2d, 0xd2,
	0x4f, 0x4c, 0x4e, 0xce, 0x2f, 0xcd, 0x2b, 0x29, 0xd6, 0x03, 0x4b, 0x0a, 0xf1, 0x25, 0x66, 0x16,
	0x25, 0xe5, 0xe4, 0x27, 0xeb, 0x15, 0x15, 0x24, 0xeb, 0x95, 0x19, 0x2a, 0x19, 0x71, 0x89, 0x38,
	0x42, 0x54, 0xb8, 0x56, 0x64, 0x16, 0x97, 0x14, 0x07, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08,
	0x49, 0x71, 0x71, 0x64, 0xa6, 0xa4, 0xe6, 0x95, 0x64, 0x96, 0x54, 0x4a, 0x30, 0x2a, 0x30, 0x6a,
	0x70, 0x06, 0xc1, 0xf9, 0x4a, 0xbe, 0x5c, 0xa2, 0x68, 0x7a, 0x8a, 0x0b, 0xf2, 0xf3, 0x8a, 0x53,
	0x85, 0xc4, 0xb8, 0xd8, 0x52, 0xc1, 0x22, 0x60, 0x2d, 0x1c, 0x41, 0x50, 0x9e, 0x90, 0x0c, 0x17,
	0x27, 0xd4, 0x19, 0x9e, 0x29, 0x12, 0x4c, 0x60, 0xd3, 0x10, 0x02, 0x46, 0x89, 0x5c, 0x1c, 0x50,
	0xe3, 0x8a, 0x85, 0x42, 0xb9, 0xd8, 0x20, 0x66, 0x0a, 0xa9, 0xe8, 0xa1, 0xba, 0x54, 0x0f, 0x9b,
	0x33, 0xa5, 0x54, 0x09, 0xa8, 0x82, 0x38, 0xcc, 0xc9, 0x38, 0xca, 0x30, 0x3d, 0xb3, 0x24, 0xa3,
	0x34, 0x49, 0x2f, 0x39, 0x3f, 0x57, 0x1f, 0xaa, 0x05, 0x46, 0xeb, 0xa6, 0xe7, 0xeb, 0x63, 0x09,
	0xb9, 0x24, 0x36, 0xb0, 0xa0, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x71, 0x03, 0x8a, 0x10, 0x57,
	0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// AccountsClient is the client API for Accounts service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccountsClient interface {
	// Exists return true if account exists with given identity information (e.g. Email).
	Exists(ctx context.Context, in *AccountExistsRequest, opts ...grpc.CallOption) (*AccountExistsResponse, error)
}

type accountsClient struct {
	cc *grpc.ClientConn
}

func NewAccountsClient(cc *grpc.ClientConn) AccountsClient {
	return &accountsClient{cc}
}

func (c *accountsClient) Exists(ctx context.Context, in *AccountExistsRequest, opts ...grpc.CallOption) (*AccountExistsResponse, error) {
	out := new(AccountExistsResponse)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Accounts/Exists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AccountsServer is the server API for Accounts service.
type AccountsServer interface {
	// Exists return true if account exists with given identity information (e.g. Email).
	Exists(context.Context, *AccountExistsRequest) (*AccountExistsResponse, error)
}

func RegisterAccountsServer(s *grpc.Server, srv AccountsServer) {
	s.RegisterService(&_Accounts_serviceDesc, srv)
}

func _Accounts_Exists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AccountsServer).Exists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Accounts/Exists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AccountsServer).Exists(ctx, req.(*AccountExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Accounts_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airbloc.rpc.v1.Accounts",
	HandlerType: (*AccountsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Exists",
			Handler:    _Accounts_Exists_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/v1/server/accounts.proto",
}
