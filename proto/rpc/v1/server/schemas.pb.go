// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/rpc/v1/server/schemas.proto

package server

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type CreateSchemaRequest struct {
	// a unique name of the schema.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// a [JSON Schema](https://json-schema.org/) for data.
	Schema               string   `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSchemaRequest) Reset()         { *m = CreateSchemaRequest{} }
func (m *CreateSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*CreateSchemaRequest) ProtoMessage()    {}
func (*CreateSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9e60d0c58cd65b3, []int{0}
}

func (m *CreateSchemaRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSchemaRequest.Unmarshal(m, b)
}
func (m *CreateSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSchemaRequest.Marshal(b, m, deterministic)
}
func (m *CreateSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSchemaRequest.Merge(m, src)
}
func (m *CreateSchemaRequest) XXX_Size() int {
	return xxx_messageInfo_CreateSchemaRequest.Size(m)
}
func (m *CreateSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSchemaRequest proto.InternalMessageInfo

func (m *CreateSchemaRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *CreateSchemaRequest) GetSchema() string {
	if m != nil {
		return m.Schema
	}
	return ""
}

type CreateSchemaResult struct {
	// true if the name already exists.
	Exists bool `protobuf:"varint,1,opt,name=exists,proto3" json:"exists,omitempty"`
	// ID of the created schema.
	Id                   string   `protobuf:"bytes,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreateSchemaResult) Reset()         { *m = CreateSchemaResult{} }
func (m *CreateSchemaResult) String() string { return proto.CompactTextString(m) }
func (*CreateSchemaResult) ProtoMessage()    {}
func (*CreateSchemaResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_e9e60d0c58cd65b3, []int{1}
}

func (m *CreateSchemaResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreateSchemaResult.Unmarshal(m, b)
}
func (m *CreateSchemaResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreateSchemaResult.Marshal(b, m, deterministic)
}
func (m *CreateSchemaResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateSchemaResult.Merge(m, src)
}
func (m *CreateSchemaResult) XXX_Size() int {
	return xxx_messageInfo_CreateSchemaResult.Size(m)
}
func (m *CreateSchemaResult) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateSchemaResult.DiscardUnknown(m)
}

var xxx_messageInfo_CreateSchemaResult proto.InternalMessageInfo

func (m *CreateSchemaResult) GetExists() bool {
	if m != nil {
		return m.Exists
	}
	return false
}

func (m *CreateSchemaResult) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*CreateSchemaRequest)(nil), "airbloc.rpc.v1.CreateSchemaRequest")
	proto.RegisterType((*CreateSchemaResult)(nil), "airbloc.rpc.v1.CreateSchemaResult")
}

func init() { proto.RegisterFile("proto/rpc/v1/server/schemas.proto", fileDescriptor_e9e60d0c58cd65b3) }

var fileDescriptor_e9e60d0c58cd65b3 = []byte{
	// 212 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x90, 0x31, 0x4f, 0x86, 0x30,
	0x10, 0x86, 0x03, 0x31, 0x8d, 0xde, 0xc0, 0x70, 0x26, 0x86, 0x38, 0x29, 0x2e, 0x2e, 0xb6, 0x41,
	0x56, 0x17, 0xf5, 0x17, 0x88, 0x9b, 0x4e, 0xa5, 0x5c, 0xa0, 0x09, 0x58, 0x6c, 0x0b, 0xf1, 0xe7,
	0x1b, 0x4a, 0xbf, 0x81, 0x84, 0x7c, 0x53, 0x7b, 0x6f, 0x9f, 0x3e, 0x79, 0x73, 0x70, 0x3f, 0x59,
	0xe3, 0x8d, 0xb0, 0x93, 0x12, 0x4b, 0x29, 0x1c, 0xd9, 0x85, 0xac, 0x70, 0xaa, 0xa7, 0x51, 0x3a,
	0x1e, 0xde, 0x30, 0x93, 0xda, 0x36, 0x83, 0x51, 0xdc, 0x4e, 0x8a, 0x2f, 0x65, 0xf1, 0x0a, 0xd7,
	0xef, 0x96, 0xa4, 0xa7, 0xcf, 0x80, 0xd5, 0xf4, 0x3b, 0x93, 0xf3, 0x88, 0x70, 0xf1, 0x23, 0x47,
	0xca, 0x93, 0xbb, 0xe4, 0xf1, 0xaa, 0x0e, 0x77, 0xbc, 0x01, 0xb6, 0xb9, 0xf2, 0x34, 0xa4, 0x71,
	0x2a, 0x5e, 0x00, 0xf7, 0x0a, 0x37, 0x0f, 0x7e, 0xa5, 0xe9, 0x4f, 0x3b, 0xef, 0x82, 0xe3, 0xb2,
	0x8e, 0x13, 0x66, 0x90, 0xea, 0x36, 0x1a, 0x52, 0xdd, 0x3e, 0x7f, 0x03, 0xdb, 0xfe, 0xe1, 0x07,
	0xb0, 0xcd, 0x83, 0x0f, 0x7c, 0xdf, 0x92, 0x1f, 0x54, 0xbc, 0x2d, 0xce, 0x43, 0x6b, 0x89, 0xb7,
	0xea, 0xab, 0xec, 0xb4, 0xef, 0xe7, 0x86, 0x2b, 0x33, 0x8a, 0xc8, 0x9f, 0xce, 0xa7, 0xce, 0x88,
	0x83, 0x85, 0x35, 0x2c, 0x84, 0xd5, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0xaf, 0xbe, 0xd8,
	0x4e, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SchemaClient is the client API for Schema service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SchemaClient interface {
	// Create creates JSON schema and registers it into the blockchain.
	Create(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResult, error)
}

type schemaClient struct {
	cc *grpc.ClientConn
}

func NewSchemaClient(cc *grpc.ClientConn) SchemaClient {
	return &schemaClient{cc}
}

func (c *schemaClient) Create(ctx context.Context, in *CreateSchemaRequest, opts ...grpc.CallOption) (*CreateSchemaResult, error) {
	out := new(CreateSchemaResult)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.Schema/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SchemaServer is the server API for Schema service.
type SchemaServer interface {
	// Create creates JSON schema and registers it into the blockchain.
	Create(context.Context, *CreateSchemaRequest) (*CreateSchemaResult, error)
}

func RegisterSchemaServer(s *grpc.Server, srv SchemaServer) {
	s.RegisterService(&_Schema_serviceDesc, srv)
}

func _Schema_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.Schema/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaServer).Create(ctx, req.(*CreateSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Schema_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airbloc.rpc.v1.Schema",
	HandlerType: (*SchemaServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _Schema_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/v1/server/schemas.proto",
}
