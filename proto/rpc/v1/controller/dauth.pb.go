// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/rpc/v1/controller/dauth.proto

package controller

import (
	context "context"
	fmt "fmt"
	math "math"

	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DAuthRequest struct {
	CollectionId         string   `protobuf:"bytes,1,opt,name=collectionId,proto3" json:"collectionId,omitempty"`
	PasswordSignature    []byte   `protobuf:"bytes,2,opt,name=passwordSignature,proto3" json:"passwordSignature,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DAuthRequest) Reset()         { *m = DAuthRequest{} }
func (m *DAuthRequest) String() string { return proto.CompactTextString(m) }
func (*DAuthRequest) ProtoMessage()    {}
func (*DAuthRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0e4248a25303a2a9, []int{0}
}

func (m *DAuthRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DAuthRequest.Unmarshal(m, b)
}
func (m *DAuthRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DAuthRequest.Marshal(b, m, deterministic)
}
func (m *DAuthRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DAuthRequest.Merge(m, src)
}
func (m *DAuthRequest) XXX_Size() int {
	return xxx_messageInfo_DAuthRequest.Size(m)
}
func (m *DAuthRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DAuthRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DAuthRequest proto.InternalMessageInfo

func (m *DAuthRequest) GetCollectionId() string {
	if m != nil {
		return m.CollectionId
	}
	return ""
}

func (m *DAuthRequest) GetPasswordSignature() []byte {
	if m != nil {
		return m.PasswordSignature
	}
	return nil
}

func init() {
	proto.RegisterType((*DAuthRequest)(nil), "airbloc.rpc.v1.userdelegate.DAuthRequest")
}

func init() {
	proto.RegisterFile("proto/rpc/v1/controller/dauth.proto", fileDescriptor_0e4248a25303a2a9)
}

var fileDescriptor_0e4248a25303a2a9 = []byte{
	// 251 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xb1, 0x4a, 0x03, 0x41,
	0x10, 0x86, 0x39, 0x31, 0x82, 0xcb, 0x35, 0x6e, 0x21, 0x21, 0x69, 0x42, 0x6c, 0x22, 0xe8, 0x2c,
	0x51, 0xc4, 0x3a, 0x12, 0x8b, 0x58, 0x9e, 0x9d, 0x95, 0x77, 0x7b, 0xe3, 0xde, 0xc1, 0xe6, 0x66,
	0x9d, 0x9b, 0x4d, 0xc8, 0xcb, 0xf8, 0xac, 0x92, 0x8b, 0x01, 0x45, 0xb4, 0x4a, 0x35, 0x30, 0xff,
	0xcc, 0x37, 0x1f, 0x8c, 0xba, 0x08, 0x4c, 0x42, 0x86, 0x83, 0x35, 0xab, 0xa9, 0xb1, 0xd4, 0x08,
	0x93, 0xf7, 0xc8, 0xa6, 0xcc, 0xa3, 0x54, 0xd0, 0xa5, 0x7a, 0x98, 0xd7, 0x5c, 0x78, 0xb2, 0xc0,
	0xc1, 0xc2, 0x6a, 0x0a, 0xb1, 0x45, 0x2e, 0xd1, 0xa3, 0xcb, 0x05, 0x07, 0x43, 0x47, 0xe4, 0x3c,
	0x9a, 0x6e, 0xb4, 0x88, 0x6f, 0x06, 0x97, 0x41, 0x36, 0xbb, 0xcd, 0xf1, 0xab, 0x4a, 0xe7, 0xb3,
	0x28, 0x55, 0x86, 0xef, 0x11, 0x5b, 0xd1, 0x63, 0x95, 0xda, 0x2d, 0xdf, 0x4a, 0x4d, 0xcd, 0xa2,
	0xec, 0x27, 0xa3, 0x64, 0x72, 0x9a, 0xfd, 0xe8, 0xe9, 0x2b, 0x75, 0x16, 0xf2, 0xb6, 0x5d, 0x13,
	0x97, 0xcf, 0xb5, 0x6b, 0x72, 0x89, 0x8c, 0xfd, 0xa3, 0x51, 0x32, 0x49, 0xb3, 0xdf, 0xc1, 0xcd,
	0x47, 0xa2, 0x7a, 0xdd, 0x09, 0xfd, 0xa4, 0x7a, 0x33, 0xef, 0x69, 0xad, 0x2f, 0xe1, 0x1f, 0x5f,
	0xf8, 0xee, 0x33, 0x38, 0x87, 0x9d, 0x3d, 0xec, 0xed, 0xe1, 0x71, 0x6b, 0xaf, 0x17, 0xea, 0x78,
	0x8e, 0xcd, 0xe6, 0x00, 0xa8, 0x87, 0xfb, 0x97, 0x3b, 0x57, 0x4b, 0x15, 0x0b, 0xb0, 0xb4, 0x34,
	0x5f, 0xb8, 0x7d, 0xbd, 0x76, 0x64, 0xfe, 0xf8, 0x40, 0x71, 0xd2, 0x05, 0xb7, 0x9f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xa8, 0x47, 0x0a, 0xa5, 0xa3, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DAuthClient is the client API for DAuth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DAuthClient interface {
	Allow(ctx context.Context, in *DAuthRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	Deny(ctx context.Context, in *DAuthRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type dAuthClient struct {
	cc *grpc.ClientConn
}

func NewDAuthClient(cc *grpc.ClientConn) DAuthClient {
	return &dAuthClient{cc}
}

func (c *dAuthClient) Allow(ctx context.Context, in *DAuthRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.userdelegate.DAuth/Allow", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dAuthClient) Deny(ctx context.Context, in *DAuthRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/airbloc.rpc.v1.userdelegate.DAuth/Deny", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DAuthServer is the server API for DAuth service.
type DAuthServer interface {
	Allow(context.Context, *DAuthRequest) (*empty.Empty, error)
	Deny(context.Context, *DAuthRequest) (*empty.Empty, error)
}

func RegisterDAuthServer(s *grpc.Server, srv DAuthServer) {
	s.RegisterService(&_DAuth_serviceDesc, srv)
}

func _DAuth_Allow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAuthServer).Allow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.userdelegate.DAuth/Allow",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAuthServer).Allow(ctx, req.(*DAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DAuth_Deny_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DAuthServer).Deny(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/airbloc.rpc.v1.userdelegate.DAuth/Deny",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DAuthServer).Deny(ctx, req.(*DAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _DAuth_serviceDesc = grpc.ServiceDesc{
	ServiceName: "airbloc.rpc.v1.userdelegate.DAuth",
	HandlerType: (*DAuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Allow",
			Handler:    _DAuth_Allow_Handler,
		},
		{
			MethodName: "Deny",
			Handler:    _DAuth_Deny_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rpc/v1/controller/dauth.proto",
}
