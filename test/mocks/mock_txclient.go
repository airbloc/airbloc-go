// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/airbloc/airbloc-go/blockchain (interfaces: TxClient)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/shared/blockchain/bind"
	gomock "github.com/golang/mock/gomock"
	go_ethereum "github.com/klaytn/klaytn"
	types "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
)

// MockTxClient is a mock of TxClient interface
type MockTxClient struct {
	ctrl     *gomock.Controller
	recorder *MockTxClientMockRecorder
}

// MockTxClientMockRecorder is the mock recorder for MockTxClient
type MockTxClientMockRecorder struct {
	mock *MockTxClient
}

// NewMockTxClient creates a new mock instance
func NewMockTxClient(ctrl *gomock.Controller) *MockTxClient {
	mock := &MockTxClient{ctrl: ctrl}
	mock.recorder = &MockTxClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTxClient) EXPECT() *MockTxClientMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockTxClient) Account() *bind.TransactOpts {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(*bind.TransactOpts)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockTxClientMockRecorder) Account() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockTxClient)(nil).Account))
}

// CallContract mocks base method
func (m *MockTxClient) CallContract(arg0 context.Context, arg1 go_ethereum.CallMsg, arg2 *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CallContract", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CallContract indicates an expected call of CallContract
func (mr *MockTxClientMockRecorder) CallContract(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallContract", reflect.TypeOf((*MockTxClient)(nil).CallContract), arg0, arg1, arg2)
}

// CodeAt mocks base method
func (m *MockTxClient) CodeAt(arg0 context.Context, arg1 common.Address, arg2 *big.Int) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CodeAt", arg0, arg1, arg2)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CodeAt indicates an expected call of CodeAt
func (mr *MockTxClientMockRecorder) CodeAt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CodeAt", reflect.TypeOf((*MockTxClient)(nil).CodeAt), arg0, arg1, arg2)
}

// EstimateGas mocks base method
func (m *MockTxClient) EstimateGas(arg0 context.Context, arg1 go_ethereum.CallMsg) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EstimateGas", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EstimateGas indicates an expected call of EstimateGas
func (mr *MockTxClientMockRecorder) EstimateGas(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EstimateGas", reflect.TypeOf((*MockTxClient)(nil).EstimateGas), arg0, arg1)
}

// FilterLogs mocks base method
func (m *MockTxClient) FilterLogs(arg0 context.Context, arg1 go_ethereum.FilterQuery) ([]types.Log, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterLogs", arg0, arg1)
	ret0, _ := ret[0].([]types.Log)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterLogs indicates an expected call of FilterLogs
func (mr *MockTxClientMockRecorder) FilterLogs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterLogs", reflect.TypeOf((*MockTxClient)(nil).FilterLogs), arg0, arg1)
}

// GetContract mocks base method
func (m *MockTxClient) GetContract(arg0 interface{}) interface{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContract", arg0)
	ret0, _ := ret[0].(interface{})
	return ret0
}

// GetContract indicates an expected call of GetContract
func (mr *MockTxClientMockRecorder) GetContract(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContract", reflect.TypeOf((*MockTxClient)(nil).GetContract), arg0)
}

// PendingCodeAt mocks base method
func (m *MockTxClient) PendingCodeAt(arg0 context.Context, arg1 common.Address) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingCodeAt", arg0, arg1)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingCodeAt indicates an expected call of PendingCodeAt
func (mr *MockTxClientMockRecorder) PendingCodeAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingCodeAt", reflect.TypeOf((*MockTxClient)(nil).PendingCodeAt), arg0, arg1)
}

// PendingNonceAt mocks base method
func (m *MockTxClient) PendingNonceAt(arg0 context.Context, arg1 common.Address) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PendingNonceAt", arg0, arg1)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PendingNonceAt indicates an expected call of PendingNonceAt
func (mr *MockTxClientMockRecorder) PendingNonceAt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PendingNonceAt", reflect.TypeOf((*MockTxClient)(nil).PendingNonceAt), arg0, arg1)
}

// SendTransaction mocks base method
func (m *MockTxClient) SendTransaction(arg0 context.Context, arg1 *types.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendTransaction", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendTransaction indicates an expected call of SendTransaction
func (mr *MockTxClientMockRecorder) SendTransaction(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendTransaction", reflect.TypeOf((*MockTxClient)(nil).SendTransaction), arg0, arg1)
}

// SubscribeFilterLogs mocks base method
func (m *MockTxClient) SubscribeFilterLogs(arg0 context.Context, arg1 go_ethereum.FilterQuery, arg2 chan<- types.Log) (go_ethereum.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeFilterLogs", arg0, arg1, arg2)
	ret0, _ := ret[0].(go_ethereum.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeFilterLogs indicates an expected call of SubscribeFilterLogs
func (mr *MockTxClientMockRecorder) SubscribeFilterLogs(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeFilterLogs", reflect.TypeOf((*MockTxClient)(nil).SubscribeFilterLogs), arg0, arg1, arg2)
}

// SuggestGasPrice mocks base method
func (m *MockTxClient) SuggestGasPrice(arg0 context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SuggestGasPrice", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SuggestGasPrice indicates an expected call of SuggestGasPrice
func (mr *MockTxClientMockRecorder) SuggestGasPrice(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SuggestGasPrice", reflect.TypeOf((*MockTxClient)(nil).SuggestGasPrice), arg0)
}

// WaitDeployed mocks base method
func (m *MockTxClient) WaitDeployed(arg0 context.Context, arg1 *types.Transaction) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitDeployed", arg0, arg1)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitDeployed indicates an expected call of WaitDeployed
func (mr *MockTxClientMockRecorder) WaitDeployed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitDeployed", reflect.TypeOf((*MockTxClient)(nil).WaitDeployed), arg0, arg1)
}

// WaitMined mocks base method
func (m *MockTxClient) WaitMined(arg0 context.Context, arg1 *types.Transaction) (*types.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitMined", arg0, arg1)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitMined indicates an expected call of WaitMined
func (mr *MockTxClientMockRecorder) WaitMined(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitMined", reflect.TypeOf((*MockTxClient)(nil).WaitMined), arg0, arg1)
}
