// Code generated by MockGen. DO NOT EDIT.
// Source: erc20_escrow_wrapper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	types "github.com/airbloc/airbloc-go/shared/types"
	gomock "github.com/golang/mock/gomock"
	types0 "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
)

// MockIERC20EscrowManager is a mock of IERC20EscrowManager interface
type MockIERC20EscrowManager struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowManagerMockRecorder
}

// MockIERC20EscrowManagerMockRecorder is the mock recorder for MockIERC20EscrowManager
type MockIERC20EscrowManagerMockRecorder struct {
	mock *MockIERC20EscrowManager
}

// NewMockIERC20EscrowManager creates a new mock instance
func NewMockIERC20EscrowManager(ctrl *gomock.Controller) *MockIERC20EscrowManager {
	mock := &MockIERC20EscrowManager{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowManager) EXPECT() *MockIERC20EscrowManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIERC20EscrowManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIERC20EscrowManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIERC20EscrowManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIERC20EscrowManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIERC20EscrowManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIERC20EscrowManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIERC20EscrowManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIERC20EscrowManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIERC20EscrowManager)(nil).CreatedAt))
}

// Convert mocks base method
func (m *MockIERC20EscrowManager) Convert(sign [4]byte, args []byte, offerId types.ID) ([]byte, error) {
	ret := m.ctrl.Call(m, "Convert", sign, args, offerId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockIERC20EscrowManagerMockRecorder) Convert(sign, args, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockIERC20EscrowManager)(nil).Convert), sign, args, offerId)
}

// GetTransactSelector mocks base method
func (m *MockIERC20EscrowManager) GetTransactSelector() ([4]byte, error) {
	ret := m.ctrl.Call(m, "GetTransactSelector")
	ret0, _ := ret[0].([4]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactSelector indicates an expected call of GetTransactSelector
func (mr *MockIERC20EscrowManagerMockRecorder) GetTransactSelector() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactSelector", reflect.TypeOf((*MockIERC20EscrowManager)(nil).GetTransactSelector))
}

// Transact mocks base method
func (m *MockIERC20EscrowManager) Transact(ctx context.Context, token common.Address, amount *big.Int, offerId types.ID) error {
	ret := m.ctrl.Call(m, "Transact", ctx, token, amount, offerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Transact indicates an expected call of Transact
func (mr *MockIERC20EscrowManagerMockRecorder) Transact(ctx, token, amount, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockIERC20EscrowManager)(nil).Transact), ctx, token, amount, offerId)
}

// MockIERC20EscrowCalls is a mock of IERC20EscrowCalls interface
type MockIERC20EscrowCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowCallsMockRecorder
}

// MockIERC20EscrowCallsMockRecorder is the mock recorder for MockIERC20EscrowCalls
type MockIERC20EscrowCallsMockRecorder struct {
	mock *MockIERC20EscrowCalls
}

// NewMockIERC20EscrowCalls creates a new mock instance
func NewMockIERC20EscrowCalls(ctrl *gomock.Controller) *MockIERC20EscrowCalls {
	mock := &MockIERC20EscrowCalls{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowCalls) EXPECT() *MockIERC20EscrowCallsMockRecorder {
	return m.recorder
}

// Convert mocks base method
func (m *MockIERC20EscrowCalls) Convert(sign [4]byte, args []byte, offerId types.ID) ([]byte, error) {
	ret := m.ctrl.Call(m, "Convert", sign, args, offerId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockIERC20EscrowCallsMockRecorder) Convert(sign, args, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockIERC20EscrowCalls)(nil).Convert), sign, args, offerId)
}

// GetTransactSelector mocks base method
func (m *MockIERC20EscrowCalls) GetTransactSelector() ([4]byte, error) {
	ret := m.ctrl.Call(m, "GetTransactSelector")
	ret0, _ := ret[0].([4]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactSelector indicates an expected call of GetTransactSelector
func (mr *MockIERC20EscrowCallsMockRecorder) GetTransactSelector() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactSelector", reflect.TypeOf((*MockIERC20EscrowCalls)(nil).GetTransactSelector))
}

// MockIERC20EscrowTransacts is a mock of IERC20EscrowTransacts interface
type MockIERC20EscrowTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowTransactsMockRecorder
}

// MockIERC20EscrowTransactsMockRecorder is the mock recorder for MockIERC20EscrowTransacts
type MockIERC20EscrowTransactsMockRecorder struct {
	mock *MockIERC20EscrowTransacts
}

// NewMockIERC20EscrowTransacts creates a new mock instance
func NewMockIERC20EscrowTransacts(ctrl *gomock.Controller) *MockIERC20EscrowTransacts {
	mock := &MockIERC20EscrowTransacts{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowTransacts) EXPECT() *MockIERC20EscrowTransactsMockRecorder {
	return m.recorder
}

// Transact mocks base method
func (m *MockIERC20EscrowTransacts) Transact(ctx context.Context, token common.Address, amount *big.Int, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Transact", ctx, token, amount, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transact indicates an expected call of Transact
func (mr *MockIERC20EscrowTransactsMockRecorder) Transact(ctx, token, amount, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockIERC20EscrowTransacts)(nil).Transact), ctx, token, amount, offerId)
}

// MockIERC20EscrowEvents is a mock of IERC20EscrowEvents interface
type MockIERC20EscrowEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowEventsMockRecorder
}

// MockIERC20EscrowEventsMockRecorder is the mock recorder for MockIERC20EscrowEvents
type MockIERC20EscrowEventsMockRecorder struct {
	mock *MockIERC20EscrowEvents
}

// NewMockIERC20EscrowEvents creates a new mock instance
func NewMockIERC20EscrowEvents(ctrl *gomock.Controller) *MockIERC20EscrowEvents {
	mock := &MockIERC20EscrowEvents{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowEvents) EXPECT() *MockIERC20EscrowEventsMockRecorder {
	return m.recorder
}

// MockIERC20EscrowFilterer is a mock of IERC20EscrowFilterer interface
type MockIERC20EscrowFilterer struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowFiltererMockRecorder
}

// MockIERC20EscrowFiltererMockRecorder is the mock recorder for MockIERC20EscrowFilterer
type MockIERC20EscrowFiltererMockRecorder struct {
	mock *MockIERC20EscrowFilterer
}

// NewMockIERC20EscrowFilterer creates a new mock instance
func NewMockIERC20EscrowFilterer(ctrl *gomock.Controller) *MockIERC20EscrowFilterer {
	mock := &MockIERC20EscrowFilterer{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowFiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowFilterer) EXPECT() *MockIERC20EscrowFiltererMockRecorder {
	return m.recorder
}

// MockIERC20EscrowParser is a mock of IERC20EscrowParser interface
type MockIERC20EscrowParser struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowParserMockRecorder
}

// MockIERC20EscrowParserMockRecorder is the mock recorder for MockIERC20EscrowParser
type MockIERC20EscrowParserMockRecorder struct {
	mock *MockIERC20EscrowParser
}

// NewMockIERC20EscrowParser creates a new mock instance
func NewMockIERC20EscrowParser(ctrl *gomock.Controller) *MockIERC20EscrowParser {
	mock := &MockIERC20EscrowParser{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowParser) EXPECT() *MockIERC20EscrowParserMockRecorder {
	return m.recorder
}

// MockIERC20EscrowWatcher is a mock of IERC20EscrowWatcher interface
type MockIERC20EscrowWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowWatcherMockRecorder
}

// MockIERC20EscrowWatcherMockRecorder is the mock recorder for MockIERC20EscrowWatcher
type MockIERC20EscrowWatcherMockRecorder struct {
	mock *MockIERC20EscrowWatcher
}

// NewMockIERC20EscrowWatcher creates a new mock instance
func NewMockIERC20EscrowWatcher(ctrl *gomock.Controller) *MockIERC20EscrowWatcher {
	mock := &MockIERC20EscrowWatcher{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowWatcher) EXPECT() *MockIERC20EscrowWatcherMockRecorder {
	return m.recorder
}

// MockIERC20EscrowContract is a mock of IERC20EscrowContract interface
type MockIERC20EscrowContract struct {
	ctrl     *gomock.Controller
	recorder *MockIERC20EscrowContractMockRecorder
}

// MockIERC20EscrowContractMockRecorder is the mock recorder for MockIERC20EscrowContract
type MockIERC20EscrowContractMockRecorder struct {
	mock *MockIERC20EscrowContract
}

// NewMockIERC20EscrowContract creates a new mock instance
func NewMockIERC20EscrowContract(ctrl *gomock.Controller) *MockIERC20EscrowContract {
	mock := &MockIERC20EscrowContract{ctrl: ctrl}
	mock.recorder = &MockIERC20EscrowContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIERC20EscrowContract) EXPECT() *MockIERC20EscrowContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIERC20EscrowContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIERC20EscrowContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIERC20EscrowContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockIERC20EscrowContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIERC20EscrowContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIERC20EscrowContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIERC20EscrowContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIERC20EscrowContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIERC20EscrowContract)(nil).CreatedAt))
}

// Convert mocks base method
func (m *MockIERC20EscrowContract) Convert(sign [4]byte, args []byte, offerId types.ID) ([]byte, error) {
	ret := m.ctrl.Call(m, "Convert", sign, args, offerId)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Convert indicates an expected call of Convert
func (mr *MockIERC20EscrowContractMockRecorder) Convert(sign, args, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Convert", reflect.TypeOf((*MockIERC20EscrowContract)(nil).Convert), sign, args, offerId)
}

// GetTransactSelector mocks base method
func (m *MockIERC20EscrowContract) GetTransactSelector() ([4]byte, error) {
	ret := m.ctrl.Call(m, "GetTransactSelector")
	ret0, _ := ret[0].([4]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactSelector indicates an expected call of GetTransactSelector
func (mr *MockIERC20EscrowContractMockRecorder) GetTransactSelector() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactSelector", reflect.TypeOf((*MockIERC20EscrowContract)(nil).GetTransactSelector))
}

// Transact mocks base method
func (m *MockIERC20EscrowContract) Transact(ctx context.Context, token common.Address, amount *big.Int, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Transact", ctx, token, amount, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transact indicates an expected call of Transact
func (mr *MockIERC20EscrowContractMockRecorder) Transact(ctx, token, amount, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transact", reflect.TypeOf((*MockIERC20EscrowContract)(nil).Transact), ctx, token, amount, offerId)
}
