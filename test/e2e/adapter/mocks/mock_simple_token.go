// Code generated by MockGen. DO NOT EDIT.
// Source: simple_token_wrapper.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	adapter "github.com/airbloc/airbloc-go/test/e2e/adapter"
	gomock "github.com/golang/mock/gomock"
	bind "github.com/klaytn/klaytn/accounts/abi/bind"
	types "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockISimpleTokenManager is a mock of ISimpleTokenManager interface
type MockISimpleTokenManager struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenManagerMockRecorder
}

// MockISimpleTokenManagerMockRecorder is the mock recorder for MockISimpleTokenManager
type MockISimpleTokenManagerMockRecorder struct {
	mock *MockISimpleTokenManager
}

// NewMockISimpleTokenManager creates a new mock instance
func NewMockISimpleTokenManager(ctrl *gomock.Controller) *MockISimpleTokenManager {
	mock := &MockISimpleTokenManager{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenManager) EXPECT() *MockISimpleTokenManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockISimpleTokenManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockISimpleTokenManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockISimpleTokenManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockISimpleTokenManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockISimpleTokenManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockISimpleTokenManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockISimpleTokenManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockISimpleTokenManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockISimpleTokenManager)(nil).CreatedAt))
}

// Allowance mocks base method
func (m *MockISimpleTokenManager) Allowance(owner, spender common.Address) (*big.Int, error) {
	ret := m.ctrl.Call(m, "Allowance", owner, spender)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allowance indicates an expected call of Allowance
func (mr *MockISimpleTokenManagerMockRecorder) Allowance(owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowance", reflect.TypeOf((*MockISimpleTokenManager)(nil).Allowance), owner, spender)
}

// BalanceOf mocks base method
func (m *MockISimpleTokenManager) BalanceOf(account common.Address) (*big.Int, error) {
	ret := m.ctrl.Call(m, "BalanceOf", account)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf
func (mr *MockISimpleTokenManagerMockRecorder) BalanceOf(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockISimpleTokenManager)(nil).BalanceOf), account)
}

// IsMinter mocks base method
func (m *MockISimpleTokenManager) IsMinter(account common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsMinter", account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMinter indicates an expected call of IsMinter
func (mr *MockISimpleTokenManagerMockRecorder) IsMinter(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMinter", reflect.TypeOf((*MockISimpleTokenManager)(nil).IsMinter), account)
}

// TotalSupply mocks base method
func (m *MockISimpleTokenManager) TotalSupply() (*big.Int, error) {
	ret := m.ctrl.Call(m, "TotalSupply")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply
func (mr *MockISimpleTokenManagerMockRecorder) TotalSupply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockISimpleTokenManager)(nil).TotalSupply))
}

// AddMinter mocks base method
func (m *MockISimpleTokenManager) AddMinter(ctx context.Context, account common.Address) error {
	ret := m.ctrl.Call(m, "AddMinter", ctx, account)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddMinter indicates an expected call of AddMinter
func (mr *MockISimpleTokenManagerMockRecorder) AddMinter(ctx, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMinter", reflect.TypeOf((*MockISimpleTokenManager)(nil).AddMinter), ctx, account)
}

// Approve mocks base method
func (m *MockISimpleTokenManager) Approve(ctx context.Context, spender common.Address, value *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "Approve", ctx, spender, value)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Approve indicates an expected call of Approve
func (mr *MockISimpleTokenManagerMockRecorder) Approve(ctx, spender, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockISimpleTokenManager)(nil).Approve), ctx, spender, value)
}

// DecreaseAllowance mocks base method
func (m *MockISimpleTokenManager) DecreaseAllowance(ctx context.Context, spender common.Address, subtractedValue *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "DecreaseAllowance", ctx, spender, subtractedValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseAllowance indicates an expected call of DecreaseAllowance
func (mr *MockISimpleTokenManagerMockRecorder) DecreaseAllowance(ctx, spender, subtractedValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseAllowance", reflect.TypeOf((*MockISimpleTokenManager)(nil).DecreaseAllowance), ctx, spender, subtractedValue)
}

// IncreaseAllowance mocks base method
func (m *MockISimpleTokenManager) IncreaseAllowance(ctx context.Context, spender common.Address, addedValue *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "IncreaseAllowance", ctx, spender, addedValue)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseAllowance indicates an expected call of IncreaseAllowance
func (mr *MockISimpleTokenManagerMockRecorder) IncreaseAllowance(ctx, spender, addedValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseAllowance", reflect.TypeOf((*MockISimpleTokenManager)(nil).IncreaseAllowance), ctx, spender, addedValue)
}

// Mint mocks base method
func (m *MockISimpleTokenManager) Mint(ctx context.Context, account common.Address, amount *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "Mint", ctx, account, amount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mint indicates an expected call of Mint
func (mr *MockISimpleTokenManagerMockRecorder) Mint(ctx, account, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockISimpleTokenManager)(nil).Mint), ctx, account, amount)
}

// RenounceMinter mocks base method
func (m *MockISimpleTokenManager) RenounceMinter(ctx context.Context) error {
	ret := m.ctrl.Call(m, "RenounceMinter", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenounceMinter indicates an expected call of RenounceMinter
func (mr *MockISimpleTokenManagerMockRecorder) RenounceMinter(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenounceMinter", reflect.TypeOf((*MockISimpleTokenManager)(nil).RenounceMinter), ctx)
}

// Transfer mocks base method
func (m *MockISimpleTokenManager) Transfer(ctx context.Context, recipient common.Address, amount *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "Transfer", ctx, recipient, amount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockISimpleTokenManagerMockRecorder) Transfer(ctx, recipient, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockISimpleTokenManager)(nil).Transfer), ctx, recipient, amount)
}

// TransferFrom mocks base method
func (m *MockISimpleTokenManager) TransferFrom(ctx context.Context, sender, recipient common.Address, amount *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "TransferFrom", ctx, sender, recipient, amount)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferFrom indicates an expected call of TransferFrom
func (mr *MockISimpleTokenManagerMockRecorder) TransferFrom(ctx, sender, recipient, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferFrom", reflect.TypeOf((*MockISimpleTokenManager)(nil).TransferFrom), ctx, sender, recipient, amount)
}

// FilterApproval mocks base method
func (m *MockISimpleTokenManager) FilterApproval(opts *bind.FilterOpts, owner, spender []common.Address) (*adapter.SimpleTokenApprovalIterator, error) {
	ret := m.ctrl.Call(m, "FilterApproval", opts, owner, spender)
	ret0, _ := ret[0].(*adapter.SimpleTokenApprovalIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterApproval indicates an expected call of FilterApproval
func (mr *MockISimpleTokenManagerMockRecorder) FilterApproval(opts, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterApproval", reflect.TypeOf((*MockISimpleTokenManager)(nil).FilterApproval), opts, owner, spender)
}

// FilterMinterAdded mocks base method
func (m *MockISimpleTokenManager) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterAddedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterAdded", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterAddedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterAdded indicates an expected call of FilterMinterAdded
func (mr *MockISimpleTokenManagerMockRecorder) FilterMinterAdded(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterAdded", reflect.TypeOf((*MockISimpleTokenManager)(nil).FilterMinterAdded), opts, account)
}

// FilterMinterRemoved mocks base method
func (m *MockISimpleTokenManager) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterRemovedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterRemoved", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterRemovedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterRemoved indicates an expected call of FilterMinterRemoved
func (mr *MockISimpleTokenManagerMockRecorder) FilterMinterRemoved(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterRemoved", reflect.TypeOf((*MockISimpleTokenManager)(nil).FilterMinterRemoved), opts, account)
}

// FilterTransfer mocks base method
func (m *MockISimpleTokenManager) FilterTransfer(opts *bind.FilterOpts, from, to []common.Address) (*adapter.SimpleTokenTransferIterator, error) {
	ret := m.ctrl.Call(m, "FilterTransfer", opts, from, to)
	ret0, _ := ret[0].(*adapter.SimpleTokenTransferIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTransfer indicates an expected call of FilterTransfer
func (mr *MockISimpleTokenManagerMockRecorder) FilterTransfer(opts, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTransfer", reflect.TypeOf((*MockISimpleTokenManager)(nil).FilterTransfer), opts, from, to)
}

// WatchApproval mocks base method
func (m *MockISimpleTokenManager) WatchApproval(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenApproval, owner, spender []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchApproval", opts, sink, owner, spender)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApproval indicates an expected call of WatchApproval
func (mr *MockISimpleTokenManagerMockRecorder) WatchApproval(opts, sink, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApproval", reflect.TypeOf((*MockISimpleTokenManager)(nil).WatchApproval), opts, sink, owner, spender)
}

// WatchMinterAdded mocks base method
func (m *MockISimpleTokenManager) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterAdded, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterAdded", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterAdded indicates an expected call of WatchMinterAdded
func (mr *MockISimpleTokenManagerMockRecorder) WatchMinterAdded(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterAdded", reflect.TypeOf((*MockISimpleTokenManager)(nil).WatchMinterAdded), opts, sink, account)
}

// WatchMinterRemoved mocks base method
func (m *MockISimpleTokenManager) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterRemoved, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterRemoved", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterRemoved indicates an expected call of WatchMinterRemoved
func (mr *MockISimpleTokenManagerMockRecorder) WatchMinterRemoved(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterRemoved", reflect.TypeOf((*MockISimpleTokenManager)(nil).WatchMinterRemoved), opts, sink, account)
}

// WatchTransfer mocks base method
func (m *MockISimpleTokenManager) WatchTransfer(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenTransfer, from, to []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTransfer", opts, sink, from, to)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransfer indicates an expected call of WatchTransfer
func (mr *MockISimpleTokenManagerMockRecorder) WatchTransfer(opts, sink, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransfer", reflect.TypeOf((*MockISimpleTokenManager)(nil).WatchTransfer), opts, sink, from, to)
}

// MockISimpleTokenCalls is a mock of ISimpleTokenCalls interface
type MockISimpleTokenCalls struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenCallsMockRecorder
}

// MockISimpleTokenCallsMockRecorder is the mock recorder for MockISimpleTokenCalls
type MockISimpleTokenCallsMockRecorder struct {
	mock *MockISimpleTokenCalls
}

// NewMockISimpleTokenCalls creates a new mock instance
func NewMockISimpleTokenCalls(ctrl *gomock.Controller) *MockISimpleTokenCalls {
	mock := &MockISimpleTokenCalls{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenCalls) EXPECT() *MockISimpleTokenCallsMockRecorder {
	return m.recorder
}

// Allowance mocks base method
func (m *MockISimpleTokenCalls) Allowance(owner, spender common.Address) (*big.Int, error) {
	ret := m.ctrl.Call(m, "Allowance", owner, spender)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allowance indicates an expected call of Allowance
func (mr *MockISimpleTokenCallsMockRecorder) Allowance(owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowance", reflect.TypeOf((*MockISimpleTokenCalls)(nil).Allowance), owner, spender)
}

// BalanceOf mocks base method
func (m *MockISimpleTokenCalls) BalanceOf(account common.Address) (*big.Int, error) {
	ret := m.ctrl.Call(m, "BalanceOf", account)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf
func (mr *MockISimpleTokenCallsMockRecorder) BalanceOf(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockISimpleTokenCalls)(nil).BalanceOf), account)
}

// IsMinter mocks base method
func (m *MockISimpleTokenCalls) IsMinter(account common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsMinter", account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMinter indicates an expected call of IsMinter
func (mr *MockISimpleTokenCallsMockRecorder) IsMinter(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMinter", reflect.TypeOf((*MockISimpleTokenCalls)(nil).IsMinter), account)
}

// TotalSupply mocks base method
func (m *MockISimpleTokenCalls) TotalSupply() (*big.Int, error) {
	ret := m.ctrl.Call(m, "TotalSupply")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply
func (mr *MockISimpleTokenCallsMockRecorder) TotalSupply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockISimpleTokenCalls)(nil).TotalSupply))
}

// MockISimpleTokenTransacts is a mock of ISimpleTokenTransacts interface
type MockISimpleTokenTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenTransactsMockRecorder
}

// MockISimpleTokenTransactsMockRecorder is the mock recorder for MockISimpleTokenTransacts
type MockISimpleTokenTransactsMockRecorder struct {
	mock *MockISimpleTokenTransacts
}

// NewMockISimpleTokenTransacts creates a new mock instance
func NewMockISimpleTokenTransacts(ctrl *gomock.Controller) *MockISimpleTokenTransacts {
	mock := &MockISimpleTokenTransacts{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenTransacts) EXPECT() *MockISimpleTokenTransactsMockRecorder {
	return m.recorder
}

// AddMinter mocks base method
func (m *MockISimpleTokenTransacts) AddMinter(ctx context.Context, account common.Address) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "AddMinter", ctx, account)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMinter indicates an expected call of AddMinter
func (mr *MockISimpleTokenTransactsMockRecorder) AddMinter(ctx, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMinter", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).AddMinter), ctx, account)
}

// Approve mocks base method
func (m *MockISimpleTokenTransacts) Approve(ctx context.Context, spender common.Address, value *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "Approve", ctx, spender, value)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Approve indicates an expected call of Approve
func (mr *MockISimpleTokenTransactsMockRecorder) Approve(ctx, spender, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).Approve), ctx, spender, value)
}

// DecreaseAllowance mocks base method
func (m *MockISimpleTokenTransacts) DecreaseAllowance(ctx context.Context, spender common.Address, subtractedValue *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "DecreaseAllowance", ctx, spender, subtractedValue)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseAllowance indicates an expected call of DecreaseAllowance
func (mr *MockISimpleTokenTransactsMockRecorder) DecreaseAllowance(ctx, spender, subtractedValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseAllowance", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).DecreaseAllowance), ctx, spender, subtractedValue)
}

// IncreaseAllowance mocks base method
func (m *MockISimpleTokenTransacts) IncreaseAllowance(ctx context.Context, spender common.Address, addedValue *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "IncreaseAllowance", ctx, spender, addedValue)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseAllowance indicates an expected call of IncreaseAllowance
func (mr *MockISimpleTokenTransactsMockRecorder) IncreaseAllowance(ctx, spender, addedValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseAllowance", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).IncreaseAllowance), ctx, spender, addedValue)
}

// Mint mocks base method
func (m *MockISimpleTokenTransacts) Mint(ctx context.Context, account common.Address, amount *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "Mint", ctx, account, amount)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mint indicates an expected call of Mint
func (mr *MockISimpleTokenTransactsMockRecorder) Mint(ctx, account, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).Mint), ctx, account, amount)
}

// RenounceMinter mocks base method
func (m *MockISimpleTokenTransacts) RenounceMinter(ctx context.Context) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "RenounceMinter", ctx)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenounceMinter indicates an expected call of RenounceMinter
func (mr *MockISimpleTokenTransactsMockRecorder) RenounceMinter(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenounceMinter", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).RenounceMinter), ctx)
}

// Transfer mocks base method
func (m *MockISimpleTokenTransacts) Transfer(ctx context.Context, recipient common.Address, amount *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "Transfer", ctx, recipient, amount)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockISimpleTokenTransactsMockRecorder) Transfer(ctx, recipient, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).Transfer), ctx, recipient, amount)
}

// TransferFrom mocks base method
func (m *MockISimpleTokenTransacts) TransferFrom(ctx context.Context, sender, recipient common.Address, amount *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "TransferFrom", ctx, sender, recipient, amount)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferFrom indicates an expected call of TransferFrom
func (mr *MockISimpleTokenTransactsMockRecorder) TransferFrom(ctx, sender, recipient, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferFrom", reflect.TypeOf((*MockISimpleTokenTransacts)(nil).TransferFrom), ctx, sender, recipient, amount)
}

// MockISimpleTokenEvents is a mock of ISimpleTokenEvents interface
type MockISimpleTokenEvents struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenEventsMockRecorder
}

// MockISimpleTokenEventsMockRecorder is the mock recorder for MockISimpleTokenEvents
type MockISimpleTokenEventsMockRecorder struct {
	mock *MockISimpleTokenEvents
}

// NewMockISimpleTokenEvents creates a new mock instance
func NewMockISimpleTokenEvents(ctrl *gomock.Controller) *MockISimpleTokenEvents {
	mock := &MockISimpleTokenEvents{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenEvents) EXPECT() *MockISimpleTokenEventsMockRecorder {
	return m.recorder
}

// FilterApproval mocks base method
func (m *MockISimpleTokenEvents) FilterApproval(opts *bind.FilterOpts, owner, spender []common.Address) (*adapter.SimpleTokenApprovalIterator, error) {
	ret := m.ctrl.Call(m, "FilterApproval", opts, owner, spender)
	ret0, _ := ret[0].(*adapter.SimpleTokenApprovalIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterApproval indicates an expected call of FilterApproval
func (mr *MockISimpleTokenEventsMockRecorder) FilterApproval(opts, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterApproval", reflect.TypeOf((*MockISimpleTokenEvents)(nil).FilterApproval), opts, owner, spender)
}

// FilterMinterAdded mocks base method
func (m *MockISimpleTokenEvents) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterAddedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterAdded", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterAddedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterAdded indicates an expected call of FilterMinterAdded
func (mr *MockISimpleTokenEventsMockRecorder) FilterMinterAdded(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterAdded", reflect.TypeOf((*MockISimpleTokenEvents)(nil).FilterMinterAdded), opts, account)
}

// FilterMinterRemoved mocks base method
func (m *MockISimpleTokenEvents) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterRemovedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterRemoved", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterRemovedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterRemoved indicates an expected call of FilterMinterRemoved
func (mr *MockISimpleTokenEventsMockRecorder) FilterMinterRemoved(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterRemoved", reflect.TypeOf((*MockISimpleTokenEvents)(nil).FilterMinterRemoved), opts, account)
}

// FilterTransfer mocks base method
func (m *MockISimpleTokenEvents) FilterTransfer(opts *bind.FilterOpts, from, to []common.Address) (*adapter.SimpleTokenTransferIterator, error) {
	ret := m.ctrl.Call(m, "FilterTransfer", opts, from, to)
	ret0, _ := ret[0].(*adapter.SimpleTokenTransferIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTransfer indicates an expected call of FilterTransfer
func (mr *MockISimpleTokenEventsMockRecorder) FilterTransfer(opts, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTransfer", reflect.TypeOf((*MockISimpleTokenEvents)(nil).FilterTransfer), opts, from, to)
}

// ParseApprovalFromReceipt mocks base method
func (m *MockISimpleTokenEvents) ParseApprovalFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenApproval, error) {
	ret := m.ctrl.Call(m, "ParseApprovalFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenApproval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseApprovalFromReceipt indicates an expected call of ParseApprovalFromReceipt
func (mr *MockISimpleTokenEventsMockRecorder) ParseApprovalFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseApprovalFromReceipt", reflect.TypeOf((*MockISimpleTokenEvents)(nil).ParseApprovalFromReceipt), receipt)
}

// ParseMinterAddedFromReceipt mocks base method
func (m *MockISimpleTokenEvents) ParseMinterAddedFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenMinterAdded, error) {
	ret := m.ctrl.Call(m, "ParseMinterAddedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterAdded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMinterAddedFromReceipt indicates an expected call of ParseMinterAddedFromReceipt
func (mr *MockISimpleTokenEventsMockRecorder) ParseMinterAddedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMinterAddedFromReceipt", reflect.TypeOf((*MockISimpleTokenEvents)(nil).ParseMinterAddedFromReceipt), receipt)
}

// ParseMinterRemovedFromReceipt mocks base method
func (m *MockISimpleTokenEvents) ParseMinterRemovedFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenMinterRemoved, error) {
	ret := m.ctrl.Call(m, "ParseMinterRemovedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterRemoved)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMinterRemovedFromReceipt indicates an expected call of ParseMinterRemovedFromReceipt
func (mr *MockISimpleTokenEventsMockRecorder) ParseMinterRemovedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMinterRemovedFromReceipt", reflect.TypeOf((*MockISimpleTokenEvents)(nil).ParseMinterRemovedFromReceipt), receipt)
}

// ParseTransferFromReceipt mocks base method
func (m *MockISimpleTokenEvents) ParseTransferFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenTransfer, error) {
	ret := m.ctrl.Call(m, "ParseTransferFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTransferFromReceipt indicates an expected call of ParseTransferFromReceipt
func (mr *MockISimpleTokenEventsMockRecorder) ParseTransferFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTransferFromReceipt", reflect.TypeOf((*MockISimpleTokenEvents)(nil).ParseTransferFromReceipt), receipt)
}

// WatchApproval mocks base method
func (m *MockISimpleTokenEvents) WatchApproval(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenApproval, owner, spender []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchApproval", opts, sink, owner, spender)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApproval indicates an expected call of WatchApproval
func (mr *MockISimpleTokenEventsMockRecorder) WatchApproval(opts, sink, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApproval", reflect.TypeOf((*MockISimpleTokenEvents)(nil).WatchApproval), opts, sink, owner, spender)
}

// WatchMinterAdded mocks base method
func (m *MockISimpleTokenEvents) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterAdded, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterAdded", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterAdded indicates an expected call of WatchMinterAdded
func (mr *MockISimpleTokenEventsMockRecorder) WatchMinterAdded(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterAdded", reflect.TypeOf((*MockISimpleTokenEvents)(nil).WatchMinterAdded), opts, sink, account)
}

// WatchMinterRemoved mocks base method
func (m *MockISimpleTokenEvents) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterRemoved, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterRemoved", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterRemoved indicates an expected call of WatchMinterRemoved
func (mr *MockISimpleTokenEventsMockRecorder) WatchMinterRemoved(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterRemoved", reflect.TypeOf((*MockISimpleTokenEvents)(nil).WatchMinterRemoved), opts, sink, account)
}

// WatchTransfer mocks base method
func (m *MockISimpleTokenEvents) WatchTransfer(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenTransfer, from, to []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTransfer", opts, sink, from, to)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransfer indicates an expected call of WatchTransfer
func (mr *MockISimpleTokenEventsMockRecorder) WatchTransfer(opts, sink, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransfer", reflect.TypeOf((*MockISimpleTokenEvents)(nil).WatchTransfer), opts, sink, from, to)
}

// MockISimpleTokenFilterer is a mock of ISimpleTokenFilterer interface
type MockISimpleTokenFilterer struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenFiltererMockRecorder
}

// MockISimpleTokenFiltererMockRecorder is the mock recorder for MockISimpleTokenFilterer
type MockISimpleTokenFiltererMockRecorder struct {
	mock *MockISimpleTokenFilterer
}

// NewMockISimpleTokenFilterer creates a new mock instance
func NewMockISimpleTokenFilterer(ctrl *gomock.Controller) *MockISimpleTokenFilterer {
	mock := &MockISimpleTokenFilterer{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenFiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenFilterer) EXPECT() *MockISimpleTokenFiltererMockRecorder {
	return m.recorder
}

// FilterApproval mocks base method
func (m *MockISimpleTokenFilterer) FilterApproval(opts *bind.FilterOpts, owner, spender []common.Address) (*adapter.SimpleTokenApprovalIterator, error) {
	ret := m.ctrl.Call(m, "FilterApproval", opts, owner, spender)
	ret0, _ := ret[0].(*adapter.SimpleTokenApprovalIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterApproval indicates an expected call of FilterApproval
func (mr *MockISimpleTokenFiltererMockRecorder) FilterApproval(opts, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterApproval", reflect.TypeOf((*MockISimpleTokenFilterer)(nil).FilterApproval), opts, owner, spender)
}

// FilterMinterAdded mocks base method
func (m *MockISimpleTokenFilterer) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterAddedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterAdded", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterAddedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterAdded indicates an expected call of FilterMinterAdded
func (mr *MockISimpleTokenFiltererMockRecorder) FilterMinterAdded(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterAdded", reflect.TypeOf((*MockISimpleTokenFilterer)(nil).FilterMinterAdded), opts, account)
}

// FilterMinterRemoved mocks base method
func (m *MockISimpleTokenFilterer) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterRemovedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterRemoved", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterRemovedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterRemoved indicates an expected call of FilterMinterRemoved
func (mr *MockISimpleTokenFiltererMockRecorder) FilterMinterRemoved(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterRemoved", reflect.TypeOf((*MockISimpleTokenFilterer)(nil).FilterMinterRemoved), opts, account)
}

// FilterTransfer mocks base method
func (m *MockISimpleTokenFilterer) FilterTransfer(opts *bind.FilterOpts, from, to []common.Address) (*adapter.SimpleTokenTransferIterator, error) {
	ret := m.ctrl.Call(m, "FilterTransfer", opts, from, to)
	ret0, _ := ret[0].(*adapter.SimpleTokenTransferIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTransfer indicates an expected call of FilterTransfer
func (mr *MockISimpleTokenFiltererMockRecorder) FilterTransfer(opts, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTransfer", reflect.TypeOf((*MockISimpleTokenFilterer)(nil).FilterTransfer), opts, from, to)
}

// MockISimpleTokenParser is a mock of ISimpleTokenParser interface
type MockISimpleTokenParser struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenParserMockRecorder
}

// MockISimpleTokenParserMockRecorder is the mock recorder for MockISimpleTokenParser
type MockISimpleTokenParserMockRecorder struct {
	mock *MockISimpleTokenParser
}

// NewMockISimpleTokenParser creates a new mock instance
func NewMockISimpleTokenParser(ctrl *gomock.Controller) *MockISimpleTokenParser {
	mock := &MockISimpleTokenParser{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenParser) EXPECT() *MockISimpleTokenParserMockRecorder {
	return m.recorder
}

// ParseApprovalFromReceipt mocks base method
func (m *MockISimpleTokenParser) ParseApprovalFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenApproval, error) {
	ret := m.ctrl.Call(m, "ParseApprovalFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenApproval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseApprovalFromReceipt indicates an expected call of ParseApprovalFromReceipt
func (mr *MockISimpleTokenParserMockRecorder) ParseApprovalFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseApprovalFromReceipt", reflect.TypeOf((*MockISimpleTokenParser)(nil).ParseApprovalFromReceipt), receipt)
}

// ParseMinterAddedFromReceipt mocks base method
func (m *MockISimpleTokenParser) ParseMinterAddedFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenMinterAdded, error) {
	ret := m.ctrl.Call(m, "ParseMinterAddedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterAdded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMinterAddedFromReceipt indicates an expected call of ParseMinterAddedFromReceipt
func (mr *MockISimpleTokenParserMockRecorder) ParseMinterAddedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMinterAddedFromReceipt", reflect.TypeOf((*MockISimpleTokenParser)(nil).ParseMinterAddedFromReceipt), receipt)
}

// ParseMinterRemovedFromReceipt mocks base method
func (m *MockISimpleTokenParser) ParseMinterRemovedFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenMinterRemoved, error) {
	ret := m.ctrl.Call(m, "ParseMinterRemovedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterRemoved)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMinterRemovedFromReceipt indicates an expected call of ParseMinterRemovedFromReceipt
func (mr *MockISimpleTokenParserMockRecorder) ParseMinterRemovedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMinterRemovedFromReceipt", reflect.TypeOf((*MockISimpleTokenParser)(nil).ParseMinterRemovedFromReceipt), receipt)
}

// ParseTransferFromReceipt mocks base method
func (m *MockISimpleTokenParser) ParseTransferFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenTransfer, error) {
	ret := m.ctrl.Call(m, "ParseTransferFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTransferFromReceipt indicates an expected call of ParseTransferFromReceipt
func (mr *MockISimpleTokenParserMockRecorder) ParseTransferFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTransferFromReceipt", reflect.TypeOf((*MockISimpleTokenParser)(nil).ParseTransferFromReceipt), receipt)
}

// MockISimpleTokenWatcher is a mock of ISimpleTokenWatcher interface
type MockISimpleTokenWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenWatcherMockRecorder
}

// MockISimpleTokenWatcherMockRecorder is the mock recorder for MockISimpleTokenWatcher
type MockISimpleTokenWatcherMockRecorder struct {
	mock *MockISimpleTokenWatcher
}

// NewMockISimpleTokenWatcher creates a new mock instance
func NewMockISimpleTokenWatcher(ctrl *gomock.Controller) *MockISimpleTokenWatcher {
	mock := &MockISimpleTokenWatcher{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenWatcher) EXPECT() *MockISimpleTokenWatcherMockRecorder {
	return m.recorder
}

// WatchApproval mocks base method
func (m *MockISimpleTokenWatcher) WatchApproval(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenApproval, owner, spender []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchApproval", opts, sink, owner, spender)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApproval indicates an expected call of WatchApproval
func (mr *MockISimpleTokenWatcherMockRecorder) WatchApproval(opts, sink, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApproval", reflect.TypeOf((*MockISimpleTokenWatcher)(nil).WatchApproval), opts, sink, owner, spender)
}

// WatchMinterAdded mocks base method
func (m *MockISimpleTokenWatcher) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterAdded, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterAdded", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterAdded indicates an expected call of WatchMinterAdded
func (mr *MockISimpleTokenWatcherMockRecorder) WatchMinterAdded(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterAdded", reflect.TypeOf((*MockISimpleTokenWatcher)(nil).WatchMinterAdded), opts, sink, account)
}

// WatchMinterRemoved mocks base method
func (m *MockISimpleTokenWatcher) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterRemoved, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterRemoved", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterRemoved indicates an expected call of WatchMinterRemoved
func (mr *MockISimpleTokenWatcherMockRecorder) WatchMinterRemoved(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterRemoved", reflect.TypeOf((*MockISimpleTokenWatcher)(nil).WatchMinterRemoved), opts, sink, account)
}

// WatchTransfer mocks base method
func (m *MockISimpleTokenWatcher) WatchTransfer(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenTransfer, from, to []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTransfer", opts, sink, from, to)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransfer indicates an expected call of WatchTransfer
func (mr *MockISimpleTokenWatcherMockRecorder) WatchTransfer(opts, sink, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransfer", reflect.TypeOf((*MockISimpleTokenWatcher)(nil).WatchTransfer), opts, sink, from, to)
}

// MockISimpleTokenContract is a mock of ISimpleTokenContract interface
type MockISimpleTokenContract struct {
	ctrl     *gomock.Controller
	recorder *MockISimpleTokenContractMockRecorder
}

// MockISimpleTokenContractMockRecorder is the mock recorder for MockISimpleTokenContract
type MockISimpleTokenContractMockRecorder struct {
	mock *MockISimpleTokenContract
}

// NewMockISimpleTokenContract creates a new mock instance
func NewMockISimpleTokenContract(ctrl *gomock.Controller) *MockISimpleTokenContract {
	mock := &MockISimpleTokenContract{ctrl: ctrl}
	mock.recorder = &MockISimpleTokenContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockISimpleTokenContract) EXPECT() *MockISimpleTokenContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockISimpleTokenContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockISimpleTokenContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockISimpleTokenContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockISimpleTokenContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockISimpleTokenContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockISimpleTokenContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockISimpleTokenContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockISimpleTokenContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockISimpleTokenContract)(nil).CreatedAt))
}

// Allowance mocks base method
func (m *MockISimpleTokenContract) Allowance(owner, spender common.Address) (*big.Int, error) {
	ret := m.ctrl.Call(m, "Allowance", owner, spender)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Allowance indicates an expected call of Allowance
func (mr *MockISimpleTokenContractMockRecorder) Allowance(owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Allowance", reflect.TypeOf((*MockISimpleTokenContract)(nil).Allowance), owner, spender)
}

// BalanceOf mocks base method
func (m *MockISimpleTokenContract) BalanceOf(account common.Address) (*big.Int, error) {
	ret := m.ctrl.Call(m, "BalanceOf", account)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceOf indicates an expected call of BalanceOf
func (mr *MockISimpleTokenContractMockRecorder) BalanceOf(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceOf", reflect.TypeOf((*MockISimpleTokenContract)(nil).BalanceOf), account)
}

// IsMinter mocks base method
func (m *MockISimpleTokenContract) IsMinter(account common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsMinter", account)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsMinter indicates an expected call of IsMinter
func (mr *MockISimpleTokenContractMockRecorder) IsMinter(account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsMinter", reflect.TypeOf((*MockISimpleTokenContract)(nil).IsMinter), account)
}

// TotalSupply mocks base method
func (m *MockISimpleTokenContract) TotalSupply() (*big.Int, error) {
	ret := m.ctrl.Call(m, "TotalSupply")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSupply indicates an expected call of TotalSupply
func (mr *MockISimpleTokenContractMockRecorder) TotalSupply() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSupply", reflect.TypeOf((*MockISimpleTokenContract)(nil).TotalSupply))
}

// AddMinter mocks base method
func (m *MockISimpleTokenContract) AddMinter(ctx context.Context, account common.Address) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "AddMinter", ctx, account)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddMinter indicates an expected call of AddMinter
func (mr *MockISimpleTokenContractMockRecorder) AddMinter(ctx, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddMinter", reflect.TypeOf((*MockISimpleTokenContract)(nil).AddMinter), ctx, account)
}

// Approve mocks base method
func (m *MockISimpleTokenContract) Approve(ctx context.Context, spender common.Address, value *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "Approve", ctx, spender, value)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Approve indicates an expected call of Approve
func (mr *MockISimpleTokenContractMockRecorder) Approve(ctx, spender, value interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Approve", reflect.TypeOf((*MockISimpleTokenContract)(nil).Approve), ctx, spender, value)
}

// DecreaseAllowance mocks base method
func (m *MockISimpleTokenContract) DecreaseAllowance(ctx context.Context, spender common.Address, subtractedValue *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "DecreaseAllowance", ctx, spender, subtractedValue)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecreaseAllowance indicates an expected call of DecreaseAllowance
func (mr *MockISimpleTokenContractMockRecorder) DecreaseAllowance(ctx, spender, subtractedValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecreaseAllowance", reflect.TypeOf((*MockISimpleTokenContract)(nil).DecreaseAllowance), ctx, spender, subtractedValue)
}

// IncreaseAllowance mocks base method
func (m *MockISimpleTokenContract) IncreaseAllowance(ctx context.Context, spender common.Address, addedValue *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "IncreaseAllowance", ctx, spender, addedValue)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IncreaseAllowance indicates an expected call of IncreaseAllowance
func (mr *MockISimpleTokenContractMockRecorder) IncreaseAllowance(ctx, spender, addedValue interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseAllowance", reflect.TypeOf((*MockISimpleTokenContract)(nil).IncreaseAllowance), ctx, spender, addedValue)
}

// Mint mocks base method
func (m *MockISimpleTokenContract) Mint(ctx context.Context, account common.Address, amount *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "Mint", ctx, account, amount)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Mint indicates an expected call of Mint
func (mr *MockISimpleTokenContractMockRecorder) Mint(ctx, account, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mint", reflect.TypeOf((*MockISimpleTokenContract)(nil).Mint), ctx, account, amount)
}

// RenounceMinter mocks base method
func (m *MockISimpleTokenContract) RenounceMinter(ctx context.Context) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "RenounceMinter", ctx)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenounceMinter indicates an expected call of RenounceMinter
func (mr *MockISimpleTokenContractMockRecorder) RenounceMinter(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenounceMinter", reflect.TypeOf((*MockISimpleTokenContract)(nil).RenounceMinter), ctx)
}

// Transfer mocks base method
func (m *MockISimpleTokenContract) Transfer(ctx context.Context, recipient common.Address, amount *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "Transfer", ctx, recipient, amount)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Transfer indicates an expected call of Transfer
func (mr *MockISimpleTokenContractMockRecorder) Transfer(ctx, recipient, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Transfer", reflect.TypeOf((*MockISimpleTokenContract)(nil).Transfer), ctx, recipient, amount)
}

// TransferFrom mocks base method
func (m *MockISimpleTokenContract) TransferFrom(ctx context.Context, sender, recipient common.Address, amount *big.Int) (*types.Receipt, error) {
	ret := m.ctrl.Call(m, "TransferFrom", ctx, sender, recipient, amount)
	ret0, _ := ret[0].(*types.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferFrom indicates an expected call of TransferFrom
func (mr *MockISimpleTokenContractMockRecorder) TransferFrom(ctx, sender, recipient, amount interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferFrom", reflect.TypeOf((*MockISimpleTokenContract)(nil).TransferFrom), ctx, sender, recipient, amount)
}

// FilterApproval mocks base method
func (m *MockISimpleTokenContract) FilterApproval(opts *bind.FilterOpts, owner, spender []common.Address) (*adapter.SimpleTokenApprovalIterator, error) {
	ret := m.ctrl.Call(m, "FilterApproval", opts, owner, spender)
	ret0, _ := ret[0].(*adapter.SimpleTokenApprovalIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterApproval indicates an expected call of FilterApproval
func (mr *MockISimpleTokenContractMockRecorder) FilterApproval(opts, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterApproval", reflect.TypeOf((*MockISimpleTokenContract)(nil).FilterApproval), opts, owner, spender)
}

// FilterMinterAdded mocks base method
func (m *MockISimpleTokenContract) FilterMinterAdded(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterAddedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterAdded", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterAddedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterAdded indicates an expected call of FilterMinterAdded
func (mr *MockISimpleTokenContractMockRecorder) FilterMinterAdded(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterAdded", reflect.TypeOf((*MockISimpleTokenContract)(nil).FilterMinterAdded), opts, account)
}

// FilterMinterRemoved mocks base method
func (m *MockISimpleTokenContract) FilterMinterRemoved(opts *bind.FilterOpts, account []common.Address) (*adapter.SimpleTokenMinterRemovedIterator, error) {
	ret := m.ctrl.Call(m, "FilterMinterRemoved", opts, account)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterRemovedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterMinterRemoved indicates an expected call of FilterMinterRemoved
func (mr *MockISimpleTokenContractMockRecorder) FilterMinterRemoved(opts, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterMinterRemoved", reflect.TypeOf((*MockISimpleTokenContract)(nil).FilterMinterRemoved), opts, account)
}

// FilterTransfer mocks base method
func (m *MockISimpleTokenContract) FilterTransfer(opts *bind.FilterOpts, from, to []common.Address) (*adapter.SimpleTokenTransferIterator, error) {
	ret := m.ctrl.Call(m, "FilterTransfer", opts, from, to)
	ret0, _ := ret[0].(*adapter.SimpleTokenTransferIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTransfer indicates an expected call of FilterTransfer
func (mr *MockISimpleTokenContractMockRecorder) FilterTransfer(opts, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTransfer", reflect.TypeOf((*MockISimpleTokenContract)(nil).FilterTransfer), opts, from, to)
}

// ParseApprovalFromReceipt mocks base method
func (m *MockISimpleTokenContract) ParseApprovalFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenApproval, error) {
	ret := m.ctrl.Call(m, "ParseApprovalFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenApproval)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseApprovalFromReceipt indicates an expected call of ParseApprovalFromReceipt
func (mr *MockISimpleTokenContractMockRecorder) ParseApprovalFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseApprovalFromReceipt", reflect.TypeOf((*MockISimpleTokenContract)(nil).ParseApprovalFromReceipt), receipt)
}

// ParseMinterAddedFromReceipt mocks base method
func (m *MockISimpleTokenContract) ParseMinterAddedFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenMinterAdded, error) {
	ret := m.ctrl.Call(m, "ParseMinterAddedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterAdded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMinterAddedFromReceipt indicates an expected call of ParseMinterAddedFromReceipt
func (mr *MockISimpleTokenContractMockRecorder) ParseMinterAddedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMinterAddedFromReceipt", reflect.TypeOf((*MockISimpleTokenContract)(nil).ParseMinterAddedFromReceipt), receipt)
}

// ParseMinterRemovedFromReceipt mocks base method
func (m *MockISimpleTokenContract) ParseMinterRemovedFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenMinterRemoved, error) {
	ret := m.ctrl.Call(m, "ParseMinterRemovedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenMinterRemoved)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMinterRemovedFromReceipt indicates an expected call of ParseMinterRemovedFromReceipt
func (mr *MockISimpleTokenContractMockRecorder) ParseMinterRemovedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMinterRemovedFromReceipt", reflect.TypeOf((*MockISimpleTokenContract)(nil).ParseMinterRemovedFromReceipt), receipt)
}

// ParseTransferFromReceipt mocks base method
func (m *MockISimpleTokenContract) ParseTransferFromReceipt(receipt *types.Receipt) (*adapter.SimpleTokenTransfer, error) {
	ret := m.ctrl.Call(m, "ParseTransferFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.SimpleTokenTransfer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTransferFromReceipt indicates an expected call of ParseTransferFromReceipt
func (mr *MockISimpleTokenContractMockRecorder) ParseTransferFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTransferFromReceipt", reflect.TypeOf((*MockISimpleTokenContract)(nil).ParseTransferFromReceipt), receipt)
}

// WatchApproval mocks base method
func (m *MockISimpleTokenContract) WatchApproval(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenApproval, owner, spender []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchApproval", opts, sink, owner, spender)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchApproval indicates an expected call of WatchApproval
func (mr *MockISimpleTokenContractMockRecorder) WatchApproval(opts, sink, owner, spender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchApproval", reflect.TypeOf((*MockISimpleTokenContract)(nil).WatchApproval), opts, sink, owner, spender)
}

// WatchMinterAdded mocks base method
func (m *MockISimpleTokenContract) WatchMinterAdded(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterAdded, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterAdded", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterAdded indicates an expected call of WatchMinterAdded
func (mr *MockISimpleTokenContractMockRecorder) WatchMinterAdded(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterAdded", reflect.TypeOf((*MockISimpleTokenContract)(nil).WatchMinterAdded), opts, sink, account)
}

// WatchMinterRemoved mocks base method
func (m *MockISimpleTokenContract) WatchMinterRemoved(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenMinterRemoved, account []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchMinterRemoved", opts, sink, account)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchMinterRemoved indicates an expected call of WatchMinterRemoved
func (mr *MockISimpleTokenContractMockRecorder) WatchMinterRemoved(opts, sink, account interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchMinterRemoved", reflect.TypeOf((*MockISimpleTokenContract)(nil).WatchMinterRemoved), opts, sink, account)
}

// WatchTransfer mocks base method
func (m *MockISimpleTokenContract) WatchTransfer(opts *bind.WatchOpts, sink chan<- *adapter.SimpleTokenTransfer, from, to []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTransfer", opts, sink, from, to)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTransfer indicates an expected call of WatchTransfer
func (mr *MockISimpleTokenContractMockRecorder) WatchTransfer(opts, sink, from, to interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTransfer", reflect.TypeOf((*MockISimpleTokenContract)(nil).WatchTransfer), opts, sink, from, to)
}
