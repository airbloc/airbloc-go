// Code generated by MockGen. DO NOT EDIT.
// Source: data_type_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/shared/adapter"
	contracts "github.com/airbloc/airbloc-go/shared/adapter/contracts"
	types "github.com/airbloc/airbloc-go/shared/adapter/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIDataTypeRegistryManager is a mock of IDataTypeRegistryManager interface
type MockIDataTypeRegistryManager struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryManagerMockRecorder
}

// MockIDataTypeRegistryManagerMockRecorder is the mock recorder for MockIDataTypeRegistryManager
type MockIDataTypeRegistryManagerMockRecorder struct {
	mock *MockIDataTypeRegistryManager
}

// NewMockIDataTypeRegistryManager creates a new mock instance
func NewMockIDataTypeRegistryManager(ctrl *gomock.Controller) *MockIDataTypeRegistryManager {
	mock := &MockIDataTypeRegistryManager{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryManager) EXPECT() *MockIDataTypeRegistryManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIDataTypeRegistryManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIDataTypeRegistryManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIDataTypeRegistryManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIDataTypeRegistryManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIDataTypeRegistryManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIDataTypeRegistryManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIDataTypeRegistryManager) Exists(name string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIDataTypeRegistryManagerMockRecorder) Exists(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).Exists), name)
}

// Get mocks base method
func (m *MockIDataTypeRegistryManager) Get(name string) (types.DataType, error) {
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(types.DataType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIDataTypeRegistryManagerMockRecorder) Get(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).Get), name)
}

// IsOwner mocks base method
func (m *MockIDataTypeRegistryManager) IsOwner(name string, owner common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner", name, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIDataTypeRegistryManagerMockRecorder) IsOwner(name, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).IsOwner), name, owner)
}

// Register mocks base method
func (m *MockIDataTypeRegistryManager) Register(ctx context.Context, opts *bind.TransactOpts, name string, schemaHash common.Hash) error {
	ret := m.ctrl.Call(m, "Register", ctx, opts, name, schemaHash)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockIDataTypeRegistryManagerMockRecorder) Register(ctx, opts, name, schemaHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).Register), ctx, opts, name, schemaHash)
}

// Unregister mocks base method
func (m *MockIDataTypeRegistryManager) Unregister(ctx context.Context, opts *bind.TransactOpts, name string) error {
	ret := m.ctrl.Call(m, "Unregister", ctx, opts, name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister
func (mr *MockIDataTypeRegistryManagerMockRecorder) Unregister(ctx, opts, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).Unregister), ctx, opts, name)
}

// FilterRegistration mocks base method
func (m *MockIDataTypeRegistryManager) FilterRegistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIDataTypeRegistryManagerMockRecorder) FilterRegistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).FilterRegistration), opts)
}

// FilterUnregistration mocks base method
func (m *MockIDataTypeRegistryManager) FilterUnregistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIDataTypeRegistryManagerMockRecorder) FilterUnregistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).FilterUnregistration), opts)
}

// WatchRegistration mocks base method
func (m *MockIDataTypeRegistryManager) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryRegistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIDataTypeRegistryManagerMockRecorder) WatchRegistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).WatchRegistration), opts, sink)
}

// WatchUnregistration mocks base method
func (m *MockIDataTypeRegistryManager) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryUnregistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIDataTypeRegistryManagerMockRecorder) WatchUnregistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIDataTypeRegistryManager)(nil).WatchUnregistration), opts, sink)
}
