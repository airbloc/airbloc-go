// Code generated by MockGen. DO NOT EDIT.
// Source: exchange.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/shared/adapter"
	contracts "github.com/airbloc/airbloc-go/shared/adapter/contracts"
	types "github.com/airbloc/airbloc-go/shared/adapter/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	types0 "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIExchangeCalls is a mock of IExchangeCalls interface
type MockIExchangeCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeCallsMockRecorder
}

// MockIExchangeCallsMockRecorder is the mock recorder for MockIExchangeCalls
type MockIExchangeCallsMockRecorder struct {
	mock *MockIExchangeCalls
}

// NewMockIExchangeCalls creates a new mock instance
func NewMockIExchangeCalls(ctrl *gomock.Controller) *MockIExchangeCalls {
	mock := &MockIExchangeCalls{ctrl: ctrl}
	mock.recorder = &MockIExchangeCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeCalls) EXPECT() *MockIExchangeCallsMockRecorder {
	return m.recorder
}

// GetOffer mocks base method
func (m *MockIExchangeCalls) GetOffer(offerId types.ID) (types.Offer, error) {
	ret := m.ctrl.Call(m, "GetOffer", offerId)
	ret0, _ := ret[0].(types.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffer indicates an expected call of GetOffer
func (mr *MockIExchangeCallsMockRecorder) GetOffer(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffer", reflect.TypeOf((*MockIExchangeCalls)(nil).GetOffer), offerId)
}

// GetOfferMembers mocks base method
func (m *MockIExchangeCalls) GetOfferMembers(offerId types.ID) (common.Address, common.Address, error) {
	ret := m.ctrl.Call(m, "GetOfferMembers", offerId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOfferMembers indicates an expected call of GetOfferMembers
func (mr *MockIExchangeCallsMockRecorder) GetOfferMembers(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferMembers", reflect.TypeOf((*MockIExchangeCalls)(nil).GetOfferMembers), offerId)
}

// OfferExists mocks base method
func (m *MockIExchangeCalls) OfferExists(offerId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "OfferExists", offerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferExists indicates an expected call of OfferExists
func (mr *MockIExchangeCallsMockRecorder) OfferExists(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferExists", reflect.TypeOf((*MockIExchangeCalls)(nil).OfferExists), offerId)
}

// MockIExchangeTransacts is a mock of IExchangeTransacts interface
type MockIExchangeTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeTransactsMockRecorder
}

// MockIExchangeTransactsMockRecorder is the mock recorder for MockIExchangeTransacts
type MockIExchangeTransactsMockRecorder struct {
	mock *MockIExchangeTransacts
}

// NewMockIExchangeTransacts creates a new mock instance
func NewMockIExchangeTransacts(ctrl *gomock.Controller) *MockIExchangeTransacts {
	mock := &MockIExchangeTransacts{ctrl: ctrl}
	mock.recorder = &MockIExchangeTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeTransacts) EXPECT() *MockIExchangeTransactsMockRecorder {
	return m.recorder
}

// AddDataIds mocks base method
func (m *MockIExchangeTransacts) AddDataIds(ctx context.Context, opts *bind.TransactOpts, offerId types.ID, dataIds []types.DataId) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "AddDataIds", ctx, opts, offerId, dataIds)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDataIds indicates an expected call of AddDataIds
func (mr *MockIExchangeTransactsMockRecorder) AddDataIds(ctx, opts, offerId, dataIds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDataIds", reflect.TypeOf((*MockIExchangeTransacts)(nil).AddDataIds), ctx, opts, offerId, dataIds)
}

// Cancel mocks base method
func (m *MockIExchangeTransacts) Cancel(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Cancel", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockIExchangeTransactsMockRecorder) Cancel(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockIExchangeTransacts)(nil).Cancel), ctx, opts, offerId)
}

// Order mocks base method
func (m *MockIExchangeTransacts) Order(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Order", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Order indicates an expected call of Order
func (mr *MockIExchangeTransactsMockRecorder) Order(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockIExchangeTransacts)(nil).Order), ctx, opts, offerId)
}

// Prepare mocks base method
func (m *MockIExchangeTransacts) Prepare(ctx context.Context, opts *bind.TransactOpts, provider string, consumer, escrow common.Address, escrowSign [4]byte, escrowArgs []byte, dataIds []types.DataId) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Prepare", ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockIExchangeTransactsMockRecorder) Prepare(ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockIExchangeTransacts)(nil).Prepare), ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds)
}

// Reject mocks base method
func (m *MockIExchangeTransacts) Reject(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Reject", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reject indicates an expected call of Reject
func (mr *MockIExchangeTransactsMockRecorder) Reject(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockIExchangeTransacts)(nil).Reject), ctx, opts, offerId)
}

// Settle mocks base method
func (m *MockIExchangeTransacts) Settle(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Settle", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Settle indicates an expected call of Settle
func (mr *MockIExchangeTransactsMockRecorder) Settle(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settle", reflect.TypeOf((*MockIExchangeTransacts)(nil).Settle), ctx, opts, offerId)
}

// MockIExchangeEvents is a mock of IExchangeEvents interface
type MockIExchangeEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeEventsMockRecorder
}

// MockIExchangeEventsMockRecorder is the mock recorder for MockIExchangeEvents
type MockIExchangeEventsMockRecorder struct {
	mock *MockIExchangeEvents
}

// NewMockIExchangeEvents creates a new mock instance
func NewMockIExchangeEvents(ctrl *gomock.Controller) *MockIExchangeEvents {
	mock := &MockIExchangeEvents{ctrl: ctrl}
	mock.recorder = &MockIExchangeEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeEvents) EXPECT() *MockIExchangeEventsMockRecorder {
	return m.recorder
}

// FilterEscrowExecutionFailed mocks base method
func (m *MockIExchangeEvents) FilterEscrowExecutionFailed(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterEscrowExecutionFailed", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEscrowExecutionFailed indicates an expected call of FilterEscrowExecutionFailed
func (mr *MockIExchangeEventsMockRecorder) FilterEscrowExecutionFailed(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeEvents)(nil).FilterEscrowExecutionFailed), opts)
}

// FilterOfferCanceled mocks base method
func (m *MockIExchangeEvents) FilterOfferCanceled(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferCanceled", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferCanceled indicates an expected call of FilterOfferCanceled
func (mr *MockIExchangeEventsMockRecorder) FilterOfferCanceled(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferCanceled", reflect.TypeOf((*MockIExchangeEvents)(nil).FilterOfferCanceled), opts, offerId)
}

// FilterOfferPrepared mocks base method
func (m *MockIExchangeEvents) FilterOfferPrepared(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPrepared", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPrepared indicates an expected call of FilterOfferPrepared
func (mr *MockIExchangeEventsMockRecorder) FilterOfferPrepared(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPrepared", reflect.TypeOf((*MockIExchangeEvents)(nil).FilterOfferPrepared), opts, offerId)
}

// FilterOfferPresented mocks base method
func (m *MockIExchangeEvents) FilterOfferPresented(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPresented", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPresented indicates an expected call of FilterOfferPresented
func (mr *MockIExchangeEventsMockRecorder) FilterOfferPresented(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPresented", reflect.TypeOf((*MockIExchangeEvents)(nil).FilterOfferPresented), opts, offerId)
}

// FilterOfferReceipt mocks base method
func (m *MockIExchangeEvents) FilterOfferReceipt(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferReceipt", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferReceipt indicates an expected call of FilterOfferReceipt
func (mr *MockIExchangeEventsMockRecorder) FilterOfferReceipt(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).FilterOfferReceipt), opts, offerId, consumer)
}

// FilterOfferRejected mocks base method
func (m *MockIExchangeEvents) FilterOfferRejected(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferRejected", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferRejected indicates an expected call of FilterOfferRejected
func (mr *MockIExchangeEventsMockRecorder) FilterOfferRejected(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferRejected", reflect.TypeOf((*MockIExchangeEvents)(nil).FilterOfferRejected), opts, offerId, consumer)
}

// FilterOfferSettled mocks base method
func (m *MockIExchangeEvents) FilterOfferSettled(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferSettled", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferSettled indicates an expected call of FilterOfferSettled
func (mr *MockIExchangeEventsMockRecorder) FilterOfferSettled(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferSettled", reflect.TypeOf((*MockIExchangeEvents)(nil).FilterOfferSettled), opts, offerId, consumer)
}

// ParseEscrowExecutionFailed mocks base method
func (m *MockIExchangeEvents) ParseEscrowExecutionFailed(log types0.Log) (*contracts.ExchangeEscrowExecutionFailed, error) {
	ret := m.ctrl.Call(m, "ParseEscrowExecutionFailed", log)
	ret0, _ := ret[0].(*contracts.ExchangeEscrowExecutionFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEscrowExecutionFailed indicates an expected call of ParseEscrowExecutionFailed
func (mr *MockIExchangeEventsMockRecorder) ParseEscrowExecutionFailed(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseEscrowExecutionFailed), log)
}

// ParseEscrowExecutionFailedFromReceipt mocks base method
func (m *MockIExchangeEvents) ParseEscrowExecutionFailedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeEscrowExecutionFailed, error) {
	ret := m.ctrl.Call(m, "ParseEscrowExecutionFailedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeEscrowExecutionFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEscrowExecutionFailedFromReceipt indicates an expected call of ParseEscrowExecutionFailedFromReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseEscrowExecutionFailedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEscrowExecutionFailedFromReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseEscrowExecutionFailedFromReceipt), receipt)
}

// ParseOfferCanceled mocks base method
func (m *MockIExchangeEvents) ParseOfferCanceled(log types0.Log) (*contracts.ExchangeOfferCanceled, error) {
	ret := m.ctrl.Call(m, "ParseOfferCanceled", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferCanceled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferCanceled indicates an expected call of ParseOfferCanceled
func (mr *MockIExchangeEventsMockRecorder) ParseOfferCanceled(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferCanceled", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferCanceled), log)
}

// ParseOfferCanceledFromReceipt mocks base method
func (m *MockIExchangeEvents) ParseOfferCanceledFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferCanceled, error) {
	ret := m.ctrl.Call(m, "ParseOfferCanceledFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferCanceled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferCanceledFromReceipt indicates an expected call of ParseOfferCanceledFromReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseOfferCanceledFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferCanceledFromReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferCanceledFromReceipt), receipt)
}

// ParseOfferPrepared mocks base method
func (m *MockIExchangeEvents) ParseOfferPrepared(log types0.Log) (*contracts.ExchangeOfferPrepared, error) {
	ret := m.ctrl.Call(m, "ParseOfferPrepared", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferPrepared)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPrepared indicates an expected call of ParseOfferPrepared
func (mr *MockIExchangeEventsMockRecorder) ParseOfferPrepared(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPrepared", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferPrepared), log)
}

// ParseOfferPreparedFromReceipt mocks base method
func (m *MockIExchangeEvents) ParseOfferPreparedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferPrepared, error) {
	ret := m.ctrl.Call(m, "ParseOfferPreparedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferPrepared)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPreparedFromReceipt indicates an expected call of ParseOfferPreparedFromReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseOfferPreparedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPreparedFromReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferPreparedFromReceipt), receipt)
}

// ParseOfferPresented mocks base method
func (m *MockIExchangeEvents) ParseOfferPresented(log types0.Log) (*contracts.ExchangeOfferPresented, error) {
	ret := m.ctrl.Call(m, "ParseOfferPresented", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferPresented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPresented indicates an expected call of ParseOfferPresented
func (mr *MockIExchangeEventsMockRecorder) ParseOfferPresented(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPresented", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferPresented), log)
}

// ParseOfferPresentedFromReceipt mocks base method
func (m *MockIExchangeEvents) ParseOfferPresentedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferPresented, error) {
	ret := m.ctrl.Call(m, "ParseOfferPresentedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferPresented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPresentedFromReceipt indicates an expected call of ParseOfferPresentedFromReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseOfferPresentedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPresentedFromReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferPresentedFromReceipt), receipt)
}

// ParseOfferReceipt mocks base method
func (m *MockIExchangeEvents) ParseOfferReceipt(log types0.Log) (*contracts.ExchangeOfferReceipt, error) {
	ret := m.ctrl.Call(m, "ParseOfferReceipt", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferReceipt indicates an expected call of ParseOfferReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseOfferReceipt(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferReceipt), log)
}

// ParseOfferReceiptFromReceipt mocks base method
func (m *MockIExchangeEvents) ParseOfferReceiptFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferReceipt, error) {
	ret := m.ctrl.Call(m, "ParseOfferReceiptFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferReceiptFromReceipt indicates an expected call of ParseOfferReceiptFromReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseOfferReceiptFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferReceiptFromReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferReceiptFromReceipt), receipt)
}

// ParseOfferRejected mocks base method
func (m *MockIExchangeEvents) ParseOfferRejected(log types0.Log) (*contracts.ExchangeOfferRejected, error) {
	ret := m.ctrl.Call(m, "ParseOfferRejected", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferRejected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferRejected indicates an expected call of ParseOfferRejected
func (mr *MockIExchangeEventsMockRecorder) ParseOfferRejected(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferRejected", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferRejected), log)
}

// ParseOfferRejectedFromReceipt mocks base method
func (m *MockIExchangeEvents) ParseOfferRejectedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferRejected, error) {
	ret := m.ctrl.Call(m, "ParseOfferRejectedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferRejected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferRejectedFromReceipt indicates an expected call of ParseOfferRejectedFromReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseOfferRejectedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferRejectedFromReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferRejectedFromReceipt), receipt)
}

// ParseOfferSettled mocks base method
func (m *MockIExchangeEvents) ParseOfferSettled(log types0.Log) (*contracts.ExchangeOfferSettled, error) {
	ret := m.ctrl.Call(m, "ParseOfferSettled", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferSettled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferSettled indicates an expected call of ParseOfferSettled
func (mr *MockIExchangeEventsMockRecorder) ParseOfferSettled(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferSettled", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferSettled), log)
}

// ParseOfferSettledFromReceipt mocks base method
func (m *MockIExchangeEvents) ParseOfferSettledFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferSettled, error) {
	ret := m.ctrl.Call(m, "ParseOfferSettledFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferSettled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferSettledFromReceipt indicates an expected call of ParseOfferSettledFromReceipt
func (mr *MockIExchangeEventsMockRecorder) ParseOfferSettledFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferSettledFromReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).ParseOfferSettledFromReceipt), receipt)
}

// WatchEscrowExecutionFailed mocks base method
func (m *MockIExchangeEvents) WatchEscrowExecutionFailed(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeEscrowExecutionFailed) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchEscrowExecutionFailed", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEscrowExecutionFailed indicates an expected call of WatchEscrowExecutionFailed
func (mr *MockIExchangeEventsMockRecorder) WatchEscrowExecutionFailed(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeEvents)(nil).WatchEscrowExecutionFailed), opts, sink)
}

// WatchOfferCanceled mocks base method
func (m *MockIExchangeEvents) WatchOfferCanceled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferCanceled, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferCanceled", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferCanceled indicates an expected call of WatchOfferCanceled
func (mr *MockIExchangeEventsMockRecorder) WatchOfferCanceled(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferCanceled", reflect.TypeOf((*MockIExchangeEvents)(nil).WatchOfferCanceled), opts, sink, offerId)
}

// WatchOfferPrepared mocks base method
func (m *MockIExchangeEvents) WatchOfferPrepared(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPrepared, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPrepared", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPrepared indicates an expected call of WatchOfferPrepared
func (mr *MockIExchangeEventsMockRecorder) WatchOfferPrepared(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPrepared", reflect.TypeOf((*MockIExchangeEvents)(nil).WatchOfferPrepared), opts, sink, offerId)
}

// WatchOfferPresented mocks base method
func (m *MockIExchangeEvents) WatchOfferPresented(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPresented, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPresented", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPresented indicates an expected call of WatchOfferPresented
func (mr *MockIExchangeEventsMockRecorder) WatchOfferPresented(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPresented", reflect.TypeOf((*MockIExchangeEvents)(nil).WatchOfferPresented), opts, sink, offerId)
}

// WatchOfferReceipt mocks base method
func (m *MockIExchangeEvents) WatchOfferReceipt(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferReceipt, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferReceipt", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferReceipt indicates an expected call of WatchOfferReceipt
func (mr *MockIExchangeEventsMockRecorder) WatchOfferReceipt(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferReceipt", reflect.TypeOf((*MockIExchangeEvents)(nil).WatchOfferReceipt), opts, sink, offerId, consumer)
}

// WatchOfferRejected mocks base method
func (m *MockIExchangeEvents) WatchOfferRejected(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferRejected, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferRejected", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferRejected indicates an expected call of WatchOfferRejected
func (mr *MockIExchangeEventsMockRecorder) WatchOfferRejected(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferRejected", reflect.TypeOf((*MockIExchangeEvents)(nil).WatchOfferRejected), opts, sink, offerId, consumer)
}

// WatchOfferSettled mocks base method
func (m *MockIExchangeEvents) WatchOfferSettled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferSettled, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferSettled", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferSettled indicates an expected call of WatchOfferSettled
func (mr *MockIExchangeEventsMockRecorder) WatchOfferSettled(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferSettled", reflect.TypeOf((*MockIExchangeEvents)(nil).WatchOfferSettled), opts, sink, offerId, consumer)
}

// MockIExchangeFilterer is a mock of IExchangeFilterer interface
type MockIExchangeFilterer struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeFiltererMockRecorder
}

// MockIExchangeFiltererMockRecorder is the mock recorder for MockIExchangeFilterer
type MockIExchangeFiltererMockRecorder struct {
	mock *MockIExchangeFilterer
}

// NewMockIExchangeFilterer creates a new mock instance
func NewMockIExchangeFilterer(ctrl *gomock.Controller) *MockIExchangeFilterer {
	mock := &MockIExchangeFilterer{ctrl: ctrl}
	mock.recorder = &MockIExchangeFiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeFilterer) EXPECT() *MockIExchangeFiltererMockRecorder {
	return m.recorder
}

// FilterEscrowExecutionFailed mocks base method
func (m *MockIExchangeFilterer) FilterEscrowExecutionFailed(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterEscrowExecutionFailed", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEscrowExecutionFailed indicates an expected call of FilterEscrowExecutionFailed
func (mr *MockIExchangeFiltererMockRecorder) FilterEscrowExecutionFailed(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeFilterer)(nil).FilterEscrowExecutionFailed), opts)
}

// FilterOfferCanceled mocks base method
func (m *MockIExchangeFilterer) FilterOfferCanceled(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferCanceled", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferCanceled indicates an expected call of FilterOfferCanceled
func (mr *MockIExchangeFiltererMockRecorder) FilterOfferCanceled(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferCanceled", reflect.TypeOf((*MockIExchangeFilterer)(nil).FilterOfferCanceled), opts, offerId)
}

// FilterOfferPrepared mocks base method
func (m *MockIExchangeFilterer) FilterOfferPrepared(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPrepared", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPrepared indicates an expected call of FilterOfferPrepared
func (mr *MockIExchangeFiltererMockRecorder) FilterOfferPrepared(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPrepared", reflect.TypeOf((*MockIExchangeFilterer)(nil).FilterOfferPrepared), opts, offerId)
}

// FilterOfferPresented mocks base method
func (m *MockIExchangeFilterer) FilterOfferPresented(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPresented", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPresented indicates an expected call of FilterOfferPresented
func (mr *MockIExchangeFiltererMockRecorder) FilterOfferPresented(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPresented", reflect.TypeOf((*MockIExchangeFilterer)(nil).FilterOfferPresented), opts, offerId)
}

// FilterOfferReceipt mocks base method
func (m *MockIExchangeFilterer) FilterOfferReceipt(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferReceipt", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferReceipt indicates an expected call of FilterOfferReceipt
func (mr *MockIExchangeFiltererMockRecorder) FilterOfferReceipt(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferReceipt", reflect.TypeOf((*MockIExchangeFilterer)(nil).FilterOfferReceipt), opts, offerId, consumer)
}

// FilterOfferRejected mocks base method
func (m *MockIExchangeFilterer) FilterOfferRejected(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferRejected", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferRejected indicates an expected call of FilterOfferRejected
func (mr *MockIExchangeFiltererMockRecorder) FilterOfferRejected(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferRejected", reflect.TypeOf((*MockIExchangeFilterer)(nil).FilterOfferRejected), opts, offerId, consumer)
}

// FilterOfferSettled mocks base method
func (m *MockIExchangeFilterer) FilterOfferSettled(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferSettled", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferSettled indicates an expected call of FilterOfferSettled
func (mr *MockIExchangeFiltererMockRecorder) FilterOfferSettled(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferSettled", reflect.TypeOf((*MockIExchangeFilterer)(nil).FilterOfferSettled), opts, offerId, consumer)
}

// MockIExchangeParser is a mock of IExchangeParser interface
type MockIExchangeParser struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeParserMockRecorder
}

// MockIExchangeParserMockRecorder is the mock recorder for MockIExchangeParser
type MockIExchangeParserMockRecorder struct {
	mock *MockIExchangeParser
}

// NewMockIExchangeParser creates a new mock instance
func NewMockIExchangeParser(ctrl *gomock.Controller) *MockIExchangeParser {
	mock := &MockIExchangeParser{ctrl: ctrl}
	mock.recorder = &MockIExchangeParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeParser) EXPECT() *MockIExchangeParserMockRecorder {
	return m.recorder
}

// ParseEscrowExecutionFailed mocks base method
func (m *MockIExchangeParser) ParseEscrowExecutionFailed(log types0.Log) (*contracts.ExchangeEscrowExecutionFailed, error) {
	ret := m.ctrl.Call(m, "ParseEscrowExecutionFailed", log)
	ret0, _ := ret[0].(*contracts.ExchangeEscrowExecutionFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEscrowExecutionFailed indicates an expected call of ParseEscrowExecutionFailed
func (mr *MockIExchangeParserMockRecorder) ParseEscrowExecutionFailed(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeParser)(nil).ParseEscrowExecutionFailed), log)
}

// ParseEscrowExecutionFailedFromReceipt mocks base method
func (m *MockIExchangeParser) ParseEscrowExecutionFailedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeEscrowExecutionFailed, error) {
	ret := m.ctrl.Call(m, "ParseEscrowExecutionFailedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeEscrowExecutionFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEscrowExecutionFailedFromReceipt indicates an expected call of ParseEscrowExecutionFailedFromReceipt
func (mr *MockIExchangeParserMockRecorder) ParseEscrowExecutionFailedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEscrowExecutionFailedFromReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseEscrowExecutionFailedFromReceipt), receipt)
}

// ParseOfferCanceled mocks base method
func (m *MockIExchangeParser) ParseOfferCanceled(log types0.Log) (*contracts.ExchangeOfferCanceled, error) {
	ret := m.ctrl.Call(m, "ParseOfferCanceled", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferCanceled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferCanceled indicates an expected call of ParseOfferCanceled
func (mr *MockIExchangeParserMockRecorder) ParseOfferCanceled(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferCanceled", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferCanceled), log)
}

// ParseOfferCanceledFromReceipt mocks base method
func (m *MockIExchangeParser) ParseOfferCanceledFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferCanceled, error) {
	ret := m.ctrl.Call(m, "ParseOfferCanceledFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferCanceled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferCanceledFromReceipt indicates an expected call of ParseOfferCanceledFromReceipt
func (mr *MockIExchangeParserMockRecorder) ParseOfferCanceledFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferCanceledFromReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferCanceledFromReceipt), receipt)
}

// ParseOfferPrepared mocks base method
func (m *MockIExchangeParser) ParseOfferPrepared(log types0.Log) (*contracts.ExchangeOfferPrepared, error) {
	ret := m.ctrl.Call(m, "ParseOfferPrepared", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferPrepared)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPrepared indicates an expected call of ParseOfferPrepared
func (mr *MockIExchangeParserMockRecorder) ParseOfferPrepared(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPrepared", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferPrepared), log)
}

// ParseOfferPreparedFromReceipt mocks base method
func (m *MockIExchangeParser) ParseOfferPreparedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferPrepared, error) {
	ret := m.ctrl.Call(m, "ParseOfferPreparedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferPrepared)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPreparedFromReceipt indicates an expected call of ParseOfferPreparedFromReceipt
func (mr *MockIExchangeParserMockRecorder) ParseOfferPreparedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPreparedFromReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferPreparedFromReceipt), receipt)
}

// ParseOfferPresented mocks base method
func (m *MockIExchangeParser) ParseOfferPresented(log types0.Log) (*contracts.ExchangeOfferPresented, error) {
	ret := m.ctrl.Call(m, "ParseOfferPresented", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferPresented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPresented indicates an expected call of ParseOfferPresented
func (mr *MockIExchangeParserMockRecorder) ParseOfferPresented(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPresented", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferPresented), log)
}

// ParseOfferPresentedFromReceipt mocks base method
func (m *MockIExchangeParser) ParseOfferPresentedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferPresented, error) {
	ret := m.ctrl.Call(m, "ParseOfferPresentedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferPresented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPresentedFromReceipt indicates an expected call of ParseOfferPresentedFromReceipt
func (mr *MockIExchangeParserMockRecorder) ParseOfferPresentedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPresentedFromReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferPresentedFromReceipt), receipt)
}

// ParseOfferReceipt mocks base method
func (m *MockIExchangeParser) ParseOfferReceipt(log types0.Log) (*contracts.ExchangeOfferReceipt, error) {
	ret := m.ctrl.Call(m, "ParseOfferReceipt", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferReceipt indicates an expected call of ParseOfferReceipt
func (mr *MockIExchangeParserMockRecorder) ParseOfferReceipt(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferReceipt), log)
}

// ParseOfferReceiptFromReceipt mocks base method
func (m *MockIExchangeParser) ParseOfferReceiptFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferReceipt, error) {
	ret := m.ctrl.Call(m, "ParseOfferReceiptFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferReceiptFromReceipt indicates an expected call of ParseOfferReceiptFromReceipt
func (mr *MockIExchangeParserMockRecorder) ParseOfferReceiptFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferReceiptFromReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferReceiptFromReceipt), receipt)
}

// ParseOfferRejected mocks base method
func (m *MockIExchangeParser) ParseOfferRejected(log types0.Log) (*contracts.ExchangeOfferRejected, error) {
	ret := m.ctrl.Call(m, "ParseOfferRejected", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferRejected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferRejected indicates an expected call of ParseOfferRejected
func (mr *MockIExchangeParserMockRecorder) ParseOfferRejected(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferRejected", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferRejected), log)
}

// ParseOfferRejectedFromReceipt mocks base method
func (m *MockIExchangeParser) ParseOfferRejectedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferRejected, error) {
	ret := m.ctrl.Call(m, "ParseOfferRejectedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferRejected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferRejectedFromReceipt indicates an expected call of ParseOfferRejectedFromReceipt
func (mr *MockIExchangeParserMockRecorder) ParseOfferRejectedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferRejectedFromReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferRejectedFromReceipt), receipt)
}

// ParseOfferSettled mocks base method
func (m *MockIExchangeParser) ParseOfferSettled(log types0.Log) (*contracts.ExchangeOfferSettled, error) {
	ret := m.ctrl.Call(m, "ParseOfferSettled", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferSettled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferSettled indicates an expected call of ParseOfferSettled
func (mr *MockIExchangeParserMockRecorder) ParseOfferSettled(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferSettled", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferSettled), log)
}

// ParseOfferSettledFromReceipt mocks base method
func (m *MockIExchangeParser) ParseOfferSettledFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferSettled, error) {
	ret := m.ctrl.Call(m, "ParseOfferSettledFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferSettled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferSettledFromReceipt indicates an expected call of ParseOfferSettledFromReceipt
func (mr *MockIExchangeParserMockRecorder) ParseOfferSettledFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferSettledFromReceipt", reflect.TypeOf((*MockIExchangeParser)(nil).ParseOfferSettledFromReceipt), receipt)
}

// MockIExchangeWatcher is a mock of IExchangeWatcher interface
type MockIExchangeWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeWatcherMockRecorder
}

// MockIExchangeWatcherMockRecorder is the mock recorder for MockIExchangeWatcher
type MockIExchangeWatcherMockRecorder struct {
	mock *MockIExchangeWatcher
}

// NewMockIExchangeWatcher creates a new mock instance
func NewMockIExchangeWatcher(ctrl *gomock.Controller) *MockIExchangeWatcher {
	mock := &MockIExchangeWatcher{ctrl: ctrl}
	mock.recorder = &MockIExchangeWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeWatcher) EXPECT() *MockIExchangeWatcherMockRecorder {
	return m.recorder
}

// WatchEscrowExecutionFailed mocks base method
func (m *MockIExchangeWatcher) WatchEscrowExecutionFailed(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeEscrowExecutionFailed) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchEscrowExecutionFailed", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEscrowExecutionFailed indicates an expected call of WatchEscrowExecutionFailed
func (mr *MockIExchangeWatcherMockRecorder) WatchEscrowExecutionFailed(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeWatcher)(nil).WatchEscrowExecutionFailed), opts, sink)
}

// WatchOfferCanceled mocks base method
func (m *MockIExchangeWatcher) WatchOfferCanceled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferCanceled, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferCanceled", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferCanceled indicates an expected call of WatchOfferCanceled
func (mr *MockIExchangeWatcherMockRecorder) WatchOfferCanceled(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferCanceled", reflect.TypeOf((*MockIExchangeWatcher)(nil).WatchOfferCanceled), opts, sink, offerId)
}

// WatchOfferPrepared mocks base method
func (m *MockIExchangeWatcher) WatchOfferPrepared(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPrepared, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPrepared", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPrepared indicates an expected call of WatchOfferPrepared
func (mr *MockIExchangeWatcherMockRecorder) WatchOfferPrepared(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPrepared", reflect.TypeOf((*MockIExchangeWatcher)(nil).WatchOfferPrepared), opts, sink, offerId)
}

// WatchOfferPresented mocks base method
func (m *MockIExchangeWatcher) WatchOfferPresented(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPresented, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPresented", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPresented indicates an expected call of WatchOfferPresented
func (mr *MockIExchangeWatcherMockRecorder) WatchOfferPresented(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPresented", reflect.TypeOf((*MockIExchangeWatcher)(nil).WatchOfferPresented), opts, sink, offerId)
}

// WatchOfferReceipt mocks base method
func (m *MockIExchangeWatcher) WatchOfferReceipt(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferReceipt, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferReceipt", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferReceipt indicates an expected call of WatchOfferReceipt
func (mr *MockIExchangeWatcherMockRecorder) WatchOfferReceipt(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferReceipt", reflect.TypeOf((*MockIExchangeWatcher)(nil).WatchOfferReceipt), opts, sink, offerId, consumer)
}

// WatchOfferRejected mocks base method
func (m *MockIExchangeWatcher) WatchOfferRejected(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferRejected, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferRejected", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferRejected indicates an expected call of WatchOfferRejected
func (mr *MockIExchangeWatcherMockRecorder) WatchOfferRejected(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferRejected", reflect.TypeOf((*MockIExchangeWatcher)(nil).WatchOfferRejected), opts, sink, offerId, consumer)
}

// WatchOfferSettled mocks base method
func (m *MockIExchangeWatcher) WatchOfferSettled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferSettled, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferSettled", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferSettled indicates an expected call of WatchOfferSettled
func (mr *MockIExchangeWatcherMockRecorder) WatchOfferSettled(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferSettled", reflect.TypeOf((*MockIExchangeWatcher)(nil).WatchOfferSettled), opts, sink, offerId, consumer)
}

// MockIExchangeContract is a mock of IExchangeContract interface
type MockIExchangeContract struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeContractMockRecorder
}

// MockIExchangeContractMockRecorder is the mock recorder for MockIExchangeContract
type MockIExchangeContractMockRecorder struct {
	mock *MockIExchangeContract
}

// NewMockIExchangeContract creates a new mock instance
func NewMockIExchangeContract(ctrl *gomock.Controller) *MockIExchangeContract {
	mock := &MockIExchangeContract{ctrl: ctrl}
	mock.recorder = &MockIExchangeContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeContract) EXPECT() *MockIExchangeContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIExchangeContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIExchangeContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIExchangeContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockIExchangeContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIExchangeContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIExchangeContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIExchangeContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIExchangeContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIExchangeContract)(nil).CreatedAt))
}

// GetOffer mocks base method
func (m *MockIExchangeContract) GetOffer(offerId types.ID) (types.Offer, error) {
	ret := m.ctrl.Call(m, "GetOffer", offerId)
	ret0, _ := ret[0].(types.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffer indicates an expected call of GetOffer
func (mr *MockIExchangeContractMockRecorder) GetOffer(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffer", reflect.TypeOf((*MockIExchangeContract)(nil).GetOffer), offerId)
}

// GetOfferMembers mocks base method
func (m *MockIExchangeContract) GetOfferMembers(offerId types.ID) (common.Address, common.Address, error) {
	ret := m.ctrl.Call(m, "GetOfferMembers", offerId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOfferMembers indicates an expected call of GetOfferMembers
func (mr *MockIExchangeContractMockRecorder) GetOfferMembers(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferMembers", reflect.TypeOf((*MockIExchangeContract)(nil).GetOfferMembers), offerId)
}

// OfferExists mocks base method
func (m *MockIExchangeContract) OfferExists(offerId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "OfferExists", offerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferExists indicates an expected call of OfferExists
func (mr *MockIExchangeContractMockRecorder) OfferExists(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferExists", reflect.TypeOf((*MockIExchangeContract)(nil).OfferExists), offerId)
}

// AddDataIds mocks base method
func (m *MockIExchangeContract) AddDataIds(ctx context.Context, opts *bind.TransactOpts, offerId types.ID, dataIds []types.DataId) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "AddDataIds", ctx, opts, offerId, dataIds)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddDataIds indicates an expected call of AddDataIds
func (mr *MockIExchangeContractMockRecorder) AddDataIds(ctx, opts, offerId, dataIds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDataIds", reflect.TypeOf((*MockIExchangeContract)(nil).AddDataIds), ctx, opts, offerId, dataIds)
}

// Cancel mocks base method
func (m *MockIExchangeContract) Cancel(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Cancel", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Cancel indicates an expected call of Cancel
func (mr *MockIExchangeContractMockRecorder) Cancel(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockIExchangeContract)(nil).Cancel), ctx, opts, offerId)
}

// Order mocks base method
func (m *MockIExchangeContract) Order(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Order", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Order indicates an expected call of Order
func (mr *MockIExchangeContractMockRecorder) Order(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockIExchangeContract)(nil).Order), ctx, opts, offerId)
}

// Prepare mocks base method
func (m *MockIExchangeContract) Prepare(ctx context.Context, opts *bind.TransactOpts, provider string, consumer, escrow common.Address, escrowSign [4]byte, escrowArgs []byte, dataIds []types.DataId) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Prepare", ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockIExchangeContractMockRecorder) Prepare(ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockIExchangeContract)(nil).Prepare), ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds)
}

// Reject mocks base method
func (m *MockIExchangeContract) Reject(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Reject", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Reject indicates an expected call of Reject
func (mr *MockIExchangeContractMockRecorder) Reject(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockIExchangeContract)(nil).Reject), ctx, opts, offerId)
}

// Settle mocks base method
func (m *MockIExchangeContract) Settle(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Settle", ctx, opts, offerId)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Settle indicates an expected call of Settle
func (mr *MockIExchangeContractMockRecorder) Settle(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settle", reflect.TypeOf((*MockIExchangeContract)(nil).Settle), ctx, opts, offerId)
}

// FilterEscrowExecutionFailed mocks base method
func (m *MockIExchangeContract) FilterEscrowExecutionFailed(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterEscrowExecutionFailed", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEscrowExecutionFailed indicates an expected call of FilterEscrowExecutionFailed
func (mr *MockIExchangeContractMockRecorder) FilterEscrowExecutionFailed(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeContract)(nil).FilterEscrowExecutionFailed), opts)
}

// FilterOfferCanceled mocks base method
func (m *MockIExchangeContract) FilterOfferCanceled(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferCanceled", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferCanceled indicates an expected call of FilterOfferCanceled
func (mr *MockIExchangeContractMockRecorder) FilterOfferCanceled(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferCanceled", reflect.TypeOf((*MockIExchangeContract)(nil).FilterOfferCanceled), opts, offerId)
}

// FilterOfferPrepared mocks base method
func (m *MockIExchangeContract) FilterOfferPrepared(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPrepared", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPrepared indicates an expected call of FilterOfferPrepared
func (mr *MockIExchangeContractMockRecorder) FilterOfferPrepared(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPrepared", reflect.TypeOf((*MockIExchangeContract)(nil).FilterOfferPrepared), opts, offerId)
}

// FilterOfferPresented mocks base method
func (m *MockIExchangeContract) FilterOfferPresented(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPresented", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPresented indicates an expected call of FilterOfferPresented
func (mr *MockIExchangeContractMockRecorder) FilterOfferPresented(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPresented", reflect.TypeOf((*MockIExchangeContract)(nil).FilterOfferPresented), opts, offerId)
}

// FilterOfferReceipt mocks base method
func (m *MockIExchangeContract) FilterOfferReceipt(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferReceipt", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferReceipt indicates an expected call of FilterOfferReceipt
func (mr *MockIExchangeContractMockRecorder) FilterOfferReceipt(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).FilterOfferReceipt), opts, offerId, consumer)
}

// FilterOfferRejected mocks base method
func (m *MockIExchangeContract) FilterOfferRejected(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferRejected", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferRejected indicates an expected call of FilterOfferRejected
func (mr *MockIExchangeContractMockRecorder) FilterOfferRejected(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferRejected", reflect.TypeOf((*MockIExchangeContract)(nil).FilterOfferRejected), opts, offerId, consumer)
}

// FilterOfferSettled mocks base method
func (m *MockIExchangeContract) FilterOfferSettled(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferSettled", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferSettled indicates an expected call of FilterOfferSettled
func (mr *MockIExchangeContractMockRecorder) FilterOfferSettled(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferSettled", reflect.TypeOf((*MockIExchangeContract)(nil).FilterOfferSettled), opts, offerId, consumer)
}

// ParseEscrowExecutionFailed mocks base method
func (m *MockIExchangeContract) ParseEscrowExecutionFailed(log types0.Log) (*contracts.ExchangeEscrowExecutionFailed, error) {
	ret := m.ctrl.Call(m, "ParseEscrowExecutionFailed", log)
	ret0, _ := ret[0].(*contracts.ExchangeEscrowExecutionFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEscrowExecutionFailed indicates an expected call of ParseEscrowExecutionFailed
func (mr *MockIExchangeContractMockRecorder) ParseEscrowExecutionFailed(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeContract)(nil).ParseEscrowExecutionFailed), log)
}

// ParseEscrowExecutionFailedFromReceipt mocks base method
func (m *MockIExchangeContract) ParseEscrowExecutionFailedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeEscrowExecutionFailed, error) {
	ret := m.ctrl.Call(m, "ParseEscrowExecutionFailedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeEscrowExecutionFailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseEscrowExecutionFailedFromReceipt indicates an expected call of ParseEscrowExecutionFailedFromReceipt
func (mr *MockIExchangeContractMockRecorder) ParseEscrowExecutionFailedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseEscrowExecutionFailedFromReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseEscrowExecutionFailedFromReceipt), receipt)
}

// ParseOfferCanceled mocks base method
func (m *MockIExchangeContract) ParseOfferCanceled(log types0.Log) (*contracts.ExchangeOfferCanceled, error) {
	ret := m.ctrl.Call(m, "ParseOfferCanceled", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferCanceled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferCanceled indicates an expected call of ParseOfferCanceled
func (mr *MockIExchangeContractMockRecorder) ParseOfferCanceled(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferCanceled", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferCanceled), log)
}

// ParseOfferCanceledFromReceipt mocks base method
func (m *MockIExchangeContract) ParseOfferCanceledFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferCanceled, error) {
	ret := m.ctrl.Call(m, "ParseOfferCanceledFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferCanceled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferCanceledFromReceipt indicates an expected call of ParseOfferCanceledFromReceipt
func (mr *MockIExchangeContractMockRecorder) ParseOfferCanceledFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferCanceledFromReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferCanceledFromReceipt), receipt)
}

// ParseOfferPrepared mocks base method
func (m *MockIExchangeContract) ParseOfferPrepared(log types0.Log) (*contracts.ExchangeOfferPrepared, error) {
	ret := m.ctrl.Call(m, "ParseOfferPrepared", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferPrepared)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPrepared indicates an expected call of ParseOfferPrepared
func (mr *MockIExchangeContractMockRecorder) ParseOfferPrepared(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPrepared", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferPrepared), log)
}

// ParseOfferPreparedFromReceipt mocks base method
func (m *MockIExchangeContract) ParseOfferPreparedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferPrepared, error) {
	ret := m.ctrl.Call(m, "ParseOfferPreparedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferPrepared)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPreparedFromReceipt indicates an expected call of ParseOfferPreparedFromReceipt
func (mr *MockIExchangeContractMockRecorder) ParseOfferPreparedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPreparedFromReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferPreparedFromReceipt), receipt)
}

// ParseOfferPresented mocks base method
func (m *MockIExchangeContract) ParseOfferPresented(log types0.Log) (*contracts.ExchangeOfferPresented, error) {
	ret := m.ctrl.Call(m, "ParseOfferPresented", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferPresented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPresented indicates an expected call of ParseOfferPresented
func (mr *MockIExchangeContractMockRecorder) ParseOfferPresented(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPresented", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferPresented), log)
}

// ParseOfferPresentedFromReceipt mocks base method
func (m *MockIExchangeContract) ParseOfferPresentedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferPresented, error) {
	ret := m.ctrl.Call(m, "ParseOfferPresentedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferPresented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferPresentedFromReceipt indicates an expected call of ParseOfferPresentedFromReceipt
func (mr *MockIExchangeContractMockRecorder) ParseOfferPresentedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferPresentedFromReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferPresentedFromReceipt), receipt)
}

// ParseOfferReceipt mocks base method
func (m *MockIExchangeContract) ParseOfferReceipt(log types0.Log) (*contracts.ExchangeOfferReceipt, error) {
	ret := m.ctrl.Call(m, "ParseOfferReceipt", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferReceipt indicates an expected call of ParseOfferReceipt
func (mr *MockIExchangeContractMockRecorder) ParseOfferReceipt(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferReceipt), log)
}

// ParseOfferReceiptFromReceipt mocks base method
func (m *MockIExchangeContract) ParseOfferReceiptFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferReceipt, error) {
	ret := m.ctrl.Call(m, "ParseOfferReceiptFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferReceipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferReceiptFromReceipt indicates an expected call of ParseOfferReceiptFromReceipt
func (mr *MockIExchangeContractMockRecorder) ParseOfferReceiptFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferReceiptFromReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferReceiptFromReceipt), receipt)
}

// ParseOfferRejected mocks base method
func (m *MockIExchangeContract) ParseOfferRejected(log types0.Log) (*contracts.ExchangeOfferRejected, error) {
	ret := m.ctrl.Call(m, "ParseOfferRejected", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferRejected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferRejected indicates an expected call of ParseOfferRejected
func (mr *MockIExchangeContractMockRecorder) ParseOfferRejected(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferRejected", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferRejected), log)
}

// ParseOfferRejectedFromReceipt mocks base method
func (m *MockIExchangeContract) ParseOfferRejectedFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferRejected, error) {
	ret := m.ctrl.Call(m, "ParseOfferRejectedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferRejected)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferRejectedFromReceipt indicates an expected call of ParseOfferRejectedFromReceipt
func (mr *MockIExchangeContractMockRecorder) ParseOfferRejectedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferRejectedFromReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferRejectedFromReceipt), receipt)
}

// ParseOfferSettled mocks base method
func (m *MockIExchangeContract) ParseOfferSettled(log types0.Log) (*contracts.ExchangeOfferSettled, error) {
	ret := m.ctrl.Call(m, "ParseOfferSettled", log)
	ret0, _ := ret[0].(*contracts.ExchangeOfferSettled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferSettled indicates an expected call of ParseOfferSettled
func (mr *MockIExchangeContractMockRecorder) ParseOfferSettled(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferSettled", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferSettled), log)
}

// ParseOfferSettledFromReceipt mocks base method
func (m *MockIExchangeContract) ParseOfferSettledFromReceipt(receipt *types0.Receipt) ([]*contracts.ExchangeOfferSettled, error) {
	ret := m.ctrl.Call(m, "ParseOfferSettledFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.ExchangeOfferSettled)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOfferSettledFromReceipt indicates an expected call of ParseOfferSettledFromReceipt
func (mr *MockIExchangeContractMockRecorder) ParseOfferSettledFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOfferSettledFromReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).ParseOfferSettledFromReceipt), receipt)
}

// WatchEscrowExecutionFailed mocks base method
func (m *MockIExchangeContract) WatchEscrowExecutionFailed(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeEscrowExecutionFailed) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchEscrowExecutionFailed", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEscrowExecutionFailed indicates an expected call of WatchEscrowExecutionFailed
func (mr *MockIExchangeContractMockRecorder) WatchEscrowExecutionFailed(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeContract)(nil).WatchEscrowExecutionFailed), opts, sink)
}

// WatchOfferCanceled mocks base method
func (m *MockIExchangeContract) WatchOfferCanceled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferCanceled, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferCanceled", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferCanceled indicates an expected call of WatchOfferCanceled
func (mr *MockIExchangeContractMockRecorder) WatchOfferCanceled(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferCanceled", reflect.TypeOf((*MockIExchangeContract)(nil).WatchOfferCanceled), opts, sink, offerId)
}

// WatchOfferPrepared mocks base method
func (m *MockIExchangeContract) WatchOfferPrepared(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPrepared, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPrepared", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPrepared indicates an expected call of WatchOfferPrepared
func (mr *MockIExchangeContractMockRecorder) WatchOfferPrepared(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPrepared", reflect.TypeOf((*MockIExchangeContract)(nil).WatchOfferPrepared), opts, sink, offerId)
}

// WatchOfferPresented mocks base method
func (m *MockIExchangeContract) WatchOfferPresented(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPresented, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPresented", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPresented indicates an expected call of WatchOfferPresented
func (mr *MockIExchangeContractMockRecorder) WatchOfferPresented(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPresented", reflect.TypeOf((*MockIExchangeContract)(nil).WatchOfferPresented), opts, sink, offerId)
}

// WatchOfferReceipt mocks base method
func (m *MockIExchangeContract) WatchOfferReceipt(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferReceipt, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferReceipt", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferReceipt indicates an expected call of WatchOfferReceipt
func (mr *MockIExchangeContractMockRecorder) WatchOfferReceipt(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferReceipt", reflect.TypeOf((*MockIExchangeContract)(nil).WatchOfferReceipt), opts, sink, offerId, consumer)
}

// WatchOfferRejected mocks base method
func (m *MockIExchangeContract) WatchOfferRejected(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferRejected, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferRejected", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferRejected indicates an expected call of WatchOfferRejected
func (mr *MockIExchangeContractMockRecorder) WatchOfferRejected(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferRejected", reflect.TypeOf((*MockIExchangeContract)(nil).WatchOfferRejected), opts, sink, offerId, consumer)
}

// WatchOfferSettled mocks base method
func (m *MockIExchangeContract) WatchOfferSettled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferSettled, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferSettled", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferSettled indicates an expected call of WatchOfferSettled
func (mr *MockIExchangeContractMockRecorder) WatchOfferSettled(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferSettled", reflect.TypeOf((*MockIExchangeContract)(nil).WatchOfferSettled), opts, sink, offerId, consumer)
}
