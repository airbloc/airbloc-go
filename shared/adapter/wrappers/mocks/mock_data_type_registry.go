// Code generated by MockGen. DO NOT EDIT.
// Source: data_type_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/shared/adapter"
	contracts "github.com/airbloc/airbloc-go/shared/adapter/contracts"
	types "github.com/airbloc/airbloc-go/shared/adapter/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	types0 "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIDataTypeRegistryCalls is a mock of IDataTypeRegistryCalls interface
type MockIDataTypeRegistryCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryCallsMockRecorder
}

// MockIDataTypeRegistryCallsMockRecorder is the mock recorder for MockIDataTypeRegistryCalls
type MockIDataTypeRegistryCallsMockRecorder struct {
	mock *MockIDataTypeRegistryCalls
}

// NewMockIDataTypeRegistryCalls creates a new mock instance
func NewMockIDataTypeRegistryCalls(ctrl *gomock.Controller) *MockIDataTypeRegistryCalls {
	mock := &MockIDataTypeRegistryCalls{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryCalls) EXPECT() *MockIDataTypeRegistryCallsMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockIDataTypeRegistryCalls) Exists(name string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIDataTypeRegistryCallsMockRecorder) Exists(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIDataTypeRegistryCalls)(nil).Exists), name)
}

// Get mocks base method
func (m *MockIDataTypeRegistryCalls) Get(name string) (types.DataType, error) {
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(types.DataType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIDataTypeRegistryCallsMockRecorder) Get(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDataTypeRegistryCalls)(nil).Get), name)
}

// IsOwner mocks base method
func (m *MockIDataTypeRegistryCalls) IsOwner(name string, owner common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner", name, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIDataTypeRegistryCallsMockRecorder) IsOwner(name, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIDataTypeRegistryCalls)(nil).IsOwner), name, owner)
}

// MockIDataTypeRegistryTransacts is a mock of IDataTypeRegistryTransacts interface
type MockIDataTypeRegistryTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryTransactsMockRecorder
}

// MockIDataTypeRegistryTransactsMockRecorder is the mock recorder for MockIDataTypeRegistryTransacts
type MockIDataTypeRegistryTransactsMockRecorder struct {
	mock *MockIDataTypeRegistryTransacts
}

// NewMockIDataTypeRegistryTransacts creates a new mock instance
func NewMockIDataTypeRegistryTransacts(ctrl *gomock.Controller) *MockIDataTypeRegistryTransacts {
	mock := &MockIDataTypeRegistryTransacts{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryTransacts) EXPECT() *MockIDataTypeRegistryTransactsMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockIDataTypeRegistryTransacts) Register(ctx context.Context, opts *bind.TransactOpts, name string, schemaHash common.Hash) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Register", ctx, opts, name, schemaHash)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockIDataTypeRegistryTransactsMockRecorder) Register(ctx, opts, name, schemaHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIDataTypeRegistryTransacts)(nil).Register), ctx, opts, name, schemaHash)
}

// Unregister mocks base method
func (m *MockIDataTypeRegistryTransacts) Unregister(ctx context.Context, opts *bind.TransactOpts, name string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Unregister", ctx, opts, name)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unregister indicates an expected call of Unregister
func (mr *MockIDataTypeRegistryTransactsMockRecorder) Unregister(ctx, opts, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockIDataTypeRegistryTransacts)(nil).Unregister), ctx, opts, name)
}

// MockIDataTypeRegistryEvents is a mock of IDataTypeRegistryEvents interface
type MockIDataTypeRegistryEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryEventsMockRecorder
}

// MockIDataTypeRegistryEventsMockRecorder is the mock recorder for MockIDataTypeRegistryEvents
type MockIDataTypeRegistryEventsMockRecorder struct {
	mock *MockIDataTypeRegistryEvents
}

// NewMockIDataTypeRegistryEvents creates a new mock instance
func NewMockIDataTypeRegistryEvents(ctrl *gomock.Controller) *MockIDataTypeRegistryEvents {
	mock := &MockIDataTypeRegistryEvents{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryEvents) EXPECT() *MockIDataTypeRegistryEventsMockRecorder {
	return m.recorder
}

// FilterRegistration mocks base method
func (m *MockIDataTypeRegistryEvents) FilterRegistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIDataTypeRegistryEventsMockRecorder) FilterRegistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).FilterRegistration), opts)
}

// FilterUnregistration mocks base method
func (m *MockIDataTypeRegistryEvents) FilterUnregistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIDataTypeRegistryEventsMockRecorder) FilterUnregistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).FilterUnregistration), opts)
}

// ParseRegistration mocks base method
func (m *MockIDataTypeRegistryEvents) ParseRegistration(log types0.Log) (*contracts.DataTypeRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistration", log)
	ret0, _ := ret[0].(*contracts.DataTypeRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistration indicates an expected call of ParseRegistration
func (mr *MockIDataTypeRegistryEventsMockRecorder) ParseRegistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistration", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).ParseRegistration), log)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIDataTypeRegistryEvents) ParseRegistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.DataTypeRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.DataTypeRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIDataTypeRegistryEventsMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).ParseRegistrationFromReceipt), receipt)
}

// ParseUnregistration mocks base method
func (m *MockIDataTypeRegistryEvents) ParseUnregistration(log types0.Log) (*contracts.DataTypeRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistration", log)
	ret0, _ := ret[0].(*contracts.DataTypeRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistration indicates an expected call of ParseUnregistration
func (mr *MockIDataTypeRegistryEventsMockRecorder) ParseUnregistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistration", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).ParseUnregistration), log)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIDataTypeRegistryEvents) ParseUnregistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.DataTypeRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.DataTypeRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIDataTypeRegistryEventsMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).ParseUnregistrationFromReceipt), receipt)
}

// WatchRegistration mocks base method
func (m *MockIDataTypeRegistryEvents) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryRegistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIDataTypeRegistryEventsMockRecorder) WatchRegistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).WatchRegistration), opts, sink)
}

// WatchUnregistration mocks base method
func (m *MockIDataTypeRegistryEvents) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryUnregistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIDataTypeRegistryEventsMockRecorder) WatchUnregistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIDataTypeRegistryEvents)(nil).WatchUnregistration), opts, sink)
}

// MockIDataTypeRegistryFilterer is a mock of IDataTypeRegistryFilterer interface
type MockIDataTypeRegistryFilterer struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryFiltererMockRecorder
}

// MockIDataTypeRegistryFiltererMockRecorder is the mock recorder for MockIDataTypeRegistryFilterer
type MockIDataTypeRegistryFiltererMockRecorder struct {
	mock *MockIDataTypeRegistryFilterer
}

// NewMockIDataTypeRegistryFilterer creates a new mock instance
func NewMockIDataTypeRegistryFilterer(ctrl *gomock.Controller) *MockIDataTypeRegistryFilterer {
	mock := &MockIDataTypeRegistryFilterer{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryFiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryFilterer) EXPECT() *MockIDataTypeRegistryFiltererMockRecorder {
	return m.recorder
}

// FilterRegistration mocks base method
func (m *MockIDataTypeRegistryFilterer) FilterRegistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIDataTypeRegistryFiltererMockRecorder) FilterRegistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIDataTypeRegistryFilterer)(nil).FilterRegistration), opts)
}

// FilterUnregistration mocks base method
func (m *MockIDataTypeRegistryFilterer) FilterUnregistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIDataTypeRegistryFiltererMockRecorder) FilterUnregistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIDataTypeRegistryFilterer)(nil).FilterUnregistration), opts)
}

// MockIDataTypeRegistryParser is a mock of IDataTypeRegistryParser interface
type MockIDataTypeRegistryParser struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryParserMockRecorder
}

// MockIDataTypeRegistryParserMockRecorder is the mock recorder for MockIDataTypeRegistryParser
type MockIDataTypeRegistryParserMockRecorder struct {
	mock *MockIDataTypeRegistryParser
}

// NewMockIDataTypeRegistryParser creates a new mock instance
func NewMockIDataTypeRegistryParser(ctrl *gomock.Controller) *MockIDataTypeRegistryParser {
	mock := &MockIDataTypeRegistryParser{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryParser) EXPECT() *MockIDataTypeRegistryParserMockRecorder {
	return m.recorder
}

// ParseRegistration mocks base method
func (m *MockIDataTypeRegistryParser) ParseRegistration(log types0.Log) (*contracts.DataTypeRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistration", log)
	ret0, _ := ret[0].(*contracts.DataTypeRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistration indicates an expected call of ParseRegistration
func (mr *MockIDataTypeRegistryParserMockRecorder) ParseRegistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistration", reflect.TypeOf((*MockIDataTypeRegistryParser)(nil).ParseRegistration), log)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIDataTypeRegistryParser) ParseRegistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.DataTypeRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.DataTypeRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIDataTypeRegistryParserMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIDataTypeRegistryParser)(nil).ParseRegistrationFromReceipt), receipt)
}

// ParseUnregistration mocks base method
func (m *MockIDataTypeRegistryParser) ParseUnregistration(log types0.Log) (*contracts.DataTypeRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistration", log)
	ret0, _ := ret[0].(*contracts.DataTypeRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistration indicates an expected call of ParseUnregistration
func (mr *MockIDataTypeRegistryParserMockRecorder) ParseUnregistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistration", reflect.TypeOf((*MockIDataTypeRegistryParser)(nil).ParseUnregistration), log)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIDataTypeRegistryParser) ParseUnregistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.DataTypeRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.DataTypeRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIDataTypeRegistryParserMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIDataTypeRegistryParser)(nil).ParseUnregistrationFromReceipt), receipt)
}

// MockIDataTypeRegistryWatcher is a mock of IDataTypeRegistryWatcher interface
type MockIDataTypeRegistryWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryWatcherMockRecorder
}

// MockIDataTypeRegistryWatcherMockRecorder is the mock recorder for MockIDataTypeRegistryWatcher
type MockIDataTypeRegistryWatcherMockRecorder struct {
	mock *MockIDataTypeRegistryWatcher
}

// NewMockIDataTypeRegistryWatcher creates a new mock instance
func NewMockIDataTypeRegistryWatcher(ctrl *gomock.Controller) *MockIDataTypeRegistryWatcher {
	mock := &MockIDataTypeRegistryWatcher{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryWatcher) EXPECT() *MockIDataTypeRegistryWatcherMockRecorder {
	return m.recorder
}

// WatchRegistration mocks base method
func (m *MockIDataTypeRegistryWatcher) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryRegistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIDataTypeRegistryWatcherMockRecorder) WatchRegistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIDataTypeRegistryWatcher)(nil).WatchRegistration), opts, sink)
}

// WatchUnregistration mocks base method
func (m *MockIDataTypeRegistryWatcher) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryUnregistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIDataTypeRegistryWatcherMockRecorder) WatchUnregistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIDataTypeRegistryWatcher)(nil).WatchUnregistration), opts, sink)
}

// MockIDataTypeRegistryContract is a mock of IDataTypeRegistryContract interface
type MockIDataTypeRegistryContract struct {
	ctrl     *gomock.Controller
	recorder *MockIDataTypeRegistryContractMockRecorder
}

// MockIDataTypeRegistryContractMockRecorder is the mock recorder for MockIDataTypeRegistryContract
type MockIDataTypeRegistryContractMockRecorder struct {
	mock *MockIDataTypeRegistryContract
}

// NewMockIDataTypeRegistryContract creates a new mock instance
func NewMockIDataTypeRegistryContract(ctrl *gomock.Controller) *MockIDataTypeRegistryContract {
	mock := &MockIDataTypeRegistryContract{ctrl: ctrl}
	mock.recorder = &MockIDataTypeRegistryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIDataTypeRegistryContract) EXPECT() *MockIDataTypeRegistryContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIDataTypeRegistryContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIDataTypeRegistryContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockIDataTypeRegistryContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIDataTypeRegistryContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIDataTypeRegistryContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIDataTypeRegistryContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIDataTypeRegistryContract) Exists(name string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIDataTypeRegistryContractMockRecorder) Exists(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).Exists), name)
}

// Get mocks base method
func (m *MockIDataTypeRegistryContract) Get(name string) (types.DataType, error) {
	ret := m.ctrl.Call(m, "Get", name)
	ret0, _ := ret[0].(types.DataType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIDataTypeRegistryContractMockRecorder) Get(name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).Get), name)
}

// IsOwner mocks base method
func (m *MockIDataTypeRegistryContract) IsOwner(name string, owner common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner", name, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIDataTypeRegistryContractMockRecorder) IsOwner(name, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).IsOwner), name, owner)
}

// Register mocks base method
func (m *MockIDataTypeRegistryContract) Register(ctx context.Context, opts *bind.TransactOpts, name string, schemaHash common.Hash) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Register", ctx, opts, name, schemaHash)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockIDataTypeRegistryContractMockRecorder) Register(ctx, opts, name, schemaHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).Register), ctx, opts, name, schemaHash)
}

// Unregister mocks base method
func (m *MockIDataTypeRegistryContract) Unregister(ctx context.Context, opts *bind.TransactOpts, name string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Unregister", ctx, opts, name)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unregister indicates an expected call of Unregister
func (mr *MockIDataTypeRegistryContractMockRecorder) Unregister(ctx, opts, name interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).Unregister), ctx, opts, name)
}

// FilterRegistration mocks base method
func (m *MockIDataTypeRegistryContract) FilterRegistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIDataTypeRegistryContractMockRecorder) FilterRegistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).FilterRegistration), opts)
}

// FilterUnregistration mocks base method
func (m *MockIDataTypeRegistryContract) FilterUnregistration(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIDataTypeRegistryContractMockRecorder) FilterUnregistration(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).FilterUnregistration), opts)
}

// ParseRegistration mocks base method
func (m *MockIDataTypeRegistryContract) ParseRegistration(log types0.Log) (*contracts.DataTypeRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistration", log)
	ret0, _ := ret[0].(*contracts.DataTypeRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistration indicates an expected call of ParseRegistration
func (mr *MockIDataTypeRegistryContractMockRecorder) ParseRegistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistration", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).ParseRegistration), log)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIDataTypeRegistryContract) ParseRegistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.DataTypeRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.DataTypeRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIDataTypeRegistryContractMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).ParseRegistrationFromReceipt), receipt)
}

// ParseUnregistration mocks base method
func (m *MockIDataTypeRegistryContract) ParseUnregistration(log types0.Log) (*contracts.DataTypeRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistration", log)
	ret0, _ := ret[0].(*contracts.DataTypeRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistration indicates an expected call of ParseUnregistration
func (mr *MockIDataTypeRegistryContractMockRecorder) ParseUnregistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistration", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).ParseUnregistration), log)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIDataTypeRegistryContract) ParseUnregistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.DataTypeRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.DataTypeRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIDataTypeRegistryContractMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).ParseUnregistrationFromReceipt), receipt)
}

// WatchRegistration mocks base method
func (m *MockIDataTypeRegistryContract) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryRegistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIDataTypeRegistryContractMockRecorder) WatchRegistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).WatchRegistration), opts, sink)
}

// WatchUnregistration mocks base method
func (m *MockIDataTypeRegistryContract) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.DataTypeRegistryUnregistration) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIDataTypeRegistryContractMockRecorder) WatchUnregistration(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIDataTypeRegistryContract)(nil).WatchUnregistration), opts, sink)
}
