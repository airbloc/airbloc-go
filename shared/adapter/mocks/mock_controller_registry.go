// Code generated by MockGen. DO NOT EDIT.
// Source: controller_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	adapter "github.com/airbloc/airbloc-go/shared/adapter"
	bind "github.com/airbloc/airbloc-go/shared/blockchain/bind"
	types "github.com/airbloc/airbloc-go/shared/types"
	common "github.com/ethereum/go-ethereum/common"
	types0 "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockIControllerRegistryManager is a mock of IControllerRegistryManager interface
type MockIControllerRegistryManager struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerRegistryManagerMockRecorder
}

// MockIControllerRegistryManagerMockRecorder is the mock recorder for MockIControllerRegistryManager
type MockIControllerRegistryManagerMockRecorder struct {
	mock *MockIControllerRegistryManager
}

// NewMockIControllerRegistryManager creates a new mock instance
func NewMockIControllerRegistryManager(ctrl *gomock.Controller) *MockIControllerRegistryManager {
	mock := &MockIControllerRegistryManager{ctrl: ctrl}
	mock.recorder = &MockIControllerRegistryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIControllerRegistryManager) EXPECT() *MockIControllerRegistryManagerMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockIControllerRegistryManager) Account() common.Address {
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockIControllerRegistryManagerMockRecorder) Account() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Account))
}

// TxHash mocks base method
func (m *MockIControllerRegistryManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIControllerRegistryManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIControllerRegistryManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIControllerRegistryManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIControllerRegistryManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIControllerRegistryManager)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIControllerRegistryManager) Exists(controller common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", controller)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIControllerRegistryManagerMockRecorder) Exists(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Exists), controller)
}

// Get mocks base method
func (m *MockIControllerRegistryManager) Get(controller common.Address) (types.DataController, error) {
	ret := m.ctrl.Call(m, "Get", controller)
	ret0, _ := ret[0].(types.DataController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIControllerRegistryManagerMockRecorder) Get(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Get), controller)
}

// IsOwner mocks base method
func (m *MockIControllerRegistryManager) IsOwner() (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIControllerRegistryManagerMockRecorder) IsOwner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIControllerRegistryManager)(nil).IsOwner))
}

// Owner mocks base method
func (m *MockIControllerRegistryManager) Owner() (common.Address, error) {
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Owner indicates an expected call of Owner
func (mr *MockIControllerRegistryManagerMockRecorder) Owner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Owner))
}

// Register mocks base method
func (m *MockIControllerRegistryManager) Register(ctx context.Context, controllerAddr common.Address) error {
	ret := m.ctrl.Call(m, "Register", ctx, controllerAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockIControllerRegistryManagerMockRecorder) Register(ctx, controllerAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Register), ctx, controllerAddr)
}

// RenounceOwnership mocks base method
func (m *MockIControllerRegistryManager) RenounceOwnership(ctx context.Context) error {
	ret := m.ctrl.Call(m, "RenounceOwnership", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RenounceOwnership indicates an expected call of RenounceOwnership
func (mr *MockIControllerRegistryManagerMockRecorder) RenounceOwnership(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenounceOwnership", reflect.TypeOf((*MockIControllerRegistryManager)(nil).RenounceOwnership), ctx)
}

// TransferOwnership mocks base method
func (m *MockIControllerRegistryManager) TransferOwnership(ctx context.Context, newOwner common.Address) error {
	ret := m.ctrl.Call(m, "TransferOwnership", ctx, newOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferOwnership indicates an expected call of TransferOwnership
func (mr *MockIControllerRegistryManagerMockRecorder) TransferOwnership(ctx, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferOwnership", reflect.TypeOf((*MockIControllerRegistryManager)(nil).TransferOwnership), ctx, newOwner)
}

// FilterOwnershipTransferred mocks base method
func (m *MockIControllerRegistryManager) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner, newOwner []common.Address) (*adapter.ControllerRegistryOwnershipTransferredIterator, error) {
	ret := m.ctrl.Call(m, "FilterOwnershipTransferred", opts, previousOwner, newOwner)
	ret0, _ := ret[0].(*adapter.ControllerRegistryOwnershipTransferredIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOwnershipTransferred indicates an expected call of FilterOwnershipTransferred
func (mr *MockIControllerRegistryManagerMockRecorder) FilterOwnershipTransferred(opts, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryManager)(nil).FilterOwnershipTransferred), opts, previousOwner, newOwner)
}

// WatchOwnershipTransferred mocks base method
func (m *MockIControllerRegistryManager) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryOwnershipTransferred, previousOwner, newOwner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOwnershipTransferred", opts, sink, previousOwner, newOwner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOwnershipTransferred indicates an expected call of WatchOwnershipTransferred
func (mr *MockIControllerRegistryManagerMockRecorder) WatchOwnershipTransferred(opts, sink, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryManager)(nil).WatchOwnershipTransferred), opts, sink, previousOwner, newOwner)
}

// FilterRegistration mocks base method
func (m *MockIControllerRegistryManager) FilterRegistration(opts *bind.FilterOpts, controller []common.Address) (*adapter.ControllerRegistryRegistrationIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts, controller)
	ret0, _ := ret[0].(*adapter.ControllerRegistryRegistrationIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIControllerRegistryManagerMockRecorder) FilterRegistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).FilterRegistration), opts, controller)
}

// WatchRegistration mocks base method
func (m *MockIControllerRegistryManager) WatchRegistration(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryRegistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIControllerRegistryManagerMockRecorder) WatchRegistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).WatchRegistration), opts, sink, controller)
}

// FilterUnregistration mocks base method
func (m *MockIControllerRegistryManager) FilterUnregistration(opts *bind.FilterOpts, controller []common.Address) (*adapter.ControllerRegistryUnregistrationIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts, controller)
	ret0, _ := ret[0].(*adapter.ControllerRegistryUnregistrationIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIControllerRegistryManagerMockRecorder) FilterUnregistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).FilterUnregistration), opts, controller)
}

// WatchUnregistration mocks base method
func (m *MockIControllerRegistryManager) WatchUnregistration(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryUnregistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIControllerRegistryManagerMockRecorder) WatchUnregistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).WatchUnregistration), opts, sink, controller)
}

// MockIControllerRegistryContract is a mock of IControllerRegistryContract interface
type MockIControllerRegistryContract struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerRegistryContractMockRecorder
}

// MockIControllerRegistryContractMockRecorder is the mock recorder for MockIControllerRegistryContract
type MockIControllerRegistryContractMockRecorder struct {
	mock *MockIControllerRegistryContract
}

// NewMockIControllerRegistryContract creates a new mock instance
func NewMockIControllerRegistryContract(ctrl *gomock.Controller) *MockIControllerRegistryContract {
	mock := &MockIControllerRegistryContract{ctrl: ctrl}
	mock.recorder = &MockIControllerRegistryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIControllerRegistryContract) EXPECT() *MockIControllerRegistryContractMockRecorder {
	return m.recorder
}

// Account mocks base method
func (m *MockIControllerRegistryContract) Account() common.Address {
	ret := m.ctrl.Call(m, "Account")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Account indicates an expected call of Account
func (mr *MockIControllerRegistryContractMockRecorder) Account() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Account", reflect.TypeOf((*MockIControllerRegistryContract)(nil).Account))
}

// TxHash mocks base method
func (m *MockIControllerRegistryContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIControllerRegistryContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIControllerRegistryContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIControllerRegistryContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIControllerRegistryContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIControllerRegistryContract)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIControllerRegistryContract) Exists(controller common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", controller)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIControllerRegistryContractMockRecorder) Exists(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIControllerRegistryContract)(nil).Exists), controller)
}

// Get mocks base method
func (m *MockIControllerRegistryContract) Get(controller common.Address) (types.DataController, error) {
	ret := m.ctrl.Call(m, "Get", controller)
	ret0, _ := ret[0].(types.DataController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIControllerRegistryContractMockRecorder) Get(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIControllerRegistryContract)(nil).Get), controller)
}

// IsOwner mocks base method
func (m *MockIControllerRegistryContract) IsOwner() (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIControllerRegistryContractMockRecorder) IsOwner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIControllerRegistryContract)(nil).IsOwner))
}

// Owner mocks base method
func (m *MockIControllerRegistryContract) Owner() (common.Address, error) {
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Owner indicates an expected call of Owner
func (mr *MockIControllerRegistryContractMockRecorder) Owner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockIControllerRegistryContract)(nil).Owner))
}

// Register mocks base method
func (m *MockIControllerRegistryContract) Register(ctx context.Context, controllerAddr common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Register", ctx, controllerAddr)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockIControllerRegistryContractMockRecorder) Register(ctx, controllerAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIControllerRegistryContract)(nil).Register), ctx, controllerAddr)
}

// RenounceOwnership mocks base method
func (m *MockIControllerRegistryContract) RenounceOwnership(ctx context.Context) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "RenounceOwnership", ctx)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenounceOwnership indicates an expected call of RenounceOwnership
func (mr *MockIControllerRegistryContractMockRecorder) RenounceOwnership(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenounceOwnership", reflect.TypeOf((*MockIControllerRegistryContract)(nil).RenounceOwnership), ctx)
}

// TransferOwnership mocks base method
func (m *MockIControllerRegistryContract) TransferOwnership(ctx context.Context, newOwner common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "TransferOwnership", ctx, newOwner)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferOwnership indicates an expected call of TransferOwnership
func (mr *MockIControllerRegistryContractMockRecorder) TransferOwnership(ctx, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferOwnership", reflect.TypeOf((*MockIControllerRegistryContract)(nil).TransferOwnership), ctx, newOwner)
}

// FilterOwnershipTransferred mocks base method
func (m *MockIControllerRegistryContract) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner, newOwner []common.Address) (*adapter.ControllerRegistryOwnershipTransferredIterator, error) {
	ret := m.ctrl.Call(m, "FilterOwnershipTransferred", opts, previousOwner, newOwner)
	ret0, _ := ret[0].(*adapter.ControllerRegistryOwnershipTransferredIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOwnershipTransferred indicates an expected call of FilterOwnershipTransferred
func (mr *MockIControllerRegistryContractMockRecorder) FilterOwnershipTransferred(opts, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryContract)(nil).FilterOwnershipTransferred), opts, previousOwner, newOwner)
}

// ParseOwnershipTransferredFromReceipt mocks base method
func (m *MockIControllerRegistryContract) ParseOwnershipTransferredFromReceipt(receipt *types0.Receipt) (*adapter.ControllerRegistryOwnershipTransferred, error) {
	ret := m.ctrl.Call(m, "ParseOwnershipTransferredFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ControllerRegistryOwnershipTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOwnershipTransferredFromReceipt indicates an expected call of ParseOwnershipTransferredFromReceipt
func (mr *MockIControllerRegistryContractMockRecorder) ParseOwnershipTransferredFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOwnershipTransferredFromReceipt", reflect.TypeOf((*MockIControllerRegistryContract)(nil).ParseOwnershipTransferredFromReceipt), receipt)
}

// WatchOwnershipTransferred mocks base method
func (m *MockIControllerRegistryContract) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryOwnershipTransferred, previousOwner, newOwner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOwnershipTransferred", opts, sink, previousOwner, newOwner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOwnershipTransferred indicates an expected call of WatchOwnershipTransferred
func (mr *MockIControllerRegistryContractMockRecorder) WatchOwnershipTransferred(opts, sink, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryContract)(nil).WatchOwnershipTransferred), opts, sink, previousOwner, newOwner)
}

// FilterRegistration mocks base method
func (m *MockIControllerRegistryContract) FilterRegistration(opts *bind.FilterOpts, controller []common.Address) (*adapter.ControllerRegistryRegistrationIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts, controller)
	ret0, _ := ret[0].(*adapter.ControllerRegistryRegistrationIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIControllerRegistryContractMockRecorder) FilterRegistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIControllerRegistryContract)(nil).FilterRegistration), opts, controller)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIControllerRegistryContract) ParseRegistrationFromReceipt(receipt *types0.Receipt) (*adapter.ControllerRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ControllerRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIControllerRegistryContractMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIControllerRegistryContract)(nil).ParseRegistrationFromReceipt), receipt)
}

// WatchRegistration mocks base method
func (m *MockIControllerRegistryContract) WatchRegistration(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryRegistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIControllerRegistryContractMockRecorder) WatchRegistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIControllerRegistryContract)(nil).WatchRegistration), opts, sink, controller)
}

// FilterUnregistration mocks base method
func (m *MockIControllerRegistryContract) FilterUnregistration(opts *bind.FilterOpts, controller []common.Address) (*adapter.ControllerRegistryUnregistrationIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts, controller)
	ret0, _ := ret[0].(*adapter.ControllerRegistryUnregistrationIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIControllerRegistryContractMockRecorder) FilterUnregistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIControllerRegistryContract)(nil).FilterUnregistration), opts, controller)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIControllerRegistryContract) ParseUnregistrationFromReceipt(receipt *types0.Receipt) (*adapter.ControllerRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ControllerRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIControllerRegistryContractMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIControllerRegistryContract)(nil).ParseUnregistrationFromReceipt), receipt)
}

// WatchUnregistration mocks base method
func (m *MockIControllerRegistryContract) WatchUnregistration(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryUnregistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIControllerRegistryContractMockRecorder) WatchUnregistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIControllerRegistryContract)(nil).WatchUnregistration), opts, sink, controller)
}

// MockIControllerRegistryCalls is a mock of IControllerRegistryCalls interface
type MockIControllerRegistryCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerRegistryCallsMockRecorder
}

// MockIControllerRegistryCallsMockRecorder is the mock recorder for MockIControllerRegistryCalls
type MockIControllerRegistryCallsMockRecorder struct {
	mock *MockIControllerRegistryCalls
}

// NewMockIControllerRegistryCalls creates a new mock instance
func NewMockIControllerRegistryCalls(ctrl *gomock.Controller) *MockIControllerRegistryCalls {
	mock := &MockIControllerRegistryCalls{ctrl: ctrl}
	mock.recorder = &MockIControllerRegistryCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIControllerRegistryCalls) EXPECT() *MockIControllerRegistryCallsMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockIControllerRegistryCalls) Exists(controller common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", controller)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIControllerRegistryCallsMockRecorder) Exists(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIControllerRegistryCalls)(nil).Exists), controller)
}

// Get mocks base method
func (m *MockIControllerRegistryCalls) Get(controller common.Address) (types.DataController, error) {
	ret := m.ctrl.Call(m, "Get", controller)
	ret0, _ := ret[0].(types.DataController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIControllerRegistryCallsMockRecorder) Get(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIControllerRegistryCalls)(nil).Get), controller)
}

// IsOwner mocks base method
func (m *MockIControllerRegistryCalls) IsOwner() (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIControllerRegistryCallsMockRecorder) IsOwner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIControllerRegistryCalls)(nil).IsOwner))
}

// Owner mocks base method
func (m *MockIControllerRegistryCalls) Owner() (common.Address, error) {
	ret := m.ctrl.Call(m, "Owner")
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Owner indicates an expected call of Owner
func (mr *MockIControllerRegistryCallsMockRecorder) Owner() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owner", reflect.TypeOf((*MockIControllerRegistryCalls)(nil).Owner))
}

// MockIControllerRegistryTransacts is a mock of IControllerRegistryTransacts interface
type MockIControllerRegistryTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerRegistryTransactsMockRecorder
}

// MockIControllerRegistryTransactsMockRecorder is the mock recorder for MockIControllerRegistryTransacts
type MockIControllerRegistryTransactsMockRecorder struct {
	mock *MockIControllerRegistryTransacts
}

// NewMockIControllerRegistryTransacts creates a new mock instance
func NewMockIControllerRegistryTransacts(ctrl *gomock.Controller) *MockIControllerRegistryTransacts {
	mock := &MockIControllerRegistryTransacts{ctrl: ctrl}
	mock.recorder = &MockIControllerRegistryTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIControllerRegistryTransacts) EXPECT() *MockIControllerRegistryTransactsMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockIControllerRegistryTransacts) Register(ctx context.Context, controllerAddr common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Register", ctx, controllerAddr)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockIControllerRegistryTransactsMockRecorder) Register(ctx, controllerAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIControllerRegistryTransacts)(nil).Register), ctx, controllerAddr)
}

// RenounceOwnership mocks base method
func (m *MockIControllerRegistryTransacts) RenounceOwnership(ctx context.Context) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "RenounceOwnership", ctx)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RenounceOwnership indicates an expected call of RenounceOwnership
func (mr *MockIControllerRegistryTransactsMockRecorder) RenounceOwnership(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RenounceOwnership", reflect.TypeOf((*MockIControllerRegistryTransacts)(nil).RenounceOwnership), ctx)
}

// TransferOwnership mocks base method
func (m *MockIControllerRegistryTransacts) TransferOwnership(ctx context.Context, newOwner common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "TransferOwnership", ctx, newOwner)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferOwnership indicates an expected call of TransferOwnership
func (mr *MockIControllerRegistryTransactsMockRecorder) TransferOwnership(ctx, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferOwnership", reflect.TypeOf((*MockIControllerRegistryTransacts)(nil).TransferOwnership), ctx, newOwner)
}

// MockIControllerRegistryEvents is a mock of IControllerRegistryEvents interface
type MockIControllerRegistryEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerRegistryEventsMockRecorder
}

// MockIControllerRegistryEventsMockRecorder is the mock recorder for MockIControllerRegistryEvents
type MockIControllerRegistryEventsMockRecorder struct {
	mock *MockIControllerRegistryEvents
}

// NewMockIControllerRegistryEvents creates a new mock instance
func NewMockIControllerRegistryEvents(ctrl *gomock.Controller) *MockIControllerRegistryEvents {
	mock := &MockIControllerRegistryEvents{ctrl: ctrl}
	mock.recorder = &MockIControllerRegistryEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIControllerRegistryEvents) EXPECT() *MockIControllerRegistryEventsMockRecorder {
	return m.recorder
}

// FilterOwnershipTransferred mocks base method
func (m *MockIControllerRegistryEvents) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner, newOwner []common.Address) (*adapter.ControllerRegistryOwnershipTransferredIterator, error) {
	ret := m.ctrl.Call(m, "FilterOwnershipTransferred", opts, previousOwner, newOwner)
	ret0, _ := ret[0].(*adapter.ControllerRegistryOwnershipTransferredIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOwnershipTransferred indicates an expected call of FilterOwnershipTransferred
func (mr *MockIControllerRegistryEventsMockRecorder) FilterOwnershipTransferred(opts, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).FilterOwnershipTransferred), opts, previousOwner, newOwner)
}

// ParseOwnershipTransferredFromReceipt mocks base method
func (m *MockIControllerRegistryEvents) ParseOwnershipTransferredFromReceipt(receipt *types0.Receipt) (*adapter.ControllerRegistryOwnershipTransferred, error) {
	ret := m.ctrl.Call(m, "ParseOwnershipTransferredFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ControllerRegistryOwnershipTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOwnershipTransferredFromReceipt indicates an expected call of ParseOwnershipTransferredFromReceipt
func (mr *MockIControllerRegistryEventsMockRecorder) ParseOwnershipTransferredFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOwnershipTransferredFromReceipt", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).ParseOwnershipTransferredFromReceipt), receipt)
}

// WatchOwnershipTransferred mocks base method
func (m *MockIControllerRegistryEvents) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryOwnershipTransferred, previousOwner, newOwner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOwnershipTransferred", opts, sink, previousOwner, newOwner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOwnershipTransferred indicates an expected call of WatchOwnershipTransferred
func (mr *MockIControllerRegistryEventsMockRecorder) WatchOwnershipTransferred(opts, sink, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).WatchOwnershipTransferred), opts, sink, previousOwner, newOwner)
}

// FilterRegistration mocks base method
func (m *MockIControllerRegistryEvents) FilterRegistration(opts *bind.FilterOpts, controller []common.Address) (*adapter.ControllerRegistryRegistrationIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts, controller)
	ret0, _ := ret[0].(*adapter.ControllerRegistryRegistrationIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIControllerRegistryEventsMockRecorder) FilterRegistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).FilterRegistration), opts, controller)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIControllerRegistryEvents) ParseRegistrationFromReceipt(receipt *types0.Receipt) (*adapter.ControllerRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ControllerRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIControllerRegistryEventsMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).ParseRegistrationFromReceipt), receipt)
}

// WatchRegistration mocks base method
func (m *MockIControllerRegistryEvents) WatchRegistration(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryRegistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIControllerRegistryEventsMockRecorder) WatchRegistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).WatchRegistration), opts, sink, controller)
}

// FilterUnregistration mocks base method
func (m *MockIControllerRegistryEvents) FilterUnregistration(opts *bind.FilterOpts, controller []common.Address) (*adapter.ControllerRegistryUnregistrationIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts, controller)
	ret0, _ := ret[0].(*adapter.ControllerRegistryUnregistrationIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIControllerRegistryEventsMockRecorder) FilterUnregistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).FilterUnregistration), opts, controller)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIControllerRegistryEvents) ParseUnregistrationFromReceipt(receipt *types0.Receipt) (*adapter.ControllerRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ControllerRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIControllerRegistryEventsMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).ParseUnregistrationFromReceipt), receipt)
}

// WatchUnregistration mocks base method
func (m *MockIControllerRegistryEvents) WatchUnregistration(opts *bind.WatchOpts, sink chan<- *adapter.ControllerRegistryUnregistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIControllerRegistryEventsMockRecorder) WatchUnregistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIControllerRegistryEvents)(nil).WatchUnregistration), opts, sink, controller)
}
