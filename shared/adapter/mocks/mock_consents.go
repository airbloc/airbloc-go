// Code generated by MockGen. DO NOT EDIT.
// Source: consents.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	adapter "github.com/airbloc/airbloc-go/shared/adapter"
	bind "github.com/airbloc/airbloc-go/shared/blockchain/bind"
	types "github.com/airbloc/airbloc-go/shared/types"
	common "github.com/ethereum/go-ethereum/common"
	types0 "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockIConsentsManager is a mock of IConsentsManager interface
type MockIConsentsManager struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsManagerMockRecorder
}

// MockIConsentsManagerMockRecorder is the mock recorder for MockIConsentsManager
type MockIConsentsManagerMockRecorder struct {
	mock *MockIConsentsManager
}

// NewMockIConsentsManager creates a new mock instance
func NewMockIConsentsManager(ctrl *gomock.Controller) *MockIConsentsManager {
	mock := &MockIConsentsManager{ctrl: ctrl}
	mock.recorder = &MockIConsentsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsManager) EXPECT() *MockIConsentsManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIConsentsManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIConsentsManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIConsentsManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIConsentsManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIConsentsManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIConsentsManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIConsentsManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIConsentsManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIConsentsManager)(nil).CreatedAt))
}

// IsAllowed mocks base method
func (m *MockIConsentsManager) IsAllowed(userId types.ID, appName string, action uint8, dataType string) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowed", userId, appName, action, dataType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockIConsentsManagerMockRecorder) IsAllowed(userId, appName, action, dataType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockIConsentsManager)(nil).IsAllowed), userId, appName, action, dataType)
}

// IsAllowedAt mocks base method
func (m *MockIConsentsManager) IsAllowedAt(userId types.ID, appName string, action uint8, dataType string, blockNumber *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowedAt", userId, appName, action, dataType, blockNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowedAt indicates an expected call of IsAllowedAt
func (mr *MockIConsentsManagerMockRecorder) IsAllowedAt(userId, appName, action, dataType, blockNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedAt", reflect.TypeOf((*MockIConsentsManager)(nil).IsAllowedAt), userId, appName, action, dataType, blockNumber)
}

// Consent mocks base method
func (m *MockIConsentsManager) Consent(ctx context.Context, action uint8, appName, dataType string, allowed bool) error {
	ret := m.ctrl.Call(m, "Consent", ctx, action, appName, dataType, allowed)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consent indicates an expected call of Consent
func (mr *MockIConsentsManagerMockRecorder) Consent(ctx, action, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consent", reflect.TypeOf((*MockIConsentsManager)(nil).Consent), ctx, action, appName, dataType, allowed)
}

// ConsentByController mocks base method
func (m *MockIConsentsManager) ConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool) error {
	ret := m.ctrl.Call(m, "ConsentByController", ctx, action, userId, appName, dataType, allowed)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsentByController indicates an expected call of ConsentByController
func (mr *MockIConsentsManagerMockRecorder) ConsentByController(ctx, action, userId, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentByController", reflect.TypeOf((*MockIConsentsManager)(nil).ConsentByController), ctx, action, userId, appName, dataType, allowed)
}

// ModifyConsentByController mocks base method
func (m *MockIConsentsManager) ModifyConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool, passwordSignature []byte) error {
	ret := m.ctrl.Call(m, "ModifyConsentByController", ctx, action, userId, appName, dataType, allowed, passwordSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyConsentByController indicates an expected call of ModifyConsentByController
func (mr *MockIConsentsManagerMockRecorder) ModifyConsentByController(ctx, action, userId, appName, dataType, allowed, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConsentByController", reflect.TypeOf((*MockIConsentsManager)(nil).ModifyConsentByController), ctx, action, userId, appName, dataType, allowed, passwordSignature)
}

// FilterConsented mocks base method
func (m *MockIConsentsManager) FilterConsented(opts *bind.FilterOpts, action []uint8, userId []types.ID, app []common.Hash) (*adapter.ConsentsConsentedIterator, error) {
	ret := m.ctrl.Call(m, "FilterConsented", opts, action, userId, app)
	ret0, _ := ret[0].(*adapter.ConsentsConsentedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterConsented indicates an expected call of FilterConsented
func (mr *MockIConsentsManagerMockRecorder) FilterConsented(opts, action, userId, app interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterConsented", reflect.TypeOf((*MockIConsentsManager)(nil).FilterConsented), opts, action, userId, app)
}

// WatchConsented mocks base method
func (m *MockIConsentsManager) WatchConsented(opts *bind.WatchOpts, sink chan<- *adapter.ConsentsConsented, action []uint8, userId []types.ID, app []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchConsented", opts, sink, action, userId, app)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsented indicates an expected call of WatchConsented
func (mr *MockIConsentsManagerMockRecorder) WatchConsented(opts, sink, action, userId, app interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsented", reflect.TypeOf((*MockIConsentsManager)(nil).WatchConsented), opts, sink, action, userId, app)
}

// MockIConsentsContract is a mock of IConsentsContract interface
type MockIConsentsContract struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsContractMockRecorder
}

// MockIConsentsContractMockRecorder is the mock recorder for MockIConsentsContract
type MockIConsentsContractMockRecorder struct {
	mock *MockIConsentsContract
}

// NewMockIConsentsContract creates a new mock instance
func NewMockIConsentsContract(ctrl *gomock.Controller) *MockIConsentsContract {
	mock := &MockIConsentsContract{ctrl: ctrl}
	mock.recorder = &MockIConsentsContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsContract) EXPECT() *MockIConsentsContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIConsentsContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIConsentsContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIConsentsContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockIConsentsContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIConsentsContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIConsentsContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIConsentsContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIConsentsContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIConsentsContract)(nil).CreatedAt))
}

// IsAllowed mocks base method
func (m *MockIConsentsContract) IsAllowed(userId types.ID, appName string, action uint8, dataType string) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowed", userId, appName, action, dataType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockIConsentsContractMockRecorder) IsAllowed(userId, appName, action, dataType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockIConsentsContract)(nil).IsAllowed), userId, appName, action, dataType)
}

// IsAllowedAt mocks base method
func (m *MockIConsentsContract) IsAllowedAt(userId types.ID, appName string, action uint8, dataType string, blockNumber *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowedAt", userId, appName, action, dataType, blockNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowedAt indicates an expected call of IsAllowedAt
func (mr *MockIConsentsContractMockRecorder) IsAllowedAt(userId, appName, action, dataType, blockNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedAt", reflect.TypeOf((*MockIConsentsContract)(nil).IsAllowedAt), userId, appName, action, dataType, blockNumber)
}

// Consent mocks base method
func (m *MockIConsentsContract) Consent(ctx context.Context, action uint8, appName, dataType string, allowed bool) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Consent", ctx, action, appName, dataType, allowed)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consent indicates an expected call of Consent
func (mr *MockIConsentsContractMockRecorder) Consent(ctx, action, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consent", reflect.TypeOf((*MockIConsentsContract)(nil).Consent), ctx, action, appName, dataType, allowed)
}

// ConsentByController mocks base method
func (m *MockIConsentsContract) ConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "ConsentByController", ctx, action, userId, appName, dataType, allowed)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsentByController indicates an expected call of ConsentByController
func (mr *MockIConsentsContractMockRecorder) ConsentByController(ctx, action, userId, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentByController", reflect.TypeOf((*MockIConsentsContract)(nil).ConsentByController), ctx, action, userId, appName, dataType, allowed)
}

// ModifyConsentByController mocks base method
func (m *MockIConsentsContract) ModifyConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool, passwordSignature []byte) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "ModifyConsentByController", ctx, action, userId, appName, dataType, allowed, passwordSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyConsentByController indicates an expected call of ModifyConsentByController
func (mr *MockIConsentsContractMockRecorder) ModifyConsentByController(ctx, action, userId, appName, dataType, allowed, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConsentByController", reflect.TypeOf((*MockIConsentsContract)(nil).ModifyConsentByController), ctx, action, userId, appName, dataType, allowed, passwordSignature)
}

// FilterConsented mocks base method
func (m *MockIConsentsContract) FilterConsented(opts *bind.FilterOpts, action []uint8, userId []types.ID, app []common.Hash) (*adapter.ConsentsConsentedIterator, error) {
	ret := m.ctrl.Call(m, "FilterConsented", opts, action, userId, app)
	ret0, _ := ret[0].(*adapter.ConsentsConsentedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterConsented indicates an expected call of FilterConsented
func (mr *MockIConsentsContractMockRecorder) FilterConsented(opts, action, userId, app interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterConsented", reflect.TypeOf((*MockIConsentsContract)(nil).FilterConsented), opts, action, userId, app)
}

// ParseConsentedFromReceipt mocks base method
func (m *MockIConsentsContract) ParseConsentedFromReceipt(receipt *types0.Receipt) (*adapter.ConsentsConsented, error) {
	ret := m.ctrl.Call(m, "ParseConsentedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ConsentsConsented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseConsentedFromReceipt indicates an expected call of ParseConsentedFromReceipt
func (mr *MockIConsentsContractMockRecorder) ParseConsentedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseConsentedFromReceipt", reflect.TypeOf((*MockIConsentsContract)(nil).ParseConsentedFromReceipt), receipt)
}

// WatchConsented mocks base method
func (m *MockIConsentsContract) WatchConsented(opts *bind.WatchOpts, sink chan<- *adapter.ConsentsConsented, action []uint8, userId []types.ID, app []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchConsented", opts, sink, action, userId, app)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsented indicates an expected call of WatchConsented
func (mr *MockIConsentsContractMockRecorder) WatchConsented(opts, sink, action, userId, app interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsented", reflect.TypeOf((*MockIConsentsContract)(nil).WatchConsented), opts, sink, action, userId, app)
}

// MockIConsentsCalls is a mock of IConsentsCalls interface
type MockIConsentsCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsCallsMockRecorder
}

// MockIConsentsCallsMockRecorder is the mock recorder for MockIConsentsCalls
type MockIConsentsCallsMockRecorder struct {
	mock *MockIConsentsCalls
}

// NewMockIConsentsCalls creates a new mock instance
func NewMockIConsentsCalls(ctrl *gomock.Controller) *MockIConsentsCalls {
	mock := &MockIConsentsCalls{ctrl: ctrl}
	mock.recorder = &MockIConsentsCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsCalls) EXPECT() *MockIConsentsCallsMockRecorder {
	return m.recorder
}

// IsAllowed mocks base method
func (m *MockIConsentsCalls) IsAllowed(userId types.ID, appName string, action uint8, dataType string) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowed", userId, appName, action, dataType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockIConsentsCallsMockRecorder) IsAllowed(userId, appName, action, dataType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockIConsentsCalls)(nil).IsAllowed), userId, appName, action, dataType)
}

// IsAllowedAt mocks base method
func (m *MockIConsentsCalls) IsAllowedAt(userId types.ID, appName string, action uint8, dataType string, blockNumber *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowedAt", userId, appName, action, dataType, blockNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowedAt indicates an expected call of IsAllowedAt
func (mr *MockIConsentsCallsMockRecorder) IsAllowedAt(userId, appName, action, dataType, blockNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedAt", reflect.TypeOf((*MockIConsentsCalls)(nil).IsAllowedAt), userId, appName, action, dataType, blockNumber)
}

// MockIConsentsTransacts is a mock of IConsentsTransacts interface
type MockIConsentsTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsTransactsMockRecorder
}

// MockIConsentsTransactsMockRecorder is the mock recorder for MockIConsentsTransacts
type MockIConsentsTransactsMockRecorder struct {
	mock *MockIConsentsTransacts
}

// NewMockIConsentsTransacts creates a new mock instance
func NewMockIConsentsTransacts(ctrl *gomock.Controller) *MockIConsentsTransacts {
	mock := &MockIConsentsTransacts{ctrl: ctrl}
	mock.recorder = &MockIConsentsTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsTransacts) EXPECT() *MockIConsentsTransactsMockRecorder {
	return m.recorder
}

// Consent mocks base method
func (m *MockIConsentsTransacts) Consent(ctx context.Context, action uint8, appName, dataType string, allowed bool) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Consent", ctx, action, appName, dataType, allowed)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consent indicates an expected call of Consent
func (mr *MockIConsentsTransactsMockRecorder) Consent(ctx, action, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consent", reflect.TypeOf((*MockIConsentsTransacts)(nil).Consent), ctx, action, appName, dataType, allowed)
}

// ConsentByController mocks base method
func (m *MockIConsentsTransacts) ConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "ConsentByController", ctx, action, userId, appName, dataType, allowed)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsentByController indicates an expected call of ConsentByController
func (mr *MockIConsentsTransactsMockRecorder) ConsentByController(ctx, action, userId, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentByController", reflect.TypeOf((*MockIConsentsTransacts)(nil).ConsentByController), ctx, action, userId, appName, dataType, allowed)
}

// ModifyConsentByController mocks base method
func (m *MockIConsentsTransacts) ModifyConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool, passwordSignature []byte) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "ModifyConsentByController", ctx, action, userId, appName, dataType, allowed, passwordSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyConsentByController indicates an expected call of ModifyConsentByController
func (mr *MockIConsentsTransactsMockRecorder) ModifyConsentByController(ctx, action, userId, appName, dataType, allowed, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConsentByController", reflect.TypeOf((*MockIConsentsTransacts)(nil).ModifyConsentByController), ctx, action, userId, appName, dataType, allowed, passwordSignature)
}

// MockIConsentsEvents is a mock of IConsentsEvents interface
type MockIConsentsEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsEventsMockRecorder
}

// MockIConsentsEventsMockRecorder is the mock recorder for MockIConsentsEvents
type MockIConsentsEventsMockRecorder struct {
	mock *MockIConsentsEvents
}

// NewMockIConsentsEvents creates a new mock instance
func NewMockIConsentsEvents(ctrl *gomock.Controller) *MockIConsentsEvents {
	mock := &MockIConsentsEvents{ctrl: ctrl}
	mock.recorder = &MockIConsentsEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsEvents) EXPECT() *MockIConsentsEventsMockRecorder {
	return m.recorder
}

// FilterConsented mocks base method
func (m *MockIConsentsEvents) FilterConsented(opts *bind.FilterOpts, action []uint8, userId []types.ID, app []common.Hash) (*adapter.ConsentsConsentedIterator, error) {
	ret := m.ctrl.Call(m, "FilterConsented", opts, action, userId, app)
	ret0, _ := ret[0].(*adapter.ConsentsConsentedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterConsented indicates an expected call of FilterConsented
func (mr *MockIConsentsEventsMockRecorder) FilterConsented(opts, action, userId, app interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterConsented", reflect.TypeOf((*MockIConsentsEvents)(nil).FilterConsented), opts, action, userId, app)
}

// ParseConsentedFromReceipt mocks base method
func (m *MockIConsentsEvents) ParseConsentedFromReceipt(receipt *types0.Receipt) (*adapter.ConsentsConsented, error) {
	ret := m.ctrl.Call(m, "ParseConsentedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ConsentsConsented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseConsentedFromReceipt indicates an expected call of ParseConsentedFromReceipt
func (mr *MockIConsentsEventsMockRecorder) ParseConsentedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseConsentedFromReceipt", reflect.TypeOf((*MockIConsentsEvents)(nil).ParseConsentedFromReceipt), receipt)
}

// WatchConsented mocks base method
func (m *MockIConsentsEvents) WatchConsented(opts *bind.WatchOpts, sink chan<- *adapter.ConsentsConsented, action []uint8, userId []types.ID, app []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchConsented", opts, sink, action, userId, app)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsented indicates an expected call of WatchConsented
func (mr *MockIConsentsEventsMockRecorder) WatchConsented(opts, sink, action, userId, app interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsented", reflect.TypeOf((*MockIConsentsEvents)(nil).WatchConsented), opts, sink, action, userId, app)
}
