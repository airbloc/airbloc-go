// Code generated by MockGen. DO NOT EDIT.
// Source: consents.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	adapter "github.com/airbloc/airbloc-go/shared/adapter"
	types "github.com/airbloc/airbloc-go/shared/types"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIConsentsManager is a mock of IConsentsManager interface
type MockIConsentsManager struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsManagerMockRecorder
}

// MockIConsentsManagerMockRecorder is the mock recorder for MockIConsentsManager
type MockIConsentsManagerMockRecorder struct {
	mock *MockIConsentsManager
}

// NewMockIConsentsManager creates a new mock instance
func NewMockIConsentsManager(ctrl *gomock.Controller) *MockIConsentsManager {
	mock := &MockIConsentsManager{ctrl: ctrl}
	mock.recorder = &MockIConsentsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsManager) EXPECT() *MockIConsentsManagerMockRecorder {
	return m.recorder
}

// IsAllowed mocks base method
func (m *MockIConsentsManager) IsAllowed(action uint8, userId types.ID, appName, dataType string) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowed", action, userId, appName, dataType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockIConsentsManagerMockRecorder) IsAllowed(action, userId, appName, dataType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockIConsentsManager)(nil).IsAllowed), action, userId, appName, dataType)
}

// IsAllowedAt mocks base method
func (m *MockIConsentsManager) IsAllowedAt(action uint8, userId types.ID, appName, dataType string, blockNumber *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowedAt", action, userId, appName, dataType, blockNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowedAt indicates an expected call of IsAllowedAt
func (mr *MockIConsentsManagerMockRecorder) IsAllowedAt(action, userId, appName, dataType, blockNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedAt", reflect.TypeOf((*MockIConsentsManager)(nil).IsAllowedAt), action, userId, appName, dataType, blockNumber)
}

// Consent mocks base method
func (m *MockIConsentsManager) Consent(ctx context.Context, action uint8, appName, dataType string, allowed bool) error {
	ret := m.ctrl.Call(m, "Consent", ctx, action, appName, dataType, allowed)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consent indicates an expected call of Consent
func (mr *MockIConsentsManagerMockRecorder) Consent(ctx, action, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consent", reflect.TypeOf((*MockIConsentsManager)(nil).Consent), ctx, action, appName, dataType, allowed)
}

// ConsentByController mocks base method
func (m *MockIConsentsManager) ConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool) error {
	ret := m.ctrl.Call(m, "ConsentByController", ctx, action, userId, appName, dataType, allowed)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsentByController indicates an expected call of ConsentByController
func (mr *MockIConsentsManagerMockRecorder) ConsentByController(ctx, action, userId, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentByController", reflect.TypeOf((*MockIConsentsManager)(nil).ConsentByController), ctx, action, userId, appName, dataType, allowed)
}

// ModifyConsentByController mocks base method
func (m *MockIConsentsManager) ModifyConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool, passwordSignature []byte) error {
	ret := m.ctrl.Call(m, "ModifyConsentByController", ctx, action, userId, appName, dataType, allowed, passwordSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyConsentByController indicates an expected call of ModifyConsentByController
func (mr *MockIConsentsManagerMockRecorder) ModifyConsentByController(ctx, action, userId, appName, dataType, allowed, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConsentByController", reflect.TypeOf((*MockIConsentsManager)(nil).ModifyConsentByController), ctx, action, userId, appName, dataType, allowed, passwordSignature)
}

// MockIConsentsContract is a mock of IConsentsContract interface
type MockIConsentsContract struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsContractMockRecorder
}

// MockIConsentsContractMockRecorder is the mock recorder for MockIConsentsContract
type MockIConsentsContractMockRecorder struct {
	mock *MockIConsentsContract
}

// NewMockIConsentsContract creates a new mock instance
func NewMockIConsentsContract(ctrl *gomock.Controller) *MockIConsentsContract {
	mock := &MockIConsentsContract{ctrl: ctrl}
	mock.recorder = &MockIConsentsContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsContract) EXPECT() *MockIConsentsContractMockRecorder {
	return m.recorder
}

// IsAllowed mocks base method
func (m *MockIConsentsContract) IsAllowed(action uint8, userId types.ID, appName, dataType string) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowed", action, userId, appName, dataType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockIConsentsContractMockRecorder) IsAllowed(action, userId, appName, dataType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockIConsentsContract)(nil).IsAllowed), action, userId, appName, dataType)
}

// IsAllowedAt mocks base method
func (m *MockIConsentsContract) IsAllowedAt(action uint8, userId types.ID, appName, dataType string, blockNumber *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowedAt", action, userId, appName, dataType, blockNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowedAt indicates an expected call of IsAllowedAt
func (mr *MockIConsentsContractMockRecorder) IsAllowedAt(action, userId, appName, dataType, blockNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedAt", reflect.TypeOf((*MockIConsentsContract)(nil).IsAllowedAt), action, userId, appName, dataType, blockNumber)
}

// Consent mocks base method
func (m *MockIConsentsContract) Consent(ctx context.Context, action uint8, appName, dataType string, allowed bool) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Consent", ctx, action, appName, dataType, allowed)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Consent indicates an expected call of Consent
func (mr *MockIConsentsContractMockRecorder) Consent(ctx, action, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consent", reflect.TypeOf((*MockIConsentsContract)(nil).Consent), ctx, action, appName, dataType, allowed)
}

// ConsentByController mocks base method
func (m *MockIConsentsContract) ConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "ConsentByController", ctx, action, userId, appName, dataType, allowed)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ConsentByController indicates an expected call of ConsentByController
func (mr *MockIConsentsContractMockRecorder) ConsentByController(ctx, action, userId, appName, dataType, allowed interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentByController", reflect.TypeOf((*MockIConsentsContract)(nil).ConsentByController), ctx, action, userId, appName, dataType, allowed)
}

// ModifyConsentByController mocks base method
func (m *MockIConsentsContract) ModifyConsentByController(ctx context.Context, action uint8, userId types.ID, appName, dataType string, allowed bool, passwordSignature []byte) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "ModifyConsentByController", ctx, action, userId, appName, dataType, allowed, passwordSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyConsentByController indicates an expected call of ModifyConsentByController
func (mr *MockIConsentsContractMockRecorder) ModifyConsentByController(ctx, action, userId, appName, dataType, allowed, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConsentByController", reflect.TypeOf((*MockIConsentsContract)(nil).ModifyConsentByController), ctx, action, userId, appName, dataType, allowed, passwordSignature)
}

// ParseConsentedFromReceipt mocks base method
func (m *MockIConsentsContract) ParseConsentedFromReceipt(receipt *types0.Receipt) (*adapter.ConsentsConsented, error) {
	ret := m.ctrl.Call(m, "ParseConsentedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.ConsentsConsented)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseConsentedFromReceipt indicates an expected call of ParseConsentedFromReceipt
func (mr *MockIConsentsContractMockRecorder) ParseConsentedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseConsentedFromReceipt", reflect.TypeOf((*MockIConsentsContract)(nil).ParseConsentedFromReceipt), receipt)
}
