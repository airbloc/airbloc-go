// Code generated by MockGen. DO NOT EDIT.
// Source: app_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	adapter "github.com/airbloc/airbloc-go/shared/adapter"
	types "github.com/airbloc/airbloc-go/shared/types"
	common "github.com/ethereum/go-ethereum/common"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIAppRegistryManager is a mock of IAppRegistryManager interface
type MockIAppRegistryManager struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryManagerMockRecorder
}

// MockIAppRegistryManagerMockRecorder is the mock recorder for MockIAppRegistryManager
type MockIAppRegistryManagerMockRecorder struct {
	mock *MockIAppRegistryManager
}

// NewMockIAppRegistryManager creates a new mock instance
func NewMockIAppRegistryManager(ctrl *gomock.Controller) *MockIAppRegistryManager {
	mock := &MockIAppRegistryManager{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryManager) EXPECT() *MockIAppRegistryManagerMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockIAppRegistryManager) Exists(appName string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", appName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAppRegistryManagerMockRecorder) Exists(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAppRegistryManager)(nil).Exists), appName)
}

// Get mocks base method
func (m *MockIAppRegistryManager) Get(appName string) (types.App, error) {
	ret := m.ctrl.Call(m, "Get", appName)
	ret0, _ := ret[0].(types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIAppRegistryManagerMockRecorder) Get(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAppRegistryManager)(nil).Get), appName)
}

// IsOwner mocks base method
func (m *MockIAppRegistryManager) IsOwner(appName string, owner common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner", appName, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIAppRegistryManagerMockRecorder) IsOwner(appName, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIAppRegistryManager)(nil).IsOwner), appName, owner)
}

// Register mocks base method
func (m *MockIAppRegistryManager) Register(ctx context.Context, appName string) error {
	ret := m.ctrl.Call(m, "Register", ctx, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockIAppRegistryManagerMockRecorder) Register(ctx, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAppRegistryManager)(nil).Register), ctx, appName)
}

// TransferAppOwner mocks base method
func (m *MockIAppRegistryManager) TransferAppOwner(ctx context.Context, appName string, newOwner common.Address) error {
	ret := m.ctrl.Call(m, "TransferAppOwner", ctx, appName, newOwner)
	ret0, _ := ret[0].(error)
	return ret0
}

// TransferAppOwner indicates an expected call of TransferAppOwner
func (mr *MockIAppRegistryManagerMockRecorder) TransferAppOwner(ctx, appName, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAppOwner", reflect.TypeOf((*MockIAppRegistryManager)(nil).TransferAppOwner), ctx, appName, newOwner)
}

// Unregister mocks base method
func (m *MockIAppRegistryManager) Unregister(ctx context.Context, appName string) error {
	ret := m.ctrl.Call(m, "Unregister", ctx, appName)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unregister indicates an expected call of Unregister
func (mr *MockIAppRegistryManagerMockRecorder) Unregister(ctx, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockIAppRegistryManager)(nil).Unregister), ctx, appName)
}

// MockIAppRegistryContract is a mock of IAppRegistryContract interface
type MockIAppRegistryContract struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryContractMockRecorder
}

// MockIAppRegistryContractMockRecorder is the mock recorder for MockIAppRegistryContract
type MockIAppRegistryContractMockRecorder struct {
	mock *MockIAppRegistryContract
}

// NewMockIAppRegistryContract creates a new mock instance
func NewMockIAppRegistryContract(ctrl *gomock.Controller) *MockIAppRegistryContract {
	mock := &MockIAppRegistryContract{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryContract) EXPECT() *MockIAppRegistryContractMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockIAppRegistryContract) Exists(appName string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", appName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAppRegistryContractMockRecorder) Exists(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAppRegistryContract)(nil).Exists), appName)
}

// Get mocks base method
func (m *MockIAppRegistryContract) Get(appName string) (types.App, error) {
	ret := m.ctrl.Call(m, "Get", appName)
	ret0, _ := ret[0].(types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIAppRegistryContractMockRecorder) Get(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAppRegistryContract)(nil).Get), appName)
}

// IsOwner mocks base method
func (m *MockIAppRegistryContract) IsOwner(appName string, owner common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner", appName, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIAppRegistryContractMockRecorder) IsOwner(appName, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIAppRegistryContract)(nil).IsOwner), appName, owner)
}

// Register mocks base method
func (m *MockIAppRegistryContract) Register(ctx context.Context, appName string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Register", ctx, appName)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockIAppRegistryContractMockRecorder) Register(ctx, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAppRegistryContract)(nil).Register), ctx, appName)
}

// TransferAppOwner mocks base method
func (m *MockIAppRegistryContract) TransferAppOwner(ctx context.Context, appName string, newOwner common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "TransferAppOwner", ctx, appName, newOwner)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferAppOwner indicates an expected call of TransferAppOwner
func (mr *MockIAppRegistryContractMockRecorder) TransferAppOwner(ctx, appName, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAppOwner", reflect.TypeOf((*MockIAppRegistryContract)(nil).TransferAppOwner), ctx, appName, newOwner)
}

// Unregister mocks base method
func (m *MockIAppRegistryContract) Unregister(ctx context.Context, appName string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Unregister", ctx, appName)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unregister indicates an expected call of Unregister
func (mr *MockIAppRegistryContractMockRecorder) Unregister(ctx, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockIAppRegistryContract)(nil).Unregister), ctx, appName)
}

// ParseAppOwnerTransferredFromReceipt mocks base method
func (m *MockIAppRegistryContract) ParseAppOwnerTransferredFromReceipt(receipt *types0.Receipt) (*adapter.AppRegistryAppOwnerTransferred, error) {
	ret := m.ctrl.Call(m, "ParseAppOwnerTransferredFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AppRegistryAppOwnerTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppOwnerTransferredFromReceipt indicates an expected call of ParseAppOwnerTransferredFromReceipt
func (mr *MockIAppRegistryContractMockRecorder) ParseAppOwnerTransferredFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppOwnerTransferredFromReceipt", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseAppOwnerTransferredFromReceipt), receipt)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIAppRegistryContract) ParseRegistrationFromReceipt(receipt *types0.Receipt) (*adapter.AppRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AppRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIAppRegistryContractMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseRegistrationFromReceipt), receipt)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIAppRegistryContract) ParseUnregistrationFromReceipt(receipt *types0.Receipt) (*adapter.AppRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AppRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIAppRegistryContractMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseUnregistrationFromReceipt), receipt)
}
