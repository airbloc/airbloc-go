// Code generated by MockGen. DO NOT EDIT.
// Source: accounts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	adapter "github.com/airbloc/airbloc-go/shared/adapter"
	bind "github.com/airbloc/airbloc-go/shared/blockchain/bind"
	types "github.com/airbloc/airbloc-go/shared/types"
	common "github.com/ethereum/go-ethereum/common"
	types0 "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	gomock "github.com/golang/mock/gomock"
)

// MockIAccountsManager is a mock of IAccountsManager interface
type MockIAccountsManager struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsManagerMockRecorder
}

// MockIAccountsManagerMockRecorder is the mock recorder for MockIAccountsManager
type MockIAccountsManagerMockRecorder struct {
	mock *MockIAccountsManager
}

// NewMockIAccountsManager creates a new mock instance
func NewMockIAccountsManager(ctrl *gomock.Controller) *MockIAccountsManager {
	mock := &MockIAccountsManager{ctrl: ctrl}
	mock.recorder = &MockIAccountsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsManager) EXPECT() *MockIAccountsManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIAccountsManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIAccountsManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIAccountsManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIAccountsManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIAccountsManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIAccountsManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIAccountsManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIAccountsManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIAccountsManager)(nil).CreatedAt))
}

// Accounts mocks base method
func (m *MockIAccountsManager) Accounts(arg0 types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts
func (mr *MockIAccountsManagerMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockIAccountsManager)(nil).Accounts), arg0)
}

// Exists mocks base method
func (m *MockIAccountsManager) Exists(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAccountsManagerMockRecorder) Exists(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAccountsManager)(nil).Exists), accountId)
}

// GetAccount mocks base method
func (m *MockIAccountsManager) GetAccount(accountId types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockIAccountsManagerMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccount), accountId)
}

// GetAccountId mocks base method
func (m *MockIAccountsManager) GetAccountId(sender common.Address) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountId", sender)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountId indicates an expected call of GetAccountId
func (mr *MockIAccountsManagerMockRecorder) GetAccountId(sender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccountId), sender)
}

// GetAccountIdFromSignature mocks base method
func (m *MockIAccountsManager) GetAccountIdFromSignature(messageHash common.Hash, signature []byte) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdFromSignature", messageHash, signature)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdFromSignature indicates an expected call of GetAccountIdFromSignature
func (mr *MockIAccountsManagerMockRecorder) GetAccountIdFromSignature(messageHash, signature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdFromSignature", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccountIdFromSignature), messageHash, signature)
}

// IdentityHashToAccount mocks base method
func (m *MockIAccountsManager) IdentityHashToAccount(arg0 common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "IdentityHashToAccount", arg0)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentityHashToAccount indicates an expected call of IdentityHashToAccount
func (mr *MockIAccountsManagerMockRecorder) IdentityHashToAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityHashToAccount", reflect.TypeOf((*MockIAccountsManager)(nil).IdentityHashToAccount), arg0)
}

// IsControllerOf mocks base method
func (m *MockIAccountsManager) IsControllerOf(sender common.Address, accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsControllerOf", sender, accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerOf indicates an expected call of IsControllerOf
func (mr *MockIAccountsManagerMockRecorder) IsControllerOf(sender, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerOf", reflect.TypeOf((*MockIAccountsManager)(nil).IsControllerOf), sender, accountId)
}

// IsTemporary mocks base method
func (m *MockIAccountsManager) IsTemporary(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTemporary", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTemporary indicates an expected call of IsTemporary
func (mr *MockIAccountsManagerMockRecorder) IsTemporary(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockIAccountsManager)(nil).IsTemporary), accountId)
}

// NumberOfAccounts mocks base method
func (m *MockIAccountsManager) NumberOfAccounts() (*big.Int, error) {
	ret := m.ctrl.Call(m, "NumberOfAccounts")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfAccounts indicates an expected call of NumberOfAccounts
func (mr *MockIAccountsManagerMockRecorder) NumberOfAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfAccounts", reflect.TypeOf((*MockIAccountsManager)(nil).NumberOfAccounts))
}

// Create mocks base method
func (m *MockIAccountsManager) Create(ctx context.Context) (types.ID, error) {
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIAccountsManagerMockRecorder) Create(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountsManager)(nil).Create), ctx)
}

// CreateTemporary mocks base method
func (m *MockIAccountsManager) CreateTemporary(ctx context.Context, identityHash common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "CreateTemporary", ctx, identityHash)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporary indicates an expected call of CreateTemporary
func (mr *MockIAccountsManagerMockRecorder) CreateTemporary(ctx, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporary", reflect.TypeOf((*MockIAccountsManager)(nil).CreateTemporary), ctx, identityHash)
}

// SetController mocks base method
func (m *MockIAccountsManager) SetController(ctx context.Context, controller common.Address) error {
	ret := m.ctrl.Call(m, "SetController", ctx, controller)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetController indicates an expected call of SetController
func (mr *MockIAccountsManagerMockRecorder) SetController(ctx, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetController", reflect.TypeOf((*MockIAccountsManager)(nil).SetController), ctx, controller)
}

// UnlockTemporary mocks base method
func (m *MockIAccountsManager) UnlockTemporary(ctx context.Context, identityPreimage common.Hash, newOwner common.Address, passwordSignature []byte) error {
	ret := m.ctrl.Call(m, "UnlockTemporary", ctx, identityPreimage, newOwner, passwordSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockTemporary indicates an expected call of UnlockTemporary
func (mr *MockIAccountsManagerMockRecorder) UnlockTemporary(ctx, identityPreimage, newOwner, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTemporary", reflect.TypeOf((*MockIAccountsManager)(nil).UnlockTemporary), ctx, identityPreimage, newOwner, passwordSignature)
}

// FilterControllerChanged mocks base method
func (m *MockIAccountsManager) FilterControllerChanged(opts *bind.FilterOpts, prevController, newController []common.Address) (*adapter.AccountsControllerChangedIterator, error) {
	ret := m.ctrl.Call(m, "FilterControllerChanged", opts, prevController, newController)
	ret0, _ := ret[0].(*adapter.AccountsControllerChangedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterControllerChanged indicates an expected call of FilterControllerChanged
func (mr *MockIAccountsManagerMockRecorder) FilterControllerChanged(opts, prevController, newController interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterControllerChanged", reflect.TypeOf((*MockIAccountsManager)(nil).FilterControllerChanged), opts, prevController, newController)
}

// WatchControllerChanged mocks base method
func (m *MockIAccountsManager) WatchControllerChanged(opts *bind.WatchOpts, sink chan<- *adapter.AccountsControllerChanged, prevController, newController []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchControllerChanged", opts, sink, prevController, newController)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerChanged indicates an expected call of WatchControllerChanged
func (mr *MockIAccountsManagerMockRecorder) WatchControllerChanged(opts, sink, prevController, newController interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerChanged", reflect.TypeOf((*MockIAccountsManager)(nil).WatchControllerChanged), opts, sink, prevController, newController)
}

// FilterSignUp mocks base method
func (m *MockIAccountsManager) FilterSignUp(opts *bind.FilterOpts, owner []common.Address) (*adapter.AccountsSignUpIterator, error) {
	ret := m.ctrl.Call(m, "FilterSignUp", opts, owner)
	ret0, _ := ret[0].(*adapter.AccountsSignUpIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSignUp indicates an expected call of FilterSignUp
func (mr *MockIAccountsManagerMockRecorder) FilterSignUp(opts, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSignUp", reflect.TypeOf((*MockIAccountsManager)(nil).FilterSignUp), opts, owner)
}

// WatchSignUp mocks base method
func (m *MockIAccountsManager) WatchSignUp(opts *bind.WatchOpts, sink chan<- *adapter.AccountsSignUp, owner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchSignUp", opts, sink, owner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSignUp indicates an expected call of WatchSignUp
func (mr *MockIAccountsManagerMockRecorder) WatchSignUp(opts, sink, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSignUp", reflect.TypeOf((*MockIAccountsManager)(nil).WatchSignUp), opts, sink, owner)
}

// FilterTemporaryCreated mocks base method
func (m *MockIAccountsManager) FilterTemporaryCreated(opts *bind.FilterOpts, proxy []common.Address, identityHash []common.Hash) (*adapter.AccountsTemporaryCreatedIterator, error) {
	ret := m.ctrl.Call(m, "FilterTemporaryCreated", opts, proxy, identityHash)
	ret0, _ := ret[0].(*adapter.AccountsTemporaryCreatedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTemporaryCreated indicates an expected call of FilterTemporaryCreated
func (mr *MockIAccountsManagerMockRecorder) FilterTemporaryCreated(opts, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTemporaryCreated", reflect.TypeOf((*MockIAccountsManager)(nil).FilterTemporaryCreated), opts, proxy, identityHash)
}

// WatchTemporaryCreated mocks base method
func (m *MockIAccountsManager) WatchTemporaryCreated(opts *bind.WatchOpts, sink chan<- *adapter.AccountsTemporaryCreated, proxy []common.Address, identityHash []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTemporaryCreated", opts, sink, proxy, identityHash)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTemporaryCreated indicates an expected call of WatchTemporaryCreated
func (mr *MockIAccountsManagerMockRecorder) WatchTemporaryCreated(opts, sink, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTemporaryCreated", reflect.TypeOf((*MockIAccountsManager)(nil).WatchTemporaryCreated), opts, sink, proxy, identityHash)
}

// FilterUnlocked mocks base method
func (m *MockIAccountsManager) FilterUnlocked(opts *bind.FilterOpts, identityHash []common.Hash, accountId []types.ID) (*adapter.AccountsUnlockedIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnlocked", opts, identityHash, accountId)
	ret0, _ := ret[0].(*adapter.AccountsUnlockedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnlocked indicates an expected call of FilterUnlocked
func (mr *MockIAccountsManagerMockRecorder) FilterUnlocked(opts, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnlocked", reflect.TypeOf((*MockIAccountsManager)(nil).FilterUnlocked), opts, identityHash, accountId)
}

// WatchUnlocked mocks base method
func (m *MockIAccountsManager) WatchUnlocked(opts *bind.WatchOpts, sink chan<- *adapter.AccountsUnlocked, identityHash []common.Hash, accountId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnlocked", opts, sink, identityHash, accountId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnlocked indicates an expected call of WatchUnlocked
func (mr *MockIAccountsManagerMockRecorder) WatchUnlocked(opts, sink, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnlocked", reflect.TypeOf((*MockIAccountsManager)(nil).WatchUnlocked), opts, sink, identityHash, accountId)
}

// MockIAccountsContract is a mock of IAccountsContract interface
type MockIAccountsContract struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsContractMockRecorder
}

// MockIAccountsContractMockRecorder is the mock recorder for MockIAccountsContract
type MockIAccountsContractMockRecorder struct {
	mock *MockIAccountsContract
}

// NewMockIAccountsContract creates a new mock instance
func NewMockIAccountsContract(ctrl *gomock.Controller) *MockIAccountsContract {
	mock := &MockIAccountsContract{ctrl: ctrl}
	mock.recorder = &MockIAccountsContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsContract) EXPECT() *MockIAccountsContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIAccountsContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIAccountsContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIAccountsContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockIAccountsContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIAccountsContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIAccountsContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIAccountsContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIAccountsContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIAccountsContract)(nil).CreatedAt))
}

// Accounts mocks base method
func (m *MockIAccountsContract) Accounts(arg0 types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts
func (mr *MockIAccountsContractMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockIAccountsContract)(nil).Accounts), arg0)
}

// Exists mocks base method
func (m *MockIAccountsContract) Exists(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAccountsContractMockRecorder) Exists(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAccountsContract)(nil).Exists), accountId)
}

// GetAccount mocks base method
func (m *MockIAccountsContract) GetAccount(accountId types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockIAccountsContractMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccount), accountId)
}

// GetAccountId mocks base method
func (m *MockIAccountsContract) GetAccountId(sender common.Address) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountId", sender)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountId indicates an expected call of GetAccountId
func (mr *MockIAccountsContractMockRecorder) GetAccountId(sender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccountId), sender)
}

// GetAccountIdFromSignature mocks base method
func (m *MockIAccountsContract) GetAccountIdFromSignature(messageHash common.Hash, signature []byte) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdFromSignature", messageHash, signature)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdFromSignature indicates an expected call of GetAccountIdFromSignature
func (mr *MockIAccountsContractMockRecorder) GetAccountIdFromSignature(messageHash, signature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdFromSignature", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccountIdFromSignature), messageHash, signature)
}

// IdentityHashToAccount mocks base method
func (m *MockIAccountsContract) IdentityHashToAccount(arg0 common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "IdentityHashToAccount", arg0)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentityHashToAccount indicates an expected call of IdentityHashToAccount
func (mr *MockIAccountsContractMockRecorder) IdentityHashToAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityHashToAccount", reflect.TypeOf((*MockIAccountsContract)(nil).IdentityHashToAccount), arg0)
}

// IsControllerOf mocks base method
func (m *MockIAccountsContract) IsControllerOf(sender common.Address, accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsControllerOf", sender, accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerOf indicates an expected call of IsControllerOf
func (mr *MockIAccountsContractMockRecorder) IsControllerOf(sender, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerOf", reflect.TypeOf((*MockIAccountsContract)(nil).IsControllerOf), sender, accountId)
}

// IsTemporary mocks base method
func (m *MockIAccountsContract) IsTemporary(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTemporary", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTemporary indicates an expected call of IsTemporary
func (mr *MockIAccountsContractMockRecorder) IsTemporary(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockIAccountsContract)(nil).IsTemporary), accountId)
}

// NumberOfAccounts mocks base method
func (m *MockIAccountsContract) NumberOfAccounts() (*big.Int, error) {
	ret := m.ctrl.Call(m, "NumberOfAccounts")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfAccounts indicates an expected call of NumberOfAccounts
func (mr *MockIAccountsContractMockRecorder) NumberOfAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfAccounts", reflect.TypeOf((*MockIAccountsContract)(nil).NumberOfAccounts))
}

// Create mocks base method
func (m *MockIAccountsContract) Create(ctx context.Context) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIAccountsContractMockRecorder) Create(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountsContract)(nil).Create), ctx)
}

// CreateTemporary mocks base method
func (m *MockIAccountsContract) CreateTemporary(ctx context.Context, identityHash common.Hash) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "CreateTemporary", ctx, identityHash)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporary indicates an expected call of CreateTemporary
func (mr *MockIAccountsContractMockRecorder) CreateTemporary(ctx, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporary", reflect.TypeOf((*MockIAccountsContract)(nil).CreateTemporary), ctx, identityHash)
}

// SetController mocks base method
func (m *MockIAccountsContract) SetController(ctx context.Context, controller common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "SetController", ctx, controller)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetController indicates an expected call of SetController
func (mr *MockIAccountsContractMockRecorder) SetController(ctx, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetController", reflect.TypeOf((*MockIAccountsContract)(nil).SetController), ctx, controller)
}

// UnlockTemporary mocks base method
func (m *MockIAccountsContract) UnlockTemporary(ctx context.Context, identityPreimage common.Hash, newOwner common.Address, passwordSignature []byte) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "UnlockTemporary", ctx, identityPreimage, newOwner, passwordSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockTemporary indicates an expected call of UnlockTemporary
func (mr *MockIAccountsContractMockRecorder) UnlockTemporary(ctx, identityPreimage, newOwner, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTemporary", reflect.TypeOf((*MockIAccountsContract)(nil).UnlockTemporary), ctx, identityPreimage, newOwner, passwordSignature)
}

// FilterControllerChanged mocks base method
func (m *MockIAccountsContract) FilterControllerChanged(opts *bind.FilterOpts, prevController, newController []common.Address) (*adapter.AccountsControllerChangedIterator, error) {
	ret := m.ctrl.Call(m, "FilterControllerChanged", opts, prevController, newController)
	ret0, _ := ret[0].(*adapter.AccountsControllerChangedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterControllerChanged indicates an expected call of FilterControllerChanged
func (mr *MockIAccountsContractMockRecorder) FilterControllerChanged(opts, prevController, newController interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterControllerChanged", reflect.TypeOf((*MockIAccountsContract)(nil).FilterControllerChanged), opts, prevController, newController)
}

// ParseControllerChangedFromReceipt mocks base method
func (m *MockIAccountsContract) ParseControllerChangedFromReceipt(receipt *types0.Receipt) (*adapter.AccountsControllerChanged, error) {
	ret := m.ctrl.Call(m, "ParseControllerChangedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsControllerChanged)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseControllerChangedFromReceipt indicates an expected call of ParseControllerChangedFromReceipt
func (mr *MockIAccountsContractMockRecorder) ParseControllerChangedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseControllerChangedFromReceipt", reflect.TypeOf((*MockIAccountsContract)(nil).ParseControllerChangedFromReceipt), receipt)
}

// WatchControllerChanged mocks base method
func (m *MockIAccountsContract) WatchControllerChanged(opts *bind.WatchOpts, sink chan<- *adapter.AccountsControllerChanged, prevController, newController []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchControllerChanged", opts, sink, prevController, newController)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerChanged indicates an expected call of WatchControllerChanged
func (mr *MockIAccountsContractMockRecorder) WatchControllerChanged(opts, sink, prevController, newController interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerChanged", reflect.TypeOf((*MockIAccountsContract)(nil).WatchControllerChanged), opts, sink, prevController, newController)
}

// FilterSignUp mocks base method
func (m *MockIAccountsContract) FilterSignUp(opts *bind.FilterOpts, owner []common.Address) (*adapter.AccountsSignUpIterator, error) {
	ret := m.ctrl.Call(m, "FilterSignUp", opts, owner)
	ret0, _ := ret[0].(*adapter.AccountsSignUpIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSignUp indicates an expected call of FilterSignUp
func (mr *MockIAccountsContractMockRecorder) FilterSignUp(opts, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSignUp", reflect.TypeOf((*MockIAccountsContract)(nil).FilterSignUp), opts, owner)
}

// ParseSignUpFromReceipt mocks base method
func (m *MockIAccountsContract) ParseSignUpFromReceipt(receipt *types0.Receipt) (*adapter.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUpFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUpFromReceipt indicates an expected call of ParseSignUpFromReceipt
func (mr *MockIAccountsContractMockRecorder) ParseSignUpFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUpFromReceipt", reflect.TypeOf((*MockIAccountsContract)(nil).ParseSignUpFromReceipt), receipt)
}

// WatchSignUp mocks base method
func (m *MockIAccountsContract) WatchSignUp(opts *bind.WatchOpts, sink chan<- *adapter.AccountsSignUp, owner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchSignUp", opts, sink, owner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSignUp indicates an expected call of WatchSignUp
func (mr *MockIAccountsContractMockRecorder) WatchSignUp(opts, sink, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSignUp", reflect.TypeOf((*MockIAccountsContract)(nil).WatchSignUp), opts, sink, owner)
}

// FilterTemporaryCreated mocks base method
func (m *MockIAccountsContract) FilterTemporaryCreated(opts *bind.FilterOpts, proxy []common.Address, identityHash []common.Hash) (*adapter.AccountsTemporaryCreatedIterator, error) {
	ret := m.ctrl.Call(m, "FilterTemporaryCreated", opts, proxy, identityHash)
	ret0, _ := ret[0].(*adapter.AccountsTemporaryCreatedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTemporaryCreated indicates an expected call of FilterTemporaryCreated
func (mr *MockIAccountsContractMockRecorder) FilterTemporaryCreated(opts, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTemporaryCreated", reflect.TypeOf((*MockIAccountsContract)(nil).FilterTemporaryCreated), opts, proxy, identityHash)
}

// ParseTemporaryCreatedFromReceipt mocks base method
func (m *MockIAccountsContract) ParseTemporaryCreatedFromReceipt(receipt *types0.Receipt) (*adapter.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreatedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreatedFromReceipt indicates an expected call of ParseTemporaryCreatedFromReceipt
func (mr *MockIAccountsContractMockRecorder) ParseTemporaryCreatedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreatedFromReceipt", reflect.TypeOf((*MockIAccountsContract)(nil).ParseTemporaryCreatedFromReceipt), receipt)
}

// WatchTemporaryCreated mocks base method
func (m *MockIAccountsContract) WatchTemporaryCreated(opts *bind.WatchOpts, sink chan<- *adapter.AccountsTemporaryCreated, proxy []common.Address, identityHash []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTemporaryCreated", opts, sink, proxy, identityHash)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTemporaryCreated indicates an expected call of WatchTemporaryCreated
func (mr *MockIAccountsContractMockRecorder) WatchTemporaryCreated(opts, sink, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTemporaryCreated", reflect.TypeOf((*MockIAccountsContract)(nil).WatchTemporaryCreated), opts, sink, proxy, identityHash)
}

// FilterUnlocked mocks base method
func (m *MockIAccountsContract) FilterUnlocked(opts *bind.FilterOpts, identityHash []common.Hash, accountId []types.ID) (*adapter.AccountsUnlockedIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnlocked", opts, identityHash, accountId)
	ret0, _ := ret[0].(*adapter.AccountsUnlockedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnlocked indicates an expected call of FilterUnlocked
func (mr *MockIAccountsContractMockRecorder) FilterUnlocked(opts, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnlocked", reflect.TypeOf((*MockIAccountsContract)(nil).FilterUnlocked), opts, identityHash, accountId)
}

// ParseUnlockedFromReceipt mocks base method
func (m *MockIAccountsContract) ParseUnlockedFromReceipt(receipt *types0.Receipt) (*adapter.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlockedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlockedFromReceipt indicates an expected call of ParseUnlockedFromReceipt
func (mr *MockIAccountsContractMockRecorder) ParseUnlockedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlockedFromReceipt", reflect.TypeOf((*MockIAccountsContract)(nil).ParseUnlockedFromReceipt), receipt)
}

// WatchUnlocked mocks base method
func (m *MockIAccountsContract) WatchUnlocked(opts *bind.WatchOpts, sink chan<- *adapter.AccountsUnlocked, identityHash []common.Hash, accountId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnlocked", opts, sink, identityHash, accountId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnlocked indicates an expected call of WatchUnlocked
func (mr *MockIAccountsContractMockRecorder) WatchUnlocked(opts, sink, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnlocked", reflect.TypeOf((*MockIAccountsContract)(nil).WatchUnlocked), opts, sink, identityHash, accountId)
}

// MockIAccountsCalls is a mock of IAccountsCalls interface
type MockIAccountsCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsCallsMockRecorder
}

// MockIAccountsCallsMockRecorder is the mock recorder for MockIAccountsCalls
type MockIAccountsCallsMockRecorder struct {
	mock *MockIAccountsCalls
}

// NewMockIAccountsCalls creates a new mock instance
func NewMockIAccountsCalls(ctrl *gomock.Controller) *MockIAccountsCalls {
	mock := &MockIAccountsCalls{ctrl: ctrl}
	mock.recorder = &MockIAccountsCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsCalls) EXPECT() *MockIAccountsCallsMockRecorder {
	return m.recorder
}

// Accounts mocks base method
func (m *MockIAccountsCalls) Accounts(arg0 types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "Accounts", arg0)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Accounts indicates an expected call of Accounts
func (mr *MockIAccountsCallsMockRecorder) Accounts(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Accounts", reflect.TypeOf((*MockIAccountsCalls)(nil).Accounts), arg0)
}

// Exists mocks base method
func (m *MockIAccountsCalls) Exists(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAccountsCallsMockRecorder) Exists(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAccountsCalls)(nil).Exists), accountId)
}

// GetAccount mocks base method
func (m *MockIAccountsCalls) GetAccount(accountId types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockIAccountsCallsMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccount), accountId)
}

// GetAccountId mocks base method
func (m *MockIAccountsCalls) GetAccountId(sender common.Address) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountId", sender)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountId indicates an expected call of GetAccountId
func (mr *MockIAccountsCallsMockRecorder) GetAccountId(sender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccountId), sender)
}

// GetAccountIdFromSignature mocks base method
func (m *MockIAccountsCalls) GetAccountIdFromSignature(messageHash common.Hash, signature []byte) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdFromSignature", messageHash, signature)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdFromSignature indicates an expected call of GetAccountIdFromSignature
func (mr *MockIAccountsCallsMockRecorder) GetAccountIdFromSignature(messageHash, signature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdFromSignature", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccountIdFromSignature), messageHash, signature)
}

// IdentityHashToAccount mocks base method
func (m *MockIAccountsCalls) IdentityHashToAccount(arg0 common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "IdentityHashToAccount", arg0)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdentityHashToAccount indicates an expected call of IdentityHashToAccount
func (mr *MockIAccountsCallsMockRecorder) IdentityHashToAccount(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdentityHashToAccount", reflect.TypeOf((*MockIAccountsCalls)(nil).IdentityHashToAccount), arg0)
}

// IsControllerOf mocks base method
func (m *MockIAccountsCalls) IsControllerOf(sender common.Address, accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsControllerOf", sender, accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerOf indicates an expected call of IsControllerOf
func (mr *MockIAccountsCallsMockRecorder) IsControllerOf(sender, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerOf", reflect.TypeOf((*MockIAccountsCalls)(nil).IsControllerOf), sender, accountId)
}

// IsTemporary mocks base method
func (m *MockIAccountsCalls) IsTemporary(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTemporary", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTemporary indicates an expected call of IsTemporary
func (mr *MockIAccountsCallsMockRecorder) IsTemporary(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockIAccountsCalls)(nil).IsTemporary), accountId)
}

// NumberOfAccounts mocks base method
func (m *MockIAccountsCalls) NumberOfAccounts() (*big.Int, error) {
	ret := m.ctrl.Call(m, "NumberOfAccounts")
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NumberOfAccounts indicates an expected call of NumberOfAccounts
func (mr *MockIAccountsCallsMockRecorder) NumberOfAccounts() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NumberOfAccounts", reflect.TypeOf((*MockIAccountsCalls)(nil).NumberOfAccounts))
}

// MockIAccountsTransacts is a mock of IAccountsTransacts interface
type MockIAccountsTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsTransactsMockRecorder
}

// MockIAccountsTransactsMockRecorder is the mock recorder for MockIAccountsTransacts
type MockIAccountsTransactsMockRecorder struct {
	mock *MockIAccountsTransacts
}

// NewMockIAccountsTransacts creates a new mock instance
func NewMockIAccountsTransacts(ctrl *gomock.Controller) *MockIAccountsTransacts {
	mock := &MockIAccountsTransacts{ctrl: ctrl}
	mock.recorder = &MockIAccountsTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsTransacts) EXPECT() *MockIAccountsTransactsMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIAccountsTransacts) Create(ctx context.Context) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIAccountsTransactsMockRecorder) Create(ctx interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountsTransacts)(nil).Create), ctx)
}

// CreateTemporary mocks base method
func (m *MockIAccountsTransacts) CreateTemporary(ctx context.Context, identityHash common.Hash) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "CreateTemporary", ctx, identityHash)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporary indicates an expected call of CreateTemporary
func (mr *MockIAccountsTransactsMockRecorder) CreateTemporary(ctx, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporary", reflect.TypeOf((*MockIAccountsTransacts)(nil).CreateTemporary), ctx, identityHash)
}

// SetController mocks base method
func (m *MockIAccountsTransacts) SetController(ctx context.Context, controller common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "SetController", ctx, controller)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetController indicates an expected call of SetController
func (mr *MockIAccountsTransactsMockRecorder) SetController(ctx, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetController", reflect.TypeOf((*MockIAccountsTransacts)(nil).SetController), ctx, controller)
}

// UnlockTemporary mocks base method
func (m *MockIAccountsTransacts) UnlockTemporary(ctx context.Context, identityPreimage common.Hash, newOwner common.Address, passwordSignature []byte) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "UnlockTemporary", ctx, identityPreimage, newOwner, passwordSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockTemporary indicates an expected call of UnlockTemporary
func (mr *MockIAccountsTransactsMockRecorder) UnlockTemporary(ctx, identityPreimage, newOwner, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTemporary", reflect.TypeOf((*MockIAccountsTransacts)(nil).UnlockTemporary), ctx, identityPreimage, newOwner, passwordSignature)
}

// MockIAccountsEvents is a mock of IAccountsEvents interface
type MockIAccountsEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsEventsMockRecorder
}

// MockIAccountsEventsMockRecorder is the mock recorder for MockIAccountsEvents
type MockIAccountsEventsMockRecorder struct {
	mock *MockIAccountsEvents
}

// NewMockIAccountsEvents creates a new mock instance
func NewMockIAccountsEvents(ctrl *gomock.Controller) *MockIAccountsEvents {
	mock := &MockIAccountsEvents{ctrl: ctrl}
	mock.recorder = &MockIAccountsEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsEvents) EXPECT() *MockIAccountsEventsMockRecorder {
	return m.recorder
}

// FilterControllerChanged mocks base method
func (m *MockIAccountsEvents) FilterControllerChanged(opts *bind.FilterOpts, prevController, newController []common.Address) (*adapter.AccountsControllerChangedIterator, error) {
	ret := m.ctrl.Call(m, "FilterControllerChanged", opts, prevController, newController)
	ret0, _ := ret[0].(*adapter.AccountsControllerChangedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterControllerChanged indicates an expected call of FilterControllerChanged
func (mr *MockIAccountsEventsMockRecorder) FilterControllerChanged(opts, prevController, newController interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterControllerChanged", reflect.TypeOf((*MockIAccountsEvents)(nil).FilterControllerChanged), opts, prevController, newController)
}

// ParseControllerChangedFromReceipt mocks base method
func (m *MockIAccountsEvents) ParseControllerChangedFromReceipt(receipt *types0.Receipt) (*adapter.AccountsControllerChanged, error) {
	ret := m.ctrl.Call(m, "ParseControllerChangedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsControllerChanged)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseControllerChangedFromReceipt indicates an expected call of ParseControllerChangedFromReceipt
func (mr *MockIAccountsEventsMockRecorder) ParseControllerChangedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseControllerChangedFromReceipt", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseControllerChangedFromReceipt), receipt)
}

// WatchControllerChanged mocks base method
func (m *MockIAccountsEvents) WatchControllerChanged(opts *bind.WatchOpts, sink chan<- *adapter.AccountsControllerChanged, prevController, newController []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchControllerChanged", opts, sink, prevController, newController)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchControllerChanged indicates an expected call of WatchControllerChanged
func (mr *MockIAccountsEventsMockRecorder) WatchControllerChanged(opts, sink, prevController, newController interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchControllerChanged", reflect.TypeOf((*MockIAccountsEvents)(nil).WatchControllerChanged), opts, sink, prevController, newController)
}

// FilterSignUp mocks base method
func (m *MockIAccountsEvents) FilterSignUp(opts *bind.FilterOpts, owner []common.Address) (*adapter.AccountsSignUpIterator, error) {
	ret := m.ctrl.Call(m, "FilterSignUp", opts, owner)
	ret0, _ := ret[0].(*adapter.AccountsSignUpIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSignUp indicates an expected call of FilterSignUp
func (mr *MockIAccountsEventsMockRecorder) FilterSignUp(opts, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSignUp", reflect.TypeOf((*MockIAccountsEvents)(nil).FilterSignUp), opts, owner)
}

// ParseSignUpFromReceipt mocks base method
func (m *MockIAccountsEvents) ParseSignUpFromReceipt(receipt *types0.Receipt) (*adapter.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUpFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUpFromReceipt indicates an expected call of ParseSignUpFromReceipt
func (mr *MockIAccountsEventsMockRecorder) ParseSignUpFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUpFromReceipt", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseSignUpFromReceipt), receipt)
}

// WatchSignUp mocks base method
func (m *MockIAccountsEvents) WatchSignUp(opts *bind.WatchOpts, sink chan<- *adapter.AccountsSignUp, owner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchSignUp", opts, sink, owner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSignUp indicates an expected call of WatchSignUp
func (mr *MockIAccountsEventsMockRecorder) WatchSignUp(opts, sink, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSignUp", reflect.TypeOf((*MockIAccountsEvents)(nil).WatchSignUp), opts, sink, owner)
}

// FilterTemporaryCreated mocks base method
func (m *MockIAccountsEvents) FilterTemporaryCreated(opts *bind.FilterOpts, proxy []common.Address, identityHash []common.Hash) (*adapter.AccountsTemporaryCreatedIterator, error) {
	ret := m.ctrl.Call(m, "FilterTemporaryCreated", opts, proxy, identityHash)
	ret0, _ := ret[0].(*adapter.AccountsTemporaryCreatedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTemporaryCreated indicates an expected call of FilterTemporaryCreated
func (mr *MockIAccountsEventsMockRecorder) FilterTemporaryCreated(opts, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTemporaryCreated", reflect.TypeOf((*MockIAccountsEvents)(nil).FilterTemporaryCreated), opts, proxy, identityHash)
}

// ParseTemporaryCreatedFromReceipt mocks base method
func (m *MockIAccountsEvents) ParseTemporaryCreatedFromReceipt(receipt *types0.Receipt) (*adapter.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreatedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreatedFromReceipt indicates an expected call of ParseTemporaryCreatedFromReceipt
func (mr *MockIAccountsEventsMockRecorder) ParseTemporaryCreatedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreatedFromReceipt", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseTemporaryCreatedFromReceipt), receipt)
}

// WatchTemporaryCreated mocks base method
func (m *MockIAccountsEvents) WatchTemporaryCreated(opts *bind.WatchOpts, sink chan<- *adapter.AccountsTemporaryCreated, proxy []common.Address, identityHash []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTemporaryCreated", opts, sink, proxy, identityHash)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTemporaryCreated indicates an expected call of WatchTemporaryCreated
func (mr *MockIAccountsEventsMockRecorder) WatchTemporaryCreated(opts, sink, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTemporaryCreated", reflect.TypeOf((*MockIAccountsEvents)(nil).WatchTemporaryCreated), opts, sink, proxy, identityHash)
}

// FilterUnlocked mocks base method
func (m *MockIAccountsEvents) FilterUnlocked(opts *bind.FilterOpts, identityHash []common.Hash, accountId []types.ID) (*adapter.AccountsUnlockedIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnlocked", opts, identityHash, accountId)
	ret0, _ := ret[0].(*adapter.AccountsUnlockedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnlocked indicates an expected call of FilterUnlocked
func (mr *MockIAccountsEventsMockRecorder) FilterUnlocked(opts, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnlocked", reflect.TypeOf((*MockIAccountsEvents)(nil).FilterUnlocked), opts, identityHash, accountId)
}

// ParseUnlockedFromReceipt mocks base method
func (m *MockIAccountsEvents) ParseUnlockedFromReceipt(receipt *types0.Receipt) (*adapter.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlockedFromReceipt", receipt)
	ret0, _ := ret[0].(*adapter.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlockedFromReceipt indicates an expected call of ParseUnlockedFromReceipt
func (mr *MockIAccountsEventsMockRecorder) ParseUnlockedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlockedFromReceipt", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseUnlockedFromReceipt), receipt)
}

// WatchUnlocked mocks base method
func (m *MockIAccountsEvents) WatchUnlocked(opts *bind.WatchOpts, sink chan<- *adapter.AccountsUnlocked, identityHash []common.Hash, accountId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnlocked", opts, sink, identityHash, accountId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnlocked indicates an expected call of WatchUnlocked
func (mr *MockIAccountsEventsMockRecorder) WatchUnlocked(opts, sink, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnlocked", reflect.TypeOf((*MockIAccountsEvents)(nil).WatchUnlocked), opts, sink, identityHash, accountId)
}
