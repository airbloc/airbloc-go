// Code generated by MockGen. DO NOT EDIT.
// Source: accounts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/shared/adapter"
	contracts "github.com/airbloc/airbloc-go/shared/adapter/contracts"
	types "github.com/airbloc/airbloc-go/shared/adapter/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	types0 "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIAccountsCalls is a mock of IAccountsCalls interface
type MockIAccountsCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsCallsMockRecorder
}

// MockIAccountsCallsMockRecorder is the mock recorder for MockIAccountsCalls
type MockIAccountsCallsMockRecorder struct {
	mock *MockIAccountsCalls
}

// NewMockIAccountsCalls creates a new mock instance
func NewMockIAccountsCalls(ctrl *gomock.Controller) *MockIAccountsCalls {
	mock := &MockIAccountsCalls{ctrl: ctrl}
	mock.recorder = &MockIAccountsCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsCalls) EXPECT() *MockIAccountsCallsMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockIAccountsCalls) Exists(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAccountsCallsMockRecorder) Exists(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAccountsCalls)(nil).Exists), accountId)
}

// GetAccount mocks base method
func (m *MockIAccountsCalls) GetAccount(accountId types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockIAccountsCallsMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccount), accountId)
}

// GetAccountByIdentityHash mocks base method
func (m *MockIAccountsCalls) GetAccountByIdentityHash(identityHash common.Hash) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccountByIdentityHash", identityHash)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIdentityHash indicates an expected call of GetAccountByIdentityHash
func (mr *MockIAccountsCallsMockRecorder) GetAccountByIdentityHash(identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIdentityHash", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccountByIdentityHash), identityHash)
}

// GetAccountId mocks base method
func (m *MockIAccountsCalls) GetAccountId(sender common.Address) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountId", sender)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountId indicates an expected call of GetAccountId
func (mr *MockIAccountsCallsMockRecorder) GetAccountId(sender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccountId), sender)
}

// GetAccountIdByIdentityHash mocks base method
func (m *MockIAccountsCalls) GetAccountIdByIdentityHash(identityHash common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdByIdentityHash", identityHash)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdByIdentityHash indicates an expected call of GetAccountIdByIdentityHash
func (mr *MockIAccountsCallsMockRecorder) GetAccountIdByIdentityHash(identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdByIdentityHash", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccountIdByIdentityHash), identityHash)
}

// GetAccountIdFromSignature mocks base method
func (m *MockIAccountsCalls) GetAccountIdFromSignature(messageHash common.Hash, signature []byte) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdFromSignature", messageHash, signature)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdFromSignature indicates an expected call of GetAccountIdFromSignature
func (mr *MockIAccountsCallsMockRecorder) GetAccountIdFromSignature(messageHash, signature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdFromSignature", reflect.TypeOf((*MockIAccountsCalls)(nil).GetAccountIdFromSignature), messageHash, signature)
}

// IsControllerOf mocks base method
func (m *MockIAccountsCalls) IsControllerOf(sender common.Address, accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsControllerOf", sender, accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerOf indicates an expected call of IsControllerOf
func (mr *MockIAccountsCallsMockRecorder) IsControllerOf(sender, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerOf", reflect.TypeOf((*MockIAccountsCalls)(nil).IsControllerOf), sender, accountId)
}

// IsTemporary mocks base method
func (m *MockIAccountsCalls) IsTemporary(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTemporary", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTemporary indicates an expected call of IsTemporary
func (mr *MockIAccountsCallsMockRecorder) IsTemporary(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockIAccountsCalls)(nil).IsTemporary), accountId)
}

// MockIAccountsTransacts is a mock of IAccountsTransacts interface
type MockIAccountsTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsTransactsMockRecorder
}

// MockIAccountsTransactsMockRecorder is the mock recorder for MockIAccountsTransacts
type MockIAccountsTransactsMockRecorder struct {
	mock *MockIAccountsTransacts
}

// NewMockIAccountsTransacts creates a new mock instance
func NewMockIAccountsTransacts(ctrl *gomock.Controller) *MockIAccountsTransacts {
	mock := &MockIAccountsTransacts{ctrl: ctrl}
	mock.recorder = &MockIAccountsTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsTransacts) EXPECT() *MockIAccountsTransactsMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockIAccountsTransacts) Create(ctx context.Context, opts *bind.TransactOpts) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIAccountsTransactsMockRecorder) Create(ctx, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountsTransacts)(nil).Create), ctx, opts)
}

// CreateTemporary mocks base method
func (m *MockIAccountsTransacts) CreateTemporary(ctx context.Context, opts *bind.TransactOpts, identityHash common.Hash) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "CreateTemporary", ctx, opts, identityHash)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporary indicates an expected call of CreateTemporary
func (mr *MockIAccountsTransactsMockRecorder) CreateTemporary(ctx, opts, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporary", reflect.TypeOf((*MockIAccountsTransacts)(nil).CreateTemporary), ctx, opts, identityHash)
}

// SetController mocks base method
func (m *MockIAccountsTransacts) SetController(ctx context.Context, opts *bind.TransactOpts, controller common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "SetController", ctx, opts, controller)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetController indicates an expected call of SetController
func (mr *MockIAccountsTransactsMockRecorder) SetController(ctx, opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetController", reflect.TypeOf((*MockIAccountsTransacts)(nil).SetController), ctx, opts, controller)
}

// UnlockTemporary mocks base method
func (m *MockIAccountsTransacts) UnlockTemporary(ctx context.Context, opts *bind.TransactOpts, identityPreimage common.Hash, newOwner common.Address, passwordSignature []byte) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "UnlockTemporary", ctx, opts, identityPreimage, newOwner, passwordSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockTemporary indicates an expected call of UnlockTemporary
func (mr *MockIAccountsTransactsMockRecorder) UnlockTemporary(ctx, opts, identityPreimage, newOwner, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTemporary", reflect.TypeOf((*MockIAccountsTransacts)(nil).UnlockTemporary), ctx, opts, identityPreimage, newOwner, passwordSignature)
}

// MockIAccountsEvents is a mock of IAccountsEvents interface
type MockIAccountsEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsEventsMockRecorder
}

// MockIAccountsEventsMockRecorder is the mock recorder for MockIAccountsEvents
type MockIAccountsEventsMockRecorder struct {
	mock *MockIAccountsEvents
}

// NewMockIAccountsEvents creates a new mock instance
func NewMockIAccountsEvents(ctrl *gomock.Controller) *MockIAccountsEvents {
	mock := &MockIAccountsEvents{ctrl: ctrl}
	mock.recorder = &MockIAccountsEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsEvents) EXPECT() *MockIAccountsEventsMockRecorder {
	return m.recorder
}

// FilterSignUp mocks base method
func (m *MockIAccountsEvents) FilterSignUp(opts *bind0.FilterOpts, owner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterSignUp", opts, owner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSignUp indicates an expected call of FilterSignUp
func (mr *MockIAccountsEventsMockRecorder) FilterSignUp(opts, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSignUp", reflect.TypeOf((*MockIAccountsEvents)(nil).FilterSignUp), opts, owner)
}

// FilterTemporaryCreated mocks base method
func (m *MockIAccountsEvents) FilterTemporaryCreated(opts *bind0.FilterOpts, proxy []common.Address, identityHash []common.Hash) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterTemporaryCreated", opts, proxy, identityHash)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTemporaryCreated indicates an expected call of FilterTemporaryCreated
func (mr *MockIAccountsEventsMockRecorder) FilterTemporaryCreated(opts, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTemporaryCreated", reflect.TypeOf((*MockIAccountsEvents)(nil).FilterTemporaryCreated), opts, proxy, identityHash)
}

// FilterUnlocked mocks base method
func (m *MockIAccountsEvents) FilterUnlocked(opts *bind0.FilterOpts, identityHash []common.Hash, accountId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnlocked", opts, identityHash, accountId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnlocked indicates an expected call of FilterUnlocked
func (mr *MockIAccountsEventsMockRecorder) FilterUnlocked(opts, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnlocked", reflect.TypeOf((*MockIAccountsEvents)(nil).FilterUnlocked), opts, identityHash, accountId)
}

// ParseSignUp mocks base method
func (m *MockIAccountsEvents) ParseSignUp(log types0.Log) (*contracts.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUp", log)
	ret0, _ := ret[0].(*contracts.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUp indicates an expected call of ParseSignUp
func (mr *MockIAccountsEventsMockRecorder) ParseSignUp(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUp", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseSignUp), log)
}

// ParseSignUpFromReceipt mocks base method
func (m *MockIAccountsEvents) ParseSignUpFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUpFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUpFromReceipt indicates an expected call of ParseSignUpFromReceipt
func (mr *MockIAccountsEventsMockRecorder) ParseSignUpFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUpFromReceipt", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseSignUpFromReceipt), receipt)
}

// ParseTemporaryCreated mocks base method
func (m *MockIAccountsEvents) ParseTemporaryCreated(log types0.Log) (*contracts.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreated", log)
	ret0, _ := ret[0].(*contracts.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreated indicates an expected call of ParseTemporaryCreated
func (mr *MockIAccountsEventsMockRecorder) ParseTemporaryCreated(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreated", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseTemporaryCreated), log)
}

// ParseTemporaryCreatedFromReceipt mocks base method
func (m *MockIAccountsEvents) ParseTemporaryCreatedFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreatedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreatedFromReceipt indicates an expected call of ParseTemporaryCreatedFromReceipt
func (mr *MockIAccountsEventsMockRecorder) ParseTemporaryCreatedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreatedFromReceipt", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseTemporaryCreatedFromReceipt), receipt)
}

// ParseUnlocked mocks base method
func (m *MockIAccountsEvents) ParseUnlocked(log types0.Log) (*contracts.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlocked", log)
	ret0, _ := ret[0].(*contracts.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlocked indicates an expected call of ParseUnlocked
func (mr *MockIAccountsEventsMockRecorder) ParseUnlocked(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlocked", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseUnlocked), log)
}

// ParseUnlockedFromReceipt mocks base method
func (m *MockIAccountsEvents) ParseUnlockedFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlockedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlockedFromReceipt indicates an expected call of ParseUnlockedFromReceipt
func (mr *MockIAccountsEventsMockRecorder) ParseUnlockedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlockedFromReceipt", reflect.TypeOf((*MockIAccountsEvents)(nil).ParseUnlockedFromReceipt), receipt)
}

// WatchSignUp mocks base method
func (m *MockIAccountsEvents) WatchSignUp(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsSignUp, owner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchSignUp", opts, sink, owner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSignUp indicates an expected call of WatchSignUp
func (mr *MockIAccountsEventsMockRecorder) WatchSignUp(opts, sink, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSignUp", reflect.TypeOf((*MockIAccountsEvents)(nil).WatchSignUp), opts, sink, owner)
}

// WatchTemporaryCreated mocks base method
func (m *MockIAccountsEvents) WatchTemporaryCreated(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsTemporaryCreated, proxy []common.Address, identityHash []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTemporaryCreated", opts, sink, proxy, identityHash)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTemporaryCreated indicates an expected call of WatchTemporaryCreated
func (mr *MockIAccountsEventsMockRecorder) WatchTemporaryCreated(opts, sink, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTemporaryCreated", reflect.TypeOf((*MockIAccountsEvents)(nil).WatchTemporaryCreated), opts, sink, proxy, identityHash)
}

// WatchUnlocked mocks base method
func (m *MockIAccountsEvents) WatchUnlocked(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsUnlocked, identityHash []common.Hash, accountId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnlocked", opts, sink, identityHash, accountId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnlocked indicates an expected call of WatchUnlocked
func (mr *MockIAccountsEventsMockRecorder) WatchUnlocked(opts, sink, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnlocked", reflect.TypeOf((*MockIAccountsEvents)(nil).WatchUnlocked), opts, sink, identityHash, accountId)
}

// MockIAccountsFilterer is a mock of IAccountsFilterer interface
type MockIAccountsFilterer struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsFiltererMockRecorder
}

// MockIAccountsFiltererMockRecorder is the mock recorder for MockIAccountsFilterer
type MockIAccountsFiltererMockRecorder struct {
	mock *MockIAccountsFilterer
}

// NewMockIAccountsFilterer creates a new mock instance
func NewMockIAccountsFilterer(ctrl *gomock.Controller) *MockIAccountsFilterer {
	mock := &MockIAccountsFilterer{ctrl: ctrl}
	mock.recorder = &MockIAccountsFiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsFilterer) EXPECT() *MockIAccountsFiltererMockRecorder {
	return m.recorder
}

// FilterSignUp mocks base method
func (m *MockIAccountsFilterer) FilterSignUp(opts *bind0.FilterOpts, owner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterSignUp", opts, owner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSignUp indicates an expected call of FilterSignUp
func (mr *MockIAccountsFiltererMockRecorder) FilterSignUp(opts, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSignUp", reflect.TypeOf((*MockIAccountsFilterer)(nil).FilterSignUp), opts, owner)
}

// FilterTemporaryCreated mocks base method
func (m *MockIAccountsFilterer) FilterTemporaryCreated(opts *bind0.FilterOpts, proxy []common.Address, identityHash []common.Hash) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterTemporaryCreated", opts, proxy, identityHash)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTemporaryCreated indicates an expected call of FilterTemporaryCreated
func (mr *MockIAccountsFiltererMockRecorder) FilterTemporaryCreated(opts, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTemporaryCreated", reflect.TypeOf((*MockIAccountsFilterer)(nil).FilterTemporaryCreated), opts, proxy, identityHash)
}

// FilterUnlocked mocks base method
func (m *MockIAccountsFilterer) FilterUnlocked(opts *bind0.FilterOpts, identityHash []common.Hash, accountId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnlocked", opts, identityHash, accountId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnlocked indicates an expected call of FilterUnlocked
func (mr *MockIAccountsFiltererMockRecorder) FilterUnlocked(opts, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnlocked", reflect.TypeOf((*MockIAccountsFilterer)(nil).FilterUnlocked), opts, identityHash, accountId)
}

// MockIAccountsParser is a mock of IAccountsParser interface
type MockIAccountsParser struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsParserMockRecorder
}

// MockIAccountsParserMockRecorder is the mock recorder for MockIAccountsParser
type MockIAccountsParserMockRecorder struct {
	mock *MockIAccountsParser
}

// NewMockIAccountsParser creates a new mock instance
func NewMockIAccountsParser(ctrl *gomock.Controller) *MockIAccountsParser {
	mock := &MockIAccountsParser{ctrl: ctrl}
	mock.recorder = &MockIAccountsParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsParser) EXPECT() *MockIAccountsParserMockRecorder {
	return m.recorder
}

// ParseSignUp mocks base method
func (m *MockIAccountsParser) ParseSignUp(log types0.Log) (*contracts.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUp", log)
	ret0, _ := ret[0].(*contracts.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUp indicates an expected call of ParseSignUp
func (mr *MockIAccountsParserMockRecorder) ParseSignUp(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUp", reflect.TypeOf((*MockIAccountsParser)(nil).ParseSignUp), log)
}

// ParseSignUpFromReceipt mocks base method
func (m *MockIAccountsParser) ParseSignUpFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUpFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUpFromReceipt indicates an expected call of ParseSignUpFromReceipt
func (mr *MockIAccountsParserMockRecorder) ParseSignUpFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUpFromReceipt", reflect.TypeOf((*MockIAccountsParser)(nil).ParseSignUpFromReceipt), receipt)
}

// ParseTemporaryCreated mocks base method
func (m *MockIAccountsParser) ParseTemporaryCreated(log types0.Log) (*contracts.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreated", log)
	ret0, _ := ret[0].(*contracts.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreated indicates an expected call of ParseTemporaryCreated
func (mr *MockIAccountsParserMockRecorder) ParseTemporaryCreated(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreated", reflect.TypeOf((*MockIAccountsParser)(nil).ParseTemporaryCreated), log)
}

// ParseTemporaryCreatedFromReceipt mocks base method
func (m *MockIAccountsParser) ParseTemporaryCreatedFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreatedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreatedFromReceipt indicates an expected call of ParseTemporaryCreatedFromReceipt
func (mr *MockIAccountsParserMockRecorder) ParseTemporaryCreatedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreatedFromReceipt", reflect.TypeOf((*MockIAccountsParser)(nil).ParseTemporaryCreatedFromReceipt), receipt)
}

// ParseUnlocked mocks base method
func (m *MockIAccountsParser) ParseUnlocked(log types0.Log) (*contracts.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlocked", log)
	ret0, _ := ret[0].(*contracts.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlocked indicates an expected call of ParseUnlocked
func (mr *MockIAccountsParserMockRecorder) ParseUnlocked(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlocked", reflect.TypeOf((*MockIAccountsParser)(nil).ParseUnlocked), log)
}

// ParseUnlockedFromReceipt mocks base method
func (m *MockIAccountsParser) ParseUnlockedFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlockedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlockedFromReceipt indicates an expected call of ParseUnlockedFromReceipt
func (mr *MockIAccountsParserMockRecorder) ParseUnlockedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlockedFromReceipt", reflect.TypeOf((*MockIAccountsParser)(nil).ParseUnlockedFromReceipt), receipt)
}

// MockIAccountsWatcher is a mock of IAccountsWatcher interface
type MockIAccountsWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsWatcherMockRecorder
}

// MockIAccountsWatcherMockRecorder is the mock recorder for MockIAccountsWatcher
type MockIAccountsWatcherMockRecorder struct {
	mock *MockIAccountsWatcher
}

// NewMockIAccountsWatcher creates a new mock instance
func NewMockIAccountsWatcher(ctrl *gomock.Controller) *MockIAccountsWatcher {
	mock := &MockIAccountsWatcher{ctrl: ctrl}
	mock.recorder = &MockIAccountsWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsWatcher) EXPECT() *MockIAccountsWatcherMockRecorder {
	return m.recorder
}

// WatchSignUp mocks base method
func (m *MockIAccountsWatcher) WatchSignUp(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsSignUp, owner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchSignUp", opts, sink, owner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSignUp indicates an expected call of WatchSignUp
func (mr *MockIAccountsWatcherMockRecorder) WatchSignUp(opts, sink, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSignUp", reflect.TypeOf((*MockIAccountsWatcher)(nil).WatchSignUp), opts, sink, owner)
}

// WatchTemporaryCreated mocks base method
func (m *MockIAccountsWatcher) WatchTemporaryCreated(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsTemporaryCreated, proxy []common.Address, identityHash []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTemporaryCreated", opts, sink, proxy, identityHash)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTemporaryCreated indicates an expected call of WatchTemporaryCreated
func (mr *MockIAccountsWatcherMockRecorder) WatchTemporaryCreated(opts, sink, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTemporaryCreated", reflect.TypeOf((*MockIAccountsWatcher)(nil).WatchTemporaryCreated), opts, sink, proxy, identityHash)
}

// WatchUnlocked mocks base method
func (m *MockIAccountsWatcher) WatchUnlocked(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsUnlocked, identityHash []common.Hash, accountId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnlocked", opts, sink, identityHash, accountId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnlocked indicates an expected call of WatchUnlocked
func (mr *MockIAccountsWatcherMockRecorder) WatchUnlocked(opts, sink, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnlocked", reflect.TypeOf((*MockIAccountsWatcher)(nil).WatchUnlocked), opts, sink, identityHash, accountId)
}

// MockIAccountsContract is a mock of IAccountsContract interface
type MockIAccountsContract struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsContractMockRecorder
}

// MockIAccountsContractMockRecorder is the mock recorder for MockIAccountsContract
type MockIAccountsContractMockRecorder struct {
	mock *MockIAccountsContract
}

// NewMockIAccountsContract creates a new mock instance
func NewMockIAccountsContract(ctrl *gomock.Controller) *MockIAccountsContract {
	mock := &MockIAccountsContract{ctrl: ctrl}
	mock.recorder = &MockIAccountsContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsContract) EXPECT() *MockIAccountsContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIAccountsContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIAccountsContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIAccountsContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockIAccountsContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIAccountsContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIAccountsContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIAccountsContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIAccountsContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIAccountsContract)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIAccountsContract) Exists(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAccountsContractMockRecorder) Exists(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAccountsContract)(nil).Exists), accountId)
}

// GetAccount mocks base method
func (m *MockIAccountsContract) GetAccount(accountId types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockIAccountsContractMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccount), accountId)
}

// GetAccountByIdentityHash mocks base method
func (m *MockIAccountsContract) GetAccountByIdentityHash(identityHash common.Hash) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccountByIdentityHash", identityHash)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIdentityHash indicates an expected call of GetAccountByIdentityHash
func (mr *MockIAccountsContractMockRecorder) GetAccountByIdentityHash(identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIdentityHash", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccountByIdentityHash), identityHash)
}

// GetAccountId mocks base method
func (m *MockIAccountsContract) GetAccountId(sender common.Address) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountId", sender)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountId indicates an expected call of GetAccountId
func (mr *MockIAccountsContractMockRecorder) GetAccountId(sender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccountId), sender)
}

// GetAccountIdByIdentityHash mocks base method
func (m *MockIAccountsContract) GetAccountIdByIdentityHash(identityHash common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdByIdentityHash", identityHash)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdByIdentityHash indicates an expected call of GetAccountIdByIdentityHash
func (mr *MockIAccountsContractMockRecorder) GetAccountIdByIdentityHash(identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdByIdentityHash", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccountIdByIdentityHash), identityHash)
}

// GetAccountIdFromSignature mocks base method
func (m *MockIAccountsContract) GetAccountIdFromSignature(messageHash common.Hash, signature []byte) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdFromSignature", messageHash, signature)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdFromSignature indicates an expected call of GetAccountIdFromSignature
func (mr *MockIAccountsContractMockRecorder) GetAccountIdFromSignature(messageHash, signature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdFromSignature", reflect.TypeOf((*MockIAccountsContract)(nil).GetAccountIdFromSignature), messageHash, signature)
}

// IsControllerOf mocks base method
func (m *MockIAccountsContract) IsControllerOf(sender common.Address, accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsControllerOf", sender, accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerOf indicates an expected call of IsControllerOf
func (mr *MockIAccountsContractMockRecorder) IsControllerOf(sender, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerOf", reflect.TypeOf((*MockIAccountsContract)(nil).IsControllerOf), sender, accountId)
}

// IsTemporary mocks base method
func (m *MockIAccountsContract) IsTemporary(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTemporary", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTemporary indicates an expected call of IsTemporary
func (mr *MockIAccountsContractMockRecorder) IsTemporary(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockIAccountsContract)(nil).IsTemporary), accountId)
}

// Create mocks base method
func (m *MockIAccountsContract) Create(ctx context.Context, opts *bind.TransactOpts) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIAccountsContractMockRecorder) Create(ctx, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountsContract)(nil).Create), ctx, opts)
}

// CreateTemporary mocks base method
func (m *MockIAccountsContract) CreateTemporary(ctx context.Context, opts *bind.TransactOpts, identityHash common.Hash) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "CreateTemporary", ctx, opts, identityHash)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporary indicates an expected call of CreateTemporary
func (mr *MockIAccountsContractMockRecorder) CreateTemporary(ctx, opts, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporary", reflect.TypeOf((*MockIAccountsContract)(nil).CreateTemporary), ctx, opts, identityHash)
}

// SetController mocks base method
func (m *MockIAccountsContract) SetController(ctx context.Context, opts *bind.TransactOpts, controller common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "SetController", ctx, opts, controller)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetController indicates an expected call of SetController
func (mr *MockIAccountsContractMockRecorder) SetController(ctx, opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetController", reflect.TypeOf((*MockIAccountsContract)(nil).SetController), ctx, opts, controller)
}

// UnlockTemporary mocks base method
func (m *MockIAccountsContract) UnlockTemporary(ctx context.Context, opts *bind.TransactOpts, identityPreimage common.Hash, newOwner common.Address, passwordSignature []byte) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "UnlockTemporary", ctx, opts, identityPreimage, newOwner, passwordSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UnlockTemporary indicates an expected call of UnlockTemporary
func (mr *MockIAccountsContractMockRecorder) UnlockTemporary(ctx, opts, identityPreimage, newOwner, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTemporary", reflect.TypeOf((*MockIAccountsContract)(nil).UnlockTemporary), ctx, opts, identityPreimage, newOwner, passwordSignature)
}

// FilterSignUp mocks base method
func (m *MockIAccountsContract) FilterSignUp(opts *bind0.FilterOpts, owner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterSignUp", opts, owner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSignUp indicates an expected call of FilterSignUp
func (mr *MockIAccountsContractMockRecorder) FilterSignUp(opts, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSignUp", reflect.TypeOf((*MockIAccountsContract)(nil).FilterSignUp), opts, owner)
}

// FilterTemporaryCreated mocks base method
func (m *MockIAccountsContract) FilterTemporaryCreated(opts *bind0.FilterOpts, proxy []common.Address, identityHash []common.Hash) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterTemporaryCreated", opts, proxy, identityHash)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTemporaryCreated indicates an expected call of FilterTemporaryCreated
func (mr *MockIAccountsContractMockRecorder) FilterTemporaryCreated(opts, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTemporaryCreated", reflect.TypeOf((*MockIAccountsContract)(nil).FilterTemporaryCreated), opts, proxy, identityHash)
}

// FilterUnlocked mocks base method
func (m *MockIAccountsContract) FilterUnlocked(opts *bind0.FilterOpts, identityHash []common.Hash, accountId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnlocked", opts, identityHash, accountId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnlocked indicates an expected call of FilterUnlocked
func (mr *MockIAccountsContractMockRecorder) FilterUnlocked(opts, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnlocked", reflect.TypeOf((*MockIAccountsContract)(nil).FilterUnlocked), opts, identityHash, accountId)
}

// ParseSignUp mocks base method
func (m *MockIAccountsContract) ParseSignUp(log types0.Log) (*contracts.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUp", log)
	ret0, _ := ret[0].(*contracts.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUp indicates an expected call of ParseSignUp
func (mr *MockIAccountsContractMockRecorder) ParseSignUp(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUp", reflect.TypeOf((*MockIAccountsContract)(nil).ParseSignUp), log)
}

// ParseSignUpFromReceipt mocks base method
func (m *MockIAccountsContract) ParseSignUpFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsSignUp, error) {
	ret := m.ctrl.Call(m, "ParseSignUpFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsSignUp)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseSignUpFromReceipt indicates an expected call of ParseSignUpFromReceipt
func (mr *MockIAccountsContractMockRecorder) ParseSignUpFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseSignUpFromReceipt", reflect.TypeOf((*MockIAccountsContract)(nil).ParseSignUpFromReceipt), receipt)
}

// ParseTemporaryCreated mocks base method
func (m *MockIAccountsContract) ParseTemporaryCreated(log types0.Log) (*contracts.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreated", log)
	ret0, _ := ret[0].(*contracts.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreated indicates an expected call of ParseTemporaryCreated
func (mr *MockIAccountsContractMockRecorder) ParseTemporaryCreated(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreated", reflect.TypeOf((*MockIAccountsContract)(nil).ParseTemporaryCreated), log)
}

// ParseTemporaryCreatedFromReceipt mocks base method
func (m *MockIAccountsContract) ParseTemporaryCreatedFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsTemporaryCreated, error) {
	ret := m.ctrl.Call(m, "ParseTemporaryCreatedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsTemporaryCreated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseTemporaryCreatedFromReceipt indicates an expected call of ParseTemporaryCreatedFromReceipt
func (mr *MockIAccountsContractMockRecorder) ParseTemporaryCreatedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseTemporaryCreatedFromReceipt", reflect.TypeOf((*MockIAccountsContract)(nil).ParseTemporaryCreatedFromReceipt), receipt)
}

// ParseUnlocked mocks base method
func (m *MockIAccountsContract) ParseUnlocked(log types0.Log) (*contracts.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlocked", log)
	ret0, _ := ret[0].(*contracts.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlocked indicates an expected call of ParseUnlocked
func (mr *MockIAccountsContractMockRecorder) ParseUnlocked(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlocked", reflect.TypeOf((*MockIAccountsContract)(nil).ParseUnlocked), log)
}

// ParseUnlockedFromReceipt mocks base method
func (m *MockIAccountsContract) ParseUnlockedFromReceipt(receipt *types0.Receipt) ([]*contracts.AccountsUnlocked, error) {
	ret := m.ctrl.Call(m, "ParseUnlockedFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AccountsUnlocked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnlockedFromReceipt indicates an expected call of ParseUnlockedFromReceipt
func (mr *MockIAccountsContractMockRecorder) ParseUnlockedFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnlockedFromReceipt", reflect.TypeOf((*MockIAccountsContract)(nil).ParseUnlockedFromReceipt), receipt)
}

// WatchSignUp mocks base method
func (m *MockIAccountsContract) WatchSignUp(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsSignUp, owner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchSignUp", opts, sink, owner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSignUp indicates an expected call of WatchSignUp
func (mr *MockIAccountsContractMockRecorder) WatchSignUp(opts, sink, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSignUp", reflect.TypeOf((*MockIAccountsContract)(nil).WatchSignUp), opts, sink, owner)
}

// WatchTemporaryCreated mocks base method
func (m *MockIAccountsContract) WatchTemporaryCreated(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsTemporaryCreated, proxy []common.Address, identityHash []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTemporaryCreated", opts, sink, proxy, identityHash)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTemporaryCreated indicates an expected call of WatchTemporaryCreated
func (mr *MockIAccountsContractMockRecorder) WatchTemporaryCreated(opts, sink, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTemporaryCreated", reflect.TypeOf((*MockIAccountsContract)(nil).WatchTemporaryCreated), opts, sink, proxy, identityHash)
}

// WatchUnlocked mocks base method
func (m *MockIAccountsContract) WatchUnlocked(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsUnlocked, identityHash []common.Hash, accountId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnlocked", opts, sink, identityHash, accountId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnlocked indicates an expected call of WatchUnlocked
func (mr *MockIAccountsContractMockRecorder) WatchUnlocked(opts, sink, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnlocked", reflect.TypeOf((*MockIAccountsContract)(nil).WatchUnlocked), opts, sink, identityHash, accountId)
}
