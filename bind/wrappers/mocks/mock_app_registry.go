// Code generated by MockGen. DO NOT EDIT.
// Source: app_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/bind"
	contracts "github.com/airbloc/airbloc-go/bind/contracts"
	types "github.com/airbloc/airbloc-go/bind/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	types0 "github.com/klaytn/klaytn/blockchain/types"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIAppRegistryCalls is a mock of IAppRegistryCalls interface
type MockIAppRegistryCalls struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryCallsMockRecorder
}

// MockIAppRegistryCallsMockRecorder is the mock recorder for MockIAppRegistryCalls
type MockIAppRegistryCallsMockRecorder struct {
	mock *MockIAppRegistryCalls
}

// NewMockIAppRegistryCalls creates a new mock instance
func NewMockIAppRegistryCalls(ctrl *gomock.Controller) *MockIAppRegistryCalls {
	mock := &MockIAppRegistryCalls{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryCallsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryCalls) EXPECT() *MockIAppRegistryCallsMockRecorder {
	return m.recorder
}

// Exists mocks base method
func (m *MockIAppRegistryCalls) Exists(appName string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", appName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAppRegistryCallsMockRecorder) Exists(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAppRegistryCalls)(nil).Exists), appName)
}

// Get mocks base method
func (m *MockIAppRegistryCalls) Get(appName string) (types.App, error) {
	ret := m.ctrl.Call(m, "Get", appName)
	ret0, _ := ret[0].(types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIAppRegistryCallsMockRecorder) Get(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAppRegistryCalls)(nil).Get), appName)
}

// IsOwner mocks base method
func (m *MockIAppRegistryCalls) IsOwner(appName string, owner common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner", appName, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIAppRegistryCallsMockRecorder) IsOwner(appName, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIAppRegistryCalls)(nil).IsOwner), appName, owner)
}

// MockIAppRegistryTransacts is a mock of IAppRegistryTransacts interface
type MockIAppRegistryTransacts struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryTransactsMockRecorder
}

// MockIAppRegistryTransactsMockRecorder is the mock recorder for MockIAppRegistryTransacts
type MockIAppRegistryTransactsMockRecorder struct {
	mock *MockIAppRegistryTransacts
}

// NewMockIAppRegistryTransacts creates a new mock instance
func NewMockIAppRegistryTransacts(ctrl *gomock.Controller) *MockIAppRegistryTransacts {
	mock := &MockIAppRegistryTransacts{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryTransactsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryTransacts) EXPECT() *MockIAppRegistryTransactsMockRecorder {
	return m.recorder
}

// Register mocks base method
func (m *MockIAppRegistryTransacts) Register(ctx context.Context, opts *bind.TransactOpts, appName string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Register", ctx, opts, appName)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockIAppRegistryTransactsMockRecorder) Register(ctx, opts, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAppRegistryTransacts)(nil).Register), ctx, opts, appName)
}

// TransferAppOwner mocks base method
func (m *MockIAppRegistryTransacts) TransferAppOwner(ctx context.Context, opts *bind.TransactOpts, appName string, newOwner common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "TransferAppOwner", ctx, opts, appName, newOwner)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferAppOwner indicates an expected call of TransferAppOwner
func (mr *MockIAppRegistryTransactsMockRecorder) TransferAppOwner(ctx, opts, appName, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAppOwner", reflect.TypeOf((*MockIAppRegistryTransacts)(nil).TransferAppOwner), ctx, opts, appName, newOwner)
}

// Unregister mocks base method
func (m *MockIAppRegistryTransacts) Unregister(ctx context.Context, opts *bind.TransactOpts, appName string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Unregister", ctx, opts, appName)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unregister indicates an expected call of Unregister
func (mr *MockIAppRegistryTransactsMockRecorder) Unregister(ctx, opts, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockIAppRegistryTransacts)(nil).Unregister), ctx, opts, appName)
}

// MockIAppRegistryEvents is a mock of IAppRegistryEvents interface
type MockIAppRegistryEvents struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryEventsMockRecorder
}

// MockIAppRegistryEventsMockRecorder is the mock recorder for MockIAppRegistryEvents
type MockIAppRegistryEventsMockRecorder struct {
	mock *MockIAppRegistryEvents
}

// NewMockIAppRegistryEvents creates a new mock instance
func NewMockIAppRegistryEvents(ctrl *gomock.Controller) *MockIAppRegistryEvents {
	mock := &MockIAppRegistryEvents{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryEventsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryEvents) EXPECT() *MockIAppRegistryEventsMockRecorder {
	return m.recorder
}

// FilterAppOwnerTransferred mocks base method
func (m *MockIAppRegistryEvents) FilterAppOwnerTransferred(opts *bind0.FilterOpts, appAddr, oldOwner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterAppOwnerTransferred", opts, appAddr, oldOwner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAppOwnerTransferred indicates an expected call of FilterAppOwnerTransferred
func (mr *MockIAppRegistryEventsMockRecorder) FilterAppOwnerTransferred(opts, appAddr, oldOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryEvents)(nil).FilterAppOwnerTransferred), opts, appAddr, oldOwner)
}

// FilterRegistration mocks base method
func (m *MockIAppRegistryEvents) FilterRegistration(opts *bind0.FilterOpts, appAddr []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts, appAddr)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIAppRegistryEventsMockRecorder) FilterRegistration(opts, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIAppRegistryEvents)(nil).FilterRegistration), opts, appAddr)
}

// FilterUnregistration mocks base method
func (m *MockIAppRegistryEvents) FilterUnregistration(opts *bind0.FilterOpts, appAddr []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts, appAddr)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIAppRegistryEventsMockRecorder) FilterUnregistration(opts, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIAppRegistryEvents)(nil).FilterUnregistration), opts, appAddr)
}

// ParseAppOwnerTransferred mocks base method
func (m *MockIAppRegistryEvents) ParseAppOwnerTransferred(log types0.Log) (*contracts.AppRegistryAppOwnerTransferred, error) {
	ret := m.ctrl.Call(m, "ParseAppOwnerTransferred", log)
	ret0, _ := ret[0].(*contracts.AppRegistryAppOwnerTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppOwnerTransferred indicates an expected call of ParseAppOwnerTransferred
func (mr *MockIAppRegistryEventsMockRecorder) ParseAppOwnerTransferred(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryEvents)(nil).ParseAppOwnerTransferred), log)
}

// ParseAppOwnerTransferredFromReceipt mocks base method
func (m *MockIAppRegistryEvents) ParseAppOwnerTransferredFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryAppOwnerTransferred, error) {
	ret := m.ctrl.Call(m, "ParseAppOwnerTransferredFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryAppOwnerTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppOwnerTransferredFromReceipt indicates an expected call of ParseAppOwnerTransferredFromReceipt
func (mr *MockIAppRegistryEventsMockRecorder) ParseAppOwnerTransferredFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppOwnerTransferredFromReceipt", reflect.TypeOf((*MockIAppRegistryEvents)(nil).ParseAppOwnerTransferredFromReceipt), receipt)
}

// ParseRegistration mocks base method
func (m *MockIAppRegistryEvents) ParseRegistration(log types0.Log) (*contracts.AppRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistration", log)
	ret0, _ := ret[0].(*contracts.AppRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistration indicates an expected call of ParseRegistration
func (mr *MockIAppRegistryEventsMockRecorder) ParseRegistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistration", reflect.TypeOf((*MockIAppRegistryEvents)(nil).ParseRegistration), log)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIAppRegistryEvents) ParseRegistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIAppRegistryEventsMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryEvents)(nil).ParseRegistrationFromReceipt), receipt)
}

// ParseUnregistration mocks base method
func (m *MockIAppRegistryEvents) ParseUnregistration(log types0.Log) (*contracts.AppRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistration", log)
	ret0, _ := ret[0].(*contracts.AppRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistration indicates an expected call of ParseUnregistration
func (mr *MockIAppRegistryEventsMockRecorder) ParseUnregistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistration", reflect.TypeOf((*MockIAppRegistryEvents)(nil).ParseUnregistration), log)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIAppRegistryEvents) ParseUnregistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIAppRegistryEventsMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryEvents)(nil).ParseUnregistrationFromReceipt), receipt)
}

// WatchAppOwnerTransferred mocks base method
func (m *MockIAppRegistryEvents) WatchAppOwnerTransferred(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryAppOwnerTransferred, appAddr, oldOwner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchAppOwnerTransferred", opts, sink, appAddr, oldOwner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAppOwnerTransferred indicates an expected call of WatchAppOwnerTransferred
func (mr *MockIAppRegistryEventsMockRecorder) WatchAppOwnerTransferred(opts, sink, appAddr, oldOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryEvents)(nil).WatchAppOwnerTransferred), opts, sink, appAddr, oldOwner)
}

// WatchRegistration mocks base method
func (m *MockIAppRegistryEvents) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryRegistration, appAddr []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink, appAddr)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIAppRegistryEventsMockRecorder) WatchRegistration(opts, sink, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIAppRegistryEvents)(nil).WatchRegistration), opts, sink, appAddr)
}

// WatchUnregistration mocks base method
func (m *MockIAppRegistryEvents) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryUnregistration, appAddr []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink, appAddr)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIAppRegistryEventsMockRecorder) WatchUnregistration(opts, sink, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIAppRegistryEvents)(nil).WatchUnregistration), opts, sink, appAddr)
}

// MockIAppRegistryFilterer is a mock of IAppRegistryFilterer interface
type MockIAppRegistryFilterer struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryFiltererMockRecorder
}

// MockIAppRegistryFiltererMockRecorder is the mock recorder for MockIAppRegistryFilterer
type MockIAppRegistryFiltererMockRecorder struct {
	mock *MockIAppRegistryFilterer
}

// NewMockIAppRegistryFilterer creates a new mock instance
func NewMockIAppRegistryFilterer(ctrl *gomock.Controller) *MockIAppRegistryFilterer {
	mock := &MockIAppRegistryFilterer{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryFiltererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryFilterer) EXPECT() *MockIAppRegistryFiltererMockRecorder {
	return m.recorder
}

// FilterAppOwnerTransferred mocks base method
func (m *MockIAppRegistryFilterer) FilterAppOwnerTransferred(opts *bind0.FilterOpts, appAddr, oldOwner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterAppOwnerTransferred", opts, appAddr, oldOwner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAppOwnerTransferred indicates an expected call of FilterAppOwnerTransferred
func (mr *MockIAppRegistryFiltererMockRecorder) FilterAppOwnerTransferred(opts, appAddr, oldOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryFilterer)(nil).FilterAppOwnerTransferred), opts, appAddr, oldOwner)
}

// FilterRegistration mocks base method
func (m *MockIAppRegistryFilterer) FilterRegistration(opts *bind0.FilterOpts, appAddr []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts, appAddr)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIAppRegistryFiltererMockRecorder) FilterRegistration(opts, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIAppRegistryFilterer)(nil).FilterRegistration), opts, appAddr)
}

// FilterUnregistration mocks base method
func (m *MockIAppRegistryFilterer) FilterUnregistration(opts *bind0.FilterOpts, appAddr []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts, appAddr)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIAppRegistryFiltererMockRecorder) FilterUnregistration(opts, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIAppRegistryFilterer)(nil).FilterUnregistration), opts, appAddr)
}

// MockIAppRegistryParser is a mock of IAppRegistryParser interface
type MockIAppRegistryParser struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryParserMockRecorder
}

// MockIAppRegistryParserMockRecorder is the mock recorder for MockIAppRegistryParser
type MockIAppRegistryParserMockRecorder struct {
	mock *MockIAppRegistryParser
}

// NewMockIAppRegistryParser creates a new mock instance
func NewMockIAppRegistryParser(ctrl *gomock.Controller) *MockIAppRegistryParser {
	mock := &MockIAppRegistryParser{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryParser) EXPECT() *MockIAppRegistryParserMockRecorder {
	return m.recorder
}

// ParseAppOwnerTransferred mocks base method
func (m *MockIAppRegistryParser) ParseAppOwnerTransferred(log types0.Log) (*contracts.AppRegistryAppOwnerTransferred, error) {
	ret := m.ctrl.Call(m, "ParseAppOwnerTransferred", log)
	ret0, _ := ret[0].(*contracts.AppRegistryAppOwnerTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppOwnerTransferred indicates an expected call of ParseAppOwnerTransferred
func (mr *MockIAppRegistryParserMockRecorder) ParseAppOwnerTransferred(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryParser)(nil).ParseAppOwnerTransferred), log)
}

// ParseAppOwnerTransferredFromReceipt mocks base method
func (m *MockIAppRegistryParser) ParseAppOwnerTransferredFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryAppOwnerTransferred, error) {
	ret := m.ctrl.Call(m, "ParseAppOwnerTransferredFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryAppOwnerTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppOwnerTransferredFromReceipt indicates an expected call of ParseAppOwnerTransferredFromReceipt
func (mr *MockIAppRegistryParserMockRecorder) ParseAppOwnerTransferredFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppOwnerTransferredFromReceipt", reflect.TypeOf((*MockIAppRegistryParser)(nil).ParseAppOwnerTransferredFromReceipt), receipt)
}

// ParseRegistration mocks base method
func (m *MockIAppRegistryParser) ParseRegistration(log types0.Log) (*contracts.AppRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistration", log)
	ret0, _ := ret[0].(*contracts.AppRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistration indicates an expected call of ParseRegistration
func (mr *MockIAppRegistryParserMockRecorder) ParseRegistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistration", reflect.TypeOf((*MockIAppRegistryParser)(nil).ParseRegistration), log)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIAppRegistryParser) ParseRegistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIAppRegistryParserMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryParser)(nil).ParseRegistrationFromReceipt), receipt)
}

// ParseUnregistration mocks base method
func (m *MockIAppRegistryParser) ParseUnregistration(log types0.Log) (*contracts.AppRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistration", log)
	ret0, _ := ret[0].(*contracts.AppRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistration indicates an expected call of ParseUnregistration
func (mr *MockIAppRegistryParserMockRecorder) ParseUnregistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistration", reflect.TypeOf((*MockIAppRegistryParser)(nil).ParseUnregistration), log)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIAppRegistryParser) ParseUnregistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIAppRegistryParserMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryParser)(nil).ParseUnregistrationFromReceipt), receipt)
}

// MockIAppRegistryWatcher is a mock of IAppRegistryWatcher interface
type MockIAppRegistryWatcher struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryWatcherMockRecorder
}

// MockIAppRegistryWatcherMockRecorder is the mock recorder for MockIAppRegistryWatcher
type MockIAppRegistryWatcherMockRecorder struct {
	mock *MockIAppRegistryWatcher
}

// NewMockIAppRegistryWatcher creates a new mock instance
func NewMockIAppRegistryWatcher(ctrl *gomock.Controller) *MockIAppRegistryWatcher {
	mock := &MockIAppRegistryWatcher{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryWatcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryWatcher) EXPECT() *MockIAppRegistryWatcherMockRecorder {
	return m.recorder
}

// WatchAppOwnerTransferred mocks base method
func (m *MockIAppRegistryWatcher) WatchAppOwnerTransferred(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryAppOwnerTransferred, appAddr, oldOwner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchAppOwnerTransferred", opts, sink, appAddr, oldOwner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAppOwnerTransferred indicates an expected call of WatchAppOwnerTransferred
func (mr *MockIAppRegistryWatcherMockRecorder) WatchAppOwnerTransferred(opts, sink, appAddr, oldOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryWatcher)(nil).WatchAppOwnerTransferred), opts, sink, appAddr, oldOwner)
}

// WatchRegistration mocks base method
func (m *MockIAppRegistryWatcher) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryRegistration, appAddr []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink, appAddr)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIAppRegistryWatcherMockRecorder) WatchRegistration(opts, sink, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIAppRegistryWatcher)(nil).WatchRegistration), opts, sink, appAddr)
}

// WatchUnregistration mocks base method
func (m *MockIAppRegistryWatcher) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryUnregistration, appAddr []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink, appAddr)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIAppRegistryWatcherMockRecorder) WatchUnregistration(opts, sink, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIAppRegistryWatcher)(nil).WatchUnregistration), opts, sink, appAddr)
}

// MockIAppRegistryContract is a mock of IAppRegistryContract interface
type MockIAppRegistryContract struct {
	ctrl     *gomock.Controller
	recorder *MockIAppRegistryContractMockRecorder
}

// MockIAppRegistryContractMockRecorder is the mock recorder for MockIAppRegistryContract
type MockIAppRegistryContractMockRecorder struct {
	mock *MockIAppRegistryContract
}

// NewMockIAppRegistryContract creates a new mock instance
func NewMockIAppRegistryContract(ctrl *gomock.Controller) *MockIAppRegistryContract {
	mock := &MockIAppRegistryContract{ctrl: ctrl}
	mock.recorder = &MockIAppRegistryContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAppRegistryContract) EXPECT() *MockIAppRegistryContractMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIAppRegistryContract) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIAppRegistryContractMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIAppRegistryContract)(nil).Address))
}

// TxHash mocks base method
func (m *MockIAppRegistryContract) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIAppRegistryContractMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIAppRegistryContract)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIAppRegistryContract) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIAppRegistryContractMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIAppRegistryContract)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIAppRegistryContract) Exists(appName string) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", appName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAppRegistryContractMockRecorder) Exists(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAppRegistryContract)(nil).Exists), appName)
}

// Get mocks base method
func (m *MockIAppRegistryContract) Get(appName string) (types.App, error) {
	ret := m.ctrl.Call(m, "Get", appName)
	ret0, _ := ret[0].(types.App)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIAppRegistryContractMockRecorder) Get(appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIAppRegistryContract)(nil).Get), appName)
}

// IsOwner mocks base method
func (m *MockIAppRegistryContract) IsOwner(appName string, owner common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "IsOwner", appName, owner)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockIAppRegistryContractMockRecorder) IsOwner(appName, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockIAppRegistryContract)(nil).IsOwner), appName, owner)
}

// Register mocks base method
func (m *MockIAppRegistryContract) Register(ctx context.Context, opts *bind.TransactOpts, appName string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Register", ctx, opts, appName)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register
func (mr *MockIAppRegistryContractMockRecorder) Register(ctx, opts, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAppRegistryContract)(nil).Register), ctx, opts, appName)
}

// TransferAppOwner mocks base method
func (m *MockIAppRegistryContract) TransferAppOwner(ctx context.Context, opts *bind.TransactOpts, appName string, newOwner common.Address) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "TransferAppOwner", ctx, opts, appName, newOwner)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TransferAppOwner indicates an expected call of TransferAppOwner
func (mr *MockIAppRegistryContractMockRecorder) TransferAppOwner(ctx, opts, appName, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TransferAppOwner", reflect.TypeOf((*MockIAppRegistryContract)(nil).TransferAppOwner), ctx, opts, appName, newOwner)
}

// Unregister mocks base method
func (m *MockIAppRegistryContract) Unregister(ctx context.Context, opts *bind.TransactOpts, appName string) (*types0.Receipt, error) {
	ret := m.ctrl.Call(m, "Unregister", ctx, opts, appName)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Unregister indicates an expected call of Unregister
func (mr *MockIAppRegistryContractMockRecorder) Unregister(ctx, opts, appName interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unregister", reflect.TypeOf((*MockIAppRegistryContract)(nil).Unregister), ctx, opts, appName)
}

// FilterAppOwnerTransferred mocks base method
func (m *MockIAppRegistryContract) FilterAppOwnerTransferred(opts *bind0.FilterOpts, appAddr, oldOwner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterAppOwnerTransferred", opts, appAddr, oldOwner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterAppOwnerTransferred indicates an expected call of FilterAppOwnerTransferred
func (mr *MockIAppRegistryContractMockRecorder) FilterAppOwnerTransferred(opts, appAddr, oldOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryContract)(nil).FilterAppOwnerTransferred), opts, appAddr, oldOwner)
}

// FilterRegistration mocks base method
func (m *MockIAppRegistryContract) FilterRegistration(opts *bind0.FilterOpts, appAddr []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts, appAddr)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIAppRegistryContractMockRecorder) FilterRegistration(opts, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIAppRegistryContract)(nil).FilterRegistration), opts, appAddr)
}

// FilterUnregistration mocks base method
func (m *MockIAppRegistryContract) FilterUnregistration(opts *bind0.FilterOpts, appAddr []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts, appAddr)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIAppRegistryContractMockRecorder) FilterUnregistration(opts, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIAppRegistryContract)(nil).FilterUnregistration), opts, appAddr)
}

// ParseAppOwnerTransferred mocks base method
func (m *MockIAppRegistryContract) ParseAppOwnerTransferred(log types0.Log) (*contracts.AppRegistryAppOwnerTransferred, error) {
	ret := m.ctrl.Call(m, "ParseAppOwnerTransferred", log)
	ret0, _ := ret[0].(*contracts.AppRegistryAppOwnerTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppOwnerTransferred indicates an expected call of ParseAppOwnerTransferred
func (mr *MockIAppRegistryContractMockRecorder) ParseAppOwnerTransferred(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseAppOwnerTransferred), log)
}

// ParseAppOwnerTransferredFromReceipt mocks base method
func (m *MockIAppRegistryContract) ParseAppOwnerTransferredFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryAppOwnerTransferred, error) {
	ret := m.ctrl.Call(m, "ParseAppOwnerTransferredFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryAppOwnerTransferred)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseAppOwnerTransferredFromReceipt indicates an expected call of ParseAppOwnerTransferredFromReceipt
func (mr *MockIAppRegistryContractMockRecorder) ParseAppOwnerTransferredFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseAppOwnerTransferredFromReceipt", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseAppOwnerTransferredFromReceipt), receipt)
}

// ParseRegistration mocks base method
func (m *MockIAppRegistryContract) ParseRegistration(log types0.Log) (*contracts.AppRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistration", log)
	ret0, _ := ret[0].(*contracts.AppRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistration indicates an expected call of ParseRegistration
func (mr *MockIAppRegistryContractMockRecorder) ParseRegistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistration", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseRegistration), log)
}

// ParseRegistrationFromReceipt mocks base method
func (m *MockIAppRegistryContract) ParseRegistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryRegistration, error) {
	ret := m.ctrl.Call(m, "ParseRegistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryRegistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRegistrationFromReceipt indicates an expected call of ParseRegistrationFromReceipt
func (mr *MockIAppRegistryContractMockRecorder) ParseRegistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRegistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseRegistrationFromReceipt), receipt)
}

// ParseUnregistration mocks base method
func (m *MockIAppRegistryContract) ParseUnregistration(log types0.Log) (*contracts.AppRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistration", log)
	ret0, _ := ret[0].(*contracts.AppRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistration indicates an expected call of ParseUnregistration
func (mr *MockIAppRegistryContractMockRecorder) ParseUnregistration(log interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistration", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseUnregistration), log)
}

// ParseUnregistrationFromReceipt mocks base method
func (m *MockIAppRegistryContract) ParseUnregistrationFromReceipt(receipt *types0.Receipt) ([]*contracts.AppRegistryUnregistration, error) {
	ret := m.ctrl.Call(m, "ParseUnregistrationFromReceipt", receipt)
	ret0, _ := ret[0].([]*contracts.AppRegistryUnregistration)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseUnregistrationFromReceipt indicates an expected call of ParseUnregistrationFromReceipt
func (mr *MockIAppRegistryContractMockRecorder) ParseUnregistrationFromReceipt(receipt interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseUnregistrationFromReceipt", reflect.TypeOf((*MockIAppRegistryContract)(nil).ParseUnregistrationFromReceipt), receipt)
}

// WatchAppOwnerTransferred mocks base method
func (m *MockIAppRegistryContract) WatchAppOwnerTransferred(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryAppOwnerTransferred, appAddr, oldOwner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchAppOwnerTransferred", opts, sink, appAddr, oldOwner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchAppOwnerTransferred indicates an expected call of WatchAppOwnerTransferred
func (mr *MockIAppRegistryContractMockRecorder) WatchAppOwnerTransferred(opts, sink, appAddr, oldOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchAppOwnerTransferred", reflect.TypeOf((*MockIAppRegistryContract)(nil).WatchAppOwnerTransferred), opts, sink, appAddr, oldOwner)
}

// WatchRegistration mocks base method
func (m *MockIAppRegistryContract) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryRegistration, appAddr []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink, appAddr)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIAppRegistryContractMockRecorder) WatchRegistration(opts, sink, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIAppRegistryContract)(nil).WatchRegistration), opts, sink, appAddr)
}

// WatchUnregistration mocks base method
func (m *MockIAppRegistryContract) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.AppRegistryUnregistration, appAddr []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink, appAddr)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIAppRegistryContractMockRecorder) WatchUnregistration(opts, sink, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIAppRegistryContract)(nil).WatchUnregistration), opts, sink, appAddr)
}
