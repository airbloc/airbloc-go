// Code generated by MockGen. DO NOT EDIT.
// Source: consents.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/shared/adapter"
	contracts "github.com/airbloc/airbloc-go/shared/adapter/contracts"
	types "github.com/airbloc/airbloc-go/shared/adapter/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIConsentsManager is a mock of IConsentsManager interface
type MockIConsentsManager struct {
	ctrl     *gomock.Controller
	recorder *MockIConsentsManagerMockRecorder
}

// MockIConsentsManagerMockRecorder is the mock recorder for MockIConsentsManager
type MockIConsentsManagerMockRecorder struct {
	mock *MockIConsentsManager
}

// NewMockIConsentsManager creates a new mock instance
func NewMockIConsentsManager(ctrl *gomock.Controller) *MockIConsentsManager {
	mock := &MockIConsentsManager{ctrl: ctrl}
	mock.recorder = &MockIConsentsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIConsentsManager) EXPECT() *MockIConsentsManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIConsentsManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIConsentsManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIConsentsManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIConsentsManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIConsentsManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIConsentsManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIConsentsManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIConsentsManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIConsentsManager)(nil).CreatedAt))
}

// IsAllowed mocks base method
func (m *MockIConsentsManager) IsAllowed(userId types.ID, appName string, action uint8, dataType string) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowed", userId, appName, action, dataType)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowed indicates an expected call of IsAllowed
func (mr *MockIConsentsManagerMockRecorder) IsAllowed(userId, appName, action, dataType interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowed", reflect.TypeOf((*MockIConsentsManager)(nil).IsAllowed), userId, appName, action, dataType)
}

// IsAllowedAt mocks base method
func (m *MockIConsentsManager) IsAllowedAt(userId types.ID, appName string, action uint8, dataType string, blockNumber *big.Int) (bool, error) {
	ret := m.ctrl.Call(m, "IsAllowedAt", userId, appName, action, dataType, blockNumber)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsAllowedAt indicates an expected call of IsAllowedAt
func (mr *MockIConsentsManagerMockRecorder) IsAllowedAt(userId, appName, action, dataType, blockNumber interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsAllowedAt", reflect.TypeOf((*MockIConsentsManager)(nil).IsAllowedAt), userId, appName, action, dataType, blockNumber)
}

// Consent mocks base method
func (m *MockIConsentsManager) Consent(ctx context.Context, opts *bind.TransactOpts, appName string, consentData types.ConsentData) error {
	ret := m.ctrl.Call(m, "Consent", ctx, opts, appName, consentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// Consent indicates an expected call of Consent
func (mr *MockIConsentsManagerMockRecorder) Consent(ctx, opts, appName, consentData interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Consent", reflect.TypeOf((*MockIConsentsManager)(nil).Consent), ctx, opts, appName, consentData)
}

// ConsentByController mocks base method
func (m *MockIConsentsManager) ConsentByController(ctx context.Context, opts *bind.TransactOpts, userId types.ID, appName string, consentData types.ConsentData) error {
	ret := m.ctrl.Call(m, "ConsentByController", ctx, opts, userId, appName, consentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsentByController indicates an expected call of ConsentByController
func (mr *MockIConsentsManagerMockRecorder) ConsentByController(ctx, opts, userId, appName, consentData interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentByController", reflect.TypeOf((*MockIConsentsManager)(nil).ConsentByController), ctx, opts, userId, appName, consentData)
}

// ConsentMany mocks base method
func (m *MockIConsentsManager) ConsentMany(ctx context.Context, opts *bind.TransactOpts, appName string, consentData []types.ConsentData) error {
	ret := m.ctrl.Call(m, "ConsentMany", ctx, opts, appName, consentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsentMany indicates an expected call of ConsentMany
func (mr *MockIConsentsManagerMockRecorder) ConsentMany(ctx, opts, appName, consentData interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentMany", reflect.TypeOf((*MockIConsentsManager)(nil).ConsentMany), ctx, opts, appName, consentData)
}

// ConsentManyByController mocks base method
func (m *MockIConsentsManager) ConsentManyByController(ctx context.Context, opts *bind.TransactOpts, userId types.ID, appName string, consentData []types.ConsentData) error {
	ret := m.ctrl.Call(m, "ConsentManyByController", ctx, opts, userId, appName, consentData)
	ret0, _ := ret[0].(error)
	return ret0
}

// ConsentManyByController indicates an expected call of ConsentManyByController
func (mr *MockIConsentsManagerMockRecorder) ConsentManyByController(ctx, opts, userId, appName, consentData interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConsentManyByController", reflect.TypeOf((*MockIConsentsManager)(nil).ConsentManyByController), ctx, opts, userId, appName, consentData)
}

// ModifyConsentByController mocks base method
func (m *MockIConsentsManager) ModifyConsentByController(ctx context.Context, opts *bind.TransactOpts, userId types.ID, appName string, consentData types.ConsentData, passwordSignature []byte) error {
	ret := m.ctrl.Call(m, "ModifyConsentByController", ctx, opts, userId, appName, consentData, passwordSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyConsentByController indicates an expected call of ModifyConsentByController
func (mr *MockIConsentsManagerMockRecorder) ModifyConsentByController(ctx, opts, userId, appName, consentData, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConsentByController", reflect.TypeOf((*MockIConsentsManager)(nil).ModifyConsentByController), ctx, opts, userId, appName, consentData, passwordSignature)
}

// ModifyConsentManyByController mocks base method
func (m *MockIConsentsManager) ModifyConsentManyByController(ctx context.Context, opts *bind.TransactOpts, userId types.ID, appName string, consentData []types.ConsentData, passwordSignature []byte) error {
	ret := m.ctrl.Call(m, "ModifyConsentManyByController", ctx, opts, userId, appName, consentData, passwordSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// ModifyConsentManyByController indicates an expected call of ModifyConsentManyByController
func (mr *MockIConsentsManagerMockRecorder) ModifyConsentManyByController(ctx, opts, userId, appName, consentData, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyConsentManyByController", reflect.TypeOf((*MockIConsentsManager)(nil).ModifyConsentManyByController), ctx, opts, userId, appName, consentData, passwordSignature)
}

// FilterConsented mocks base method
func (m *MockIConsentsManager) FilterConsented(opts *bind0.FilterOpts, action []uint8, userId []types.ID, appAddr []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterConsented", opts, action, userId, appAddr)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterConsented indicates an expected call of FilterConsented
func (mr *MockIConsentsManagerMockRecorder) FilterConsented(opts, action, userId, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterConsented", reflect.TypeOf((*MockIConsentsManager)(nil).FilterConsented), opts, action, userId, appAddr)
}

// WatchConsented mocks base method
func (m *MockIConsentsManager) WatchConsented(opts *bind0.WatchOpts, sink chan<- *contracts.ConsentsConsented, action []uint8, userId []types.ID, appAddr []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchConsented", opts, sink, action, userId, appAddr)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchConsented indicates an expected call of WatchConsented
func (mr *MockIConsentsManagerMockRecorder) WatchConsented(opts, sink, action, userId, appAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchConsented", reflect.TypeOf((*MockIConsentsManager)(nil).WatchConsented), opts, sink, action, userId, appAddr)
}
