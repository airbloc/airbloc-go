// Code generated by MockGen. DO NOT EDIT.
// Source: accounts.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/shared/adapter"
	contracts "github.com/airbloc/airbloc-go/shared/adapter/contracts"
	types "github.com/airbloc/airbloc-go/shared/adapter/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIAccountsManager is a mock of IAccountsManager interface
type MockIAccountsManager struct {
	ctrl     *gomock.Controller
	recorder *MockIAccountsManagerMockRecorder
}

// MockIAccountsManagerMockRecorder is the mock recorder for MockIAccountsManager
type MockIAccountsManagerMockRecorder struct {
	mock *MockIAccountsManager
}

// NewMockIAccountsManager creates a new mock instance
func NewMockIAccountsManager(ctrl *gomock.Controller) *MockIAccountsManager {
	mock := &MockIAccountsManager{ctrl: ctrl}
	mock.recorder = &MockIAccountsManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIAccountsManager) EXPECT() *MockIAccountsManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIAccountsManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIAccountsManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIAccountsManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIAccountsManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIAccountsManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIAccountsManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIAccountsManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIAccountsManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIAccountsManager)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIAccountsManager) Exists(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIAccountsManagerMockRecorder) Exists(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIAccountsManager)(nil).Exists), accountId)
}

// GetAccount mocks base method
func (m *MockIAccountsManager) GetAccount(accountId types.ID) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccount", accountId)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockIAccountsManagerMockRecorder) GetAccount(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccount), accountId)
}

// GetAccountByIdentityHash mocks base method
func (m *MockIAccountsManager) GetAccountByIdentityHash(identityHash common.Hash) (types.Account, error) {
	ret := m.ctrl.Call(m, "GetAccountByIdentityHash", identityHash)
	ret0, _ := ret[0].(types.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountByIdentityHash indicates an expected call of GetAccountByIdentityHash
func (mr *MockIAccountsManagerMockRecorder) GetAccountByIdentityHash(identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountByIdentityHash", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccountByIdentityHash), identityHash)
}

// GetAccountId mocks base method
func (m *MockIAccountsManager) GetAccountId(sender common.Address) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountId", sender)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountId indicates an expected call of GetAccountId
func (mr *MockIAccountsManagerMockRecorder) GetAccountId(sender interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountId", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccountId), sender)
}

// GetAccountIdByIdentityHash mocks base method
func (m *MockIAccountsManager) GetAccountIdByIdentityHash(identityHash common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdByIdentityHash", identityHash)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdByIdentityHash indicates an expected call of GetAccountIdByIdentityHash
func (mr *MockIAccountsManagerMockRecorder) GetAccountIdByIdentityHash(identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdByIdentityHash", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccountIdByIdentityHash), identityHash)
}

// GetAccountIdFromSignature mocks base method
func (m *MockIAccountsManager) GetAccountIdFromSignature(messageHash common.Hash, signature []byte) (types.ID, error) {
	ret := m.ctrl.Call(m, "GetAccountIdFromSignature", messageHash, signature)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountIdFromSignature indicates an expected call of GetAccountIdFromSignature
func (mr *MockIAccountsManagerMockRecorder) GetAccountIdFromSignature(messageHash, signature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountIdFromSignature", reflect.TypeOf((*MockIAccountsManager)(nil).GetAccountIdFromSignature), messageHash, signature)
}

// IsControllerOf mocks base method
func (m *MockIAccountsManager) IsControllerOf(sender common.Address, accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsControllerOf", sender, accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsControllerOf indicates an expected call of IsControllerOf
func (mr *MockIAccountsManagerMockRecorder) IsControllerOf(sender, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsControllerOf", reflect.TypeOf((*MockIAccountsManager)(nil).IsControllerOf), sender, accountId)
}

// IsTemporary mocks base method
func (m *MockIAccountsManager) IsTemporary(accountId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "IsTemporary", accountId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTemporary indicates an expected call of IsTemporary
func (mr *MockIAccountsManagerMockRecorder) IsTemporary(accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTemporary", reflect.TypeOf((*MockIAccountsManager)(nil).IsTemporary), accountId)
}

// Create mocks base method
func (m *MockIAccountsManager) Create(ctx context.Context, opts *bind.TransactOpts) (types.ID, error) {
	ret := m.ctrl.Call(m, "Create", ctx, opts)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockIAccountsManagerMockRecorder) Create(ctx, opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIAccountsManager)(nil).Create), ctx, opts)
}

// CreateTemporary mocks base method
func (m *MockIAccountsManager) CreateTemporary(ctx context.Context, opts *bind.TransactOpts, identityHash common.Hash) (types.ID, error) {
	ret := m.ctrl.Call(m, "CreateTemporary", ctx, opts, identityHash)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTemporary indicates an expected call of CreateTemporary
func (mr *MockIAccountsManagerMockRecorder) CreateTemporary(ctx, opts, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTemporary", reflect.TypeOf((*MockIAccountsManager)(nil).CreateTemporary), ctx, opts, identityHash)
}

// SetController mocks base method
func (m *MockIAccountsManager) SetController(ctx context.Context, opts *bind.TransactOpts, controller common.Address) error {
	ret := m.ctrl.Call(m, "SetController", ctx, opts, controller)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetController indicates an expected call of SetController
func (mr *MockIAccountsManagerMockRecorder) SetController(ctx, opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetController", reflect.TypeOf((*MockIAccountsManager)(nil).SetController), ctx, opts, controller)
}

// UnlockTemporary mocks base method
func (m *MockIAccountsManager) UnlockTemporary(ctx context.Context, opts *bind.TransactOpts, identityPreimage common.Hash, newOwner common.Address, passwordSignature []byte) error {
	ret := m.ctrl.Call(m, "UnlockTemporary", ctx, opts, identityPreimage, newOwner, passwordSignature)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlockTemporary indicates an expected call of UnlockTemporary
func (mr *MockIAccountsManagerMockRecorder) UnlockTemporary(ctx, opts, identityPreimage, newOwner, passwordSignature interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlockTemporary", reflect.TypeOf((*MockIAccountsManager)(nil).UnlockTemporary), ctx, opts, identityPreimage, newOwner, passwordSignature)
}

// FilterSignUp mocks base method
func (m *MockIAccountsManager) FilterSignUp(opts *bind0.FilterOpts, owner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterSignUp", opts, owner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterSignUp indicates an expected call of FilterSignUp
func (mr *MockIAccountsManagerMockRecorder) FilterSignUp(opts, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterSignUp", reflect.TypeOf((*MockIAccountsManager)(nil).FilterSignUp), opts, owner)
}

// FilterTemporaryCreated mocks base method
func (m *MockIAccountsManager) FilterTemporaryCreated(opts *bind0.FilterOpts, proxy []common.Address, identityHash []common.Hash) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterTemporaryCreated", opts, proxy, identityHash)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterTemporaryCreated indicates an expected call of FilterTemporaryCreated
func (mr *MockIAccountsManagerMockRecorder) FilterTemporaryCreated(opts, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterTemporaryCreated", reflect.TypeOf((*MockIAccountsManager)(nil).FilterTemporaryCreated), opts, proxy, identityHash)
}

// FilterUnlocked mocks base method
func (m *MockIAccountsManager) FilterUnlocked(opts *bind0.FilterOpts, identityHash []common.Hash, accountId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnlocked", opts, identityHash, accountId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnlocked indicates an expected call of FilterUnlocked
func (mr *MockIAccountsManagerMockRecorder) FilterUnlocked(opts, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnlocked", reflect.TypeOf((*MockIAccountsManager)(nil).FilterUnlocked), opts, identityHash, accountId)
}

// WatchSignUp mocks base method
func (m *MockIAccountsManager) WatchSignUp(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsSignUp, owner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchSignUp", opts, sink, owner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchSignUp indicates an expected call of WatchSignUp
func (mr *MockIAccountsManagerMockRecorder) WatchSignUp(opts, sink, owner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchSignUp", reflect.TypeOf((*MockIAccountsManager)(nil).WatchSignUp), opts, sink, owner)
}

// WatchTemporaryCreated mocks base method
func (m *MockIAccountsManager) WatchTemporaryCreated(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsTemporaryCreated, proxy []common.Address, identityHash []common.Hash) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchTemporaryCreated", opts, sink, proxy, identityHash)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchTemporaryCreated indicates an expected call of WatchTemporaryCreated
func (mr *MockIAccountsManagerMockRecorder) WatchTemporaryCreated(opts, sink, proxy, identityHash interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchTemporaryCreated", reflect.TypeOf((*MockIAccountsManager)(nil).WatchTemporaryCreated), opts, sink, proxy, identityHash)
}

// WatchUnlocked mocks base method
func (m *MockIAccountsManager) WatchUnlocked(opts *bind0.WatchOpts, sink chan<- *contracts.AccountsUnlocked, identityHash []common.Hash, accountId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnlocked", opts, sink, identityHash, accountId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnlocked indicates an expected call of WatchUnlocked
func (mr *MockIAccountsManagerMockRecorder) WatchUnlocked(opts, sink, identityHash, accountId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnlocked", reflect.TypeOf((*MockIAccountsManager)(nil).WatchUnlocked), opts, sink, identityHash, accountId)
}
