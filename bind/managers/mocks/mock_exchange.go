// Code generated by MockGen. DO NOT EDIT.
// Source: exchange.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/bind"
	contracts "github.com/airbloc/airbloc-go/bind/contracts"
	types "github.com/airbloc/airbloc-go/bind/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIExchangeManager is a mock of IExchangeManager interface
type MockIExchangeManager struct {
	ctrl     *gomock.Controller
	recorder *MockIExchangeManagerMockRecorder
}

// MockIExchangeManagerMockRecorder is the mock recorder for MockIExchangeManager
type MockIExchangeManagerMockRecorder struct {
	mock *MockIExchangeManager
}

// NewMockIExchangeManager creates a new mock instance
func NewMockIExchangeManager(ctrl *gomock.Controller) *MockIExchangeManager {
	mock := &MockIExchangeManager{ctrl: ctrl}
	mock.recorder = &MockIExchangeManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIExchangeManager) EXPECT() *MockIExchangeManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIExchangeManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIExchangeManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIExchangeManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIExchangeManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIExchangeManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIExchangeManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIExchangeManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIExchangeManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIExchangeManager)(nil).CreatedAt))
}

// GetOffer mocks base method
func (m *MockIExchangeManager) GetOffer(offerId types.ID) (types.Offer, error) {
	ret := m.ctrl.Call(m, "GetOffer", offerId)
	ret0, _ := ret[0].(types.Offer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOffer indicates an expected call of GetOffer
func (mr *MockIExchangeManagerMockRecorder) GetOffer(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOffer", reflect.TypeOf((*MockIExchangeManager)(nil).GetOffer), offerId)
}

// GetOfferMembers mocks base method
func (m *MockIExchangeManager) GetOfferMembers(offerId types.ID) (common.Address, common.Address, error) {
	ret := m.ctrl.Call(m, "GetOfferMembers", offerId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(common.Address)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetOfferMembers indicates an expected call of GetOfferMembers
func (mr *MockIExchangeManagerMockRecorder) GetOfferMembers(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOfferMembers", reflect.TypeOf((*MockIExchangeManager)(nil).GetOfferMembers), offerId)
}

// OfferExists mocks base method
func (m *MockIExchangeManager) OfferExists(offerId types.ID) (bool, error) {
	ret := m.ctrl.Call(m, "OfferExists", offerId)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OfferExists indicates an expected call of OfferExists
func (mr *MockIExchangeManagerMockRecorder) OfferExists(offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OfferExists", reflect.TypeOf((*MockIExchangeManager)(nil).OfferExists), offerId)
}

// AddDataIds mocks base method
func (m *MockIExchangeManager) AddDataIds(ctx context.Context, opts *bind.TransactOpts, offerId types.ID, dataIds []types.DataId) error {
	ret := m.ctrl.Call(m, "AddDataIds", ctx, opts, offerId, dataIds)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddDataIds indicates an expected call of AddDataIds
func (mr *MockIExchangeManagerMockRecorder) AddDataIds(ctx, opts, offerId, dataIds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDataIds", reflect.TypeOf((*MockIExchangeManager)(nil).AddDataIds), ctx, opts, offerId, dataIds)
}

// Cancel mocks base method
func (m *MockIExchangeManager) Cancel(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) error {
	ret := m.ctrl.Call(m, "Cancel", ctx, opts, offerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cancel indicates an expected call of Cancel
func (mr *MockIExchangeManagerMockRecorder) Cancel(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cancel", reflect.TypeOf((*MockIExchangeManager)(nil).Cancel), ctx, opts, offerId)
}

// Order mocks base method
func (m *MockIExchangeManager) Order(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) error {
	ret := m.ctrl.Call(m, "Order", ctx, opts, offerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Order indicates an expected call of Order
func (mr *MockIExchangeManagerMockRecorder) Order(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Order", reflect.TypeOf((*MockIExchangeManager)(nil).Order), ctx, opts, offerId)
}

// Prepare mocks base method
func (m *MockIExchangeManager) Prepare(ctx context.Context, opts *bind.TransactOpts, provider string, consumer, escrow common.Address, escrowSign [4]byte, escrowArgs []byte, dataIds []types.DataId) (types.ID, error) {
	ret := m.ctrl.Call(m, "Prepare", ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds)
	ret0, _ := ret[0].(types.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Prepare indicates an expected call of Prepare
func (mr *MockIExchangeManagerMockRecorder) Prepare(ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prepare", reflect.TypeOf((*MockIExchangeManager)(nil).Prepare), ctx, opts, provider, consumer, escrow, escrowSign, escrowArgs, dataIds)
}

// Reject mocks base method
func (m *MockIExchangeManager) Reject(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) error {
	ret := m.ctrl.Call(m, "Reject", ctx, opts, offerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Reject indicates an expected call of Reject
func (mr *MockIExchangeManagerMockRecorder) Reject(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Reject", reflect.TypeOf((*MockIExchangeManager)(nil).Reject), ctx, opts, offerId)
}

// Settle mocks base method
func (m *MockIExchangeManager) Settle(ctx context.Context, opts *bind.TransactOpts, offerId types.ID) error {
	ret := m.ctrl.Call(m, "Settle", ctx, opts, offerId)
	ret0, _ := ret[0].(error)
	return ret0
}

// Settle indicates an expected call of Settle
func (mr *MockIExchangeManagerMockRecorder) Settle(ctx, opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Settle", reflect.TypeOf((*MockIExchangeManager)(nil).Settle), ctx, opts, offerId)
}

// FilterEscrowExecutionFailed mocks base method
func (m *MockIExchangeManager) FilterEscrowExecutionFailed(opts *bind0.FilterOpts) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterEscrowExecutionFailed", opts)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterEscrowExecutionFailed indicates an expected call of FilterEscrowExecutionFailed
func (mr *MockIExchangeManagerMockRecorder) FilterEscrowExecutionFailed(opts interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeManager)(nil).FilterEscrowExecutionFailed), opts)
}

// FilterOfferCanceled mocks base method
func (m *MockIExchangeManager) FilterOfferCanceled(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferCanceled", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferCanceled indicates an expected call of FilterOfferCanceled
func (mr *MockIExchangeManagerMockRecorder) FilterOfferCanceled(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferCanceled", reflect.TypeOf((*MockIExchangeManager)(nil).FilterOfferCanceled), opts, offerId)
}

// FilterOfferPrepared mocks base method
func (m *MockIExchangeManager) FilterOfferPrepared(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPrepared", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPrepared indicates an expected call of FilterOfferPrepared
func (mr *MockIExchangeManagerMockRecorder) FilterOfferPrepared(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPrepared", reflect.TypeOf((*MockIExchangeManager)(nil).FilterOfferPrepared), opts, offerId)
}

// FilterOfferPresented mocks base method
func (m *MockIExchangeManager) FilterOfferPresented(opts *bind0.FilterOpts, offerId []types.ID) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferPresented", opts, offerId)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferPresented indicates an expected call of FilterOfferPresented
func (mr *MockIExchangeManagerMockRecorder) FilterOfferPresented(opts, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferPresented", reflect.TypeOf((*MockIExchangeManager)(nil).FilterOfferPresented), opts, offerId)
}

// FilterOfferReceipt mocks base method
func (m *MockIExchangeManager) FilterOfferReceipt(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferReceipt", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferReceipt indicates an expected call of FilterOfferReceipt
func (mr *MockIExchangeManagerMockRecorder) FilterOfferReceipt(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferReceipt", reflect.TypeOf((*MockIExchangeManager)(nil).FilterOfferReceipt), opts, offerId, consumer)
}

// FilterOfferRejected mocks base method
func (m *MockIExchangeManager) FilterOfferRejected(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferRejected", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferRejected indicates an expected call of FilterOfferRejected
func (mr *MockIExchangeManagerMockRecorder) FilterOfferRejected(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferRejected", reflect.TypeOf((*MockIExchangeManager)(nil).FilterOfferRejected), opts, offerId, consumer)
}

// FilterOfferSettled mocks base method
func (m *MockIExchangeManager) FilterOfferSettled(opts *bind0.FilterOpts, offerId []types.ID, consumer []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOfferSettled", opts, offerId, consumer)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOfferSettled indicates an expected call of FilterOfferSettled
func (mr *MockIExchangeManagerMockRecorder) FilterOfferSettled(opts, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOfferSettled", reflect.TypeOf((*MockIExchangeManager)(nil).FilterOfferSettled), opts, offerId, consumer)
}

// WatchEscrowExecutionFailed mocks base method
func (m *MockIExchangeManager) WatchEscrowExecutionFailed(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeEscrowExecutionFailed) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchEscrowExecutionFailed", opts, sink)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchEscrowExecutionFailed indicates an expected call of WatchEscrowExecutionFailed
func (mr *MockIExchangeManagerMockRecorder) WatchEscrowExecutionFailed(opts, sink interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchEscrowExecutionFailed", reflect.TypeOf((*MockIExchangeManager)(nil).WatchEscrowExecutionFailed), opts, sink)
}

// WatchOfferCanceled mocks base method
func (m *MockIExchangeManager) WatchOfferCanceled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferCanceled, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferCanceled", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferCanceled indicates an expected call of WatchOfferCanceled
func (mr *MockIExchangeManagerMockRecorder) WatchOfferCanceled(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferCanceled", reflect.TypeOf((*MockIExchangeManager)(nil).WatchOfferCanceled), opts, sink, offerId)
}

// WatchOfferPrepared mocks base method
func (m *MockIExchangeManager) WatchOfferPrepared(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPrepared, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPrepared", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPrepared indicates an expected call of WatchOfferPrepared
func (mr *MockIExchangeManagerMockRecorder) WatchOfferPrepared(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPrepared", reflect.TypeOf((*MockIExchangeManager)(nil).WatchOfferPrepared), opts, sink, offerId)
}

// WatchOfferPresented mocks base method
func (m *MockIExchangeManager) WatchOfferPresented(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferPresented, offerId []types.ID) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferPresented", opts, sink, offerId)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferPresented indicates an expected call of WatchOfferPresented
func (mr *MockIExchangeManagerMockRecorder) WatchOfferPresented(opts, sink, offerId interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferPresented", reflect.TypeOf((*MockIExchangeManager)(nil).WatchOfferPresented), opts, sink, offerId)
}

// WatchOfferReceipt mocks base method
func (m *MockIExchangeManager) WatchOfferReceipt(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferReceipt, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferReceipt", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferReceipt indicates an expected call of WatchOfferReceipt
func (mr *MockIExchangeManagerMockRecorder) WatchOfferReceipt(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferReceipt", reflect.TypeOf((*MockIExchangeManager)(nil).WatchOfferReceipt), opts, sink, offerId, consumer)
}

// WatchOfferRejected mocks base method
func (m *MockIExchangeManager) WatchOfferRejected(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferRejected, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferRejected", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferRejected indicates an expected call of WatchOfferRejected
func (mr *MockIExchangeManagerMockRecorder) WatchOfferRejected(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferRejected", reflect.TypeOf((*MockIExchangeManager)(nil).WatchOfferRejected), opts, sink, offerId, consumer)
}

// WatchOfferSettled mocks base method
func (m *MockIExchangeManager) WatchOfferSettled(opts *bind0.WatchOpts, sink chan<- *contracts.ExchangeOfferSettled, offerId []types.ID, consumer []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOfferSettled", opts, sink, offerId, consumer)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOfferSettled indicates an expected call of WatchOfferSettled
func (mr *MockIExchangeManagerMockRecorder) WatchOfferSettled(opts, sink, offerId, consumer interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOfferSettled", reflect.TypeOf((*MockIExchangeManager)(nil).WatchOfferSettled), opts, sink, offerId, consumer)
}
