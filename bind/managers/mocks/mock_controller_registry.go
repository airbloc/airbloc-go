// Code generated by MockGen. DO NOT EDIT.
// Source: controller_registry.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	bind "github.com/airbloc/airbloc-go/bind"
	contracts "github.com/airbloc/airbloc-go/bind/contracts"
	types "github.com/airbloc/airbloc-go/bind/types"
	gomock "github.com/golang/mock/gomock"
	bind0 "github.com/klaytn/klaytn/accounts/abi/bind"
	common "github.com/klaytn/klaytn/common"
	event "github.com/klaytn/klaytn/event"
)

// MockIControllerRegistryManager is a mock of IControllerRegistryManager interface
type MockIControllerRegistryManager struct {
	ctrl     *gomock.Controller
	recorder *MockIControllerRegistryManagerMockRecorder
}

// MockIControllerRegistryManagerMockRecorder is the mock recorder for MockIControllerRegistryManager
type MockIControllerRegistryManagerMockRecorder struct {
	mock *MockIControllerRegistryManager
}

// NewMockIControllerRegistryManager creates a new mock instance
func NewMockIControllerRegistryManager(ctrl *gomock.Controller) *MockIControllerRegistryManager {
	mock := &MockIControllerRegistryManager{ctrl: ctrl}
	mock.recorder = &MockIControllerRegistryManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIControllerRegistryManager) EXPECT() *MockIControllerRegistryManagerMockRecorder {
	return m.recorder
}

// Address mocks base method
func (m *MockIControllerRegistryManager) Address() common.Address {
	ret := m.ctrl.Call(m, "Address")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// Address indicates an expected call of Address
func (mr *MockIControllerRegistryManagerMockRecorder) Address() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Address", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Address))
}

// TxHash mocks base method
func (m *MockIControllerRegistryManager) TxHash() common.Hash {
	ret := m.ctrl.Call(m, "TxHash")
	ret0, _ := ret[0].(common.Hash)
	return ret0
}

// TxHash indicates an expected call of TxHash
func (mr *MockIControllerRegistryManagerMockRecorder) TxHash() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TxHash", reflect.TypeOf((*MockIControllerRegistryManager)(nil).TxHash))
}

// CreatedAt mocks base method
func (m *MockIControllerRegistryManager) CreatedAt() *big.Int {
	ret := m.ctrl.Call(m, "CreatedAt")
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CreatedAt indicates an expected call of CreatedAt
func (mr *MockIControllerRegistryManagerMockRecorder) CreatedAt() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatedAt", reflect.TypeOf((*MockIControllerRegistryManager)(nil).CreatedAt))
}

// Exists mocks base method
func (m *MockIControllerRegistryManager) Exists(controller common.Address) (bool, error) {
	ret := m.ctrl.Call(m, "Exists", controller)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists
func (mr *MockIControllerRegistryManagerMockRecorder) Exists(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Exists), controller)
}

// Get mocks base method
func (m *MockIControllerRegistryManager) Get(controller common.Address) (types.DataController, error) {
	ret := m.ctrl.Call(m, "Get", controller)
	ret0, _ := ret[0].(types.DataController)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockIControllerRegistryManagerMockRecorder) Get(controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Get), controller)
}

// Register mocks base method
func (m *MockIControllerRegistryManager) Register(ctx context.Context, opts *bind.TransactOpts, controllerAddr common.Address) error {
	ret := m.ctrl.Call(m, "Register", ctx, opts, controllerAddr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Register indicates an expected call of Register
func (mr *MockIControllerRegistryManagerMockRecorder) Register(ctx, opts, controllerAddr interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIControllerRegistryManager)(nil).Register), ctx, opts, controllerAddr)
}

// FilterOwnershipTransferred mocks base method
func (m *MockIControllerRegistryManager) FilterOwnershipTransferred(opts *bind0.FilterOpts, previousOwner, newOwner []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterOwnershipTransferred", opts, previousOwner, newOwner)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterOwnershipTransferred indicates an expected call of FilterOwnershipTransferred
func (mr *MockIControllerRegistryManagerMockRecorder) FilterOwnershipTransferred(opts, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryManager)(nil).FilterOwnershipTransferred), opts, previousOwner, newOwner)
}

// FilterRegistration mocks base method
func (m *MockIControllerRegistryManager) FilterRegistration(opts *bind0.FilterOpts, controller []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterRegistration", opts, controller)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterRegistration indicates an expected call of FilterRegistration
func (mr *MockIControllerRegistryManagerMockRecorder) FilterRegistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterRegistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).FilterRegistration), opts, controller)
}

// FilterUnregistration mocks base method
func (m *MockIControllerRegistryManager) FilterUnregistration(opts *bind0.FilterOpts, controller []common.Address) (bind.EventIterator, error) {
	ret := m.ctrl.Call(m, "FilterUnregistration", opts, controller)
	ret0, _ := ret[0].(bind.EventIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterUnregistration indicates an expected call of FilterUnregistration
func (mr *MockIControllerRegistryManagerMockRecorder) FilterUnregistration(opts, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterUnregistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).FilterUnregistration), opts, controller)
}

// WatchOwnershipTransferred mocks base method
func (m *MockIControllerRegistryManager) WatchOwnershipTransferred(opts *bind0.WatchOpts, sink chan<- *contracts.ControllerRegistryOwnershipTransferred, previousOwner, newOwner []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchOwnershipTransferred", opts, sink, previousOwner, newOwner)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchOwnershipTransferred indicates an expected call of WatchOwnershipTransferred
func (mr *MockIControllerRegistryManagerMockRecorder) WatchOwnershipTransferred(opts, sink, previousOwner, newOwner interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchOwnershipTransferred", reflect.TypeOf((*MockIControllerRegistryManager)(nil).WatchOwnershipTransferred), opts, sink, previousOwner, newOwner)
}

// WatchRegistration mocks base method
func (m *MockIControllerRegistryManager) WatchRegistration(opts *bind0.WatchOpts, sink chan<- *contracts.ControllerRegistryRegistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchRegistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchRegistration indicates an expected call of WatchRegistration
func (mr *MockIControllerRegistryManagerMockRecorder) WatchRegistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchRegistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).WatchRegistration), opts, sink, controller)
}

// WatchUnregistration mocks base method
func (m *MockIControllerRegistryManager) WatchUnregistration(opts *bind0.WatchOpts, sink chan<- *contracts.ControllerRegistryUnregistration, controller []common.Address) (event.Subscription, error) {
	ret := m.ctrl.Call(m, "WatchUnregistration", opts, sink, controller)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUnregistration indicates an expected call of WatchUnregistration
func (mr *MockIControllerRegistryManagerMockRecorder) WatchUnregistration(opts, sink, controller interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUnregistration", reflect.TypeOf((*MockIControllerRegistryManager)(nil).WatchUnregistration), opts, sink, controller)
}
